 
=== FICHIER : C:\xampp\htdocs\camps\add_child.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie si l'utilisateur est connecté.
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
?>

<title>Ajouter un Enfant - Fiche d'Inscription</title>

<main class="container mx-auto max-w-3xl px-4 sm:px-6 lg:px-8 py-12">

    <div class="mb-8">
        <a href="profile.php#children" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                <path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" />
            </svg>
            Retour au profil
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <form id="add-child-form" class="space-y-10">
            
            <!-- Section 1: Informations sur l'enfant -->
            <div>
                <h2 class="text-xl font-bold text-gray-900 border-b pb-2 mb-6">Informations sur l'enfant</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                        <label for="prenom_enfant" class="block text-sm font-medium text-gray-700">Prénom</label>
                        <input type="text" id="prenom_enfant" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                    <div>
                        <label for="nom_enfant" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" id="nom_enfant" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                    <div>
                        <label for="date_naissance" class="block text-sm font-medium text-gray-700">Date de naissance</label>
                        <input type="date" id="date_naissance" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 text-gray-600">
                    </div>
                    <div>
                        <label for="sexe" class="block text-sm font-medium text-gray-700">Sexe</label>
                        <select id="sexe" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                            <option>Homme</option>
                            <option>Femme</option>
                            <option>Autre</option>
                        </select>
                    </div>
                    <div class="sm:col-span-2">
                        <label for="num_enfant" class="block text-sm font-medium text-gray-700">N° de téléphone de l'enfant (optionnel)</label>
                        <input type="tel" id="num_enfant" placeholder="+33 6 12 34 56 78" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                </div>
            </div>

            <!-- Section 2: Informations de Santé -->
            <div>
                <h2 class="text-xl font-bold text-gray-900 border-b pb-2 mb-6">Santé</h2>
                <div class="space-y-6">
                    <div>
                        <label for="alergie" class="block text-sm font-medium text-gray-700">Allergies ou informations médicales importantes</label>
                        <textarea id="alergie" rows="4" placeholder="Aucune allergie connue, PAI pour asthme, etc." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></textarea>
                    </div>
                    <div>
                        <label for="carnet_sante" class="block text-sm font-medium text-gray-700">Copie du carnet de santé (vaccins)</label>
                        <input type="file" id="carnet_sante" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                        <p class="text-xs text-gray-500 mt-1">Fichier PDF ou image. La prise en charge de l'envoi de fichier est en développement.</p>
                    </div>
                </div>
            </div>

            <!-- Section 3: Responsable Légal 1 -->
            <div>
                <h2 class="text-xl font-bold text-gray-900 border-b pb-2 mb-6">Responsable Légal 1 (principal)</h2>
                 <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                        <label for="prenom_parent1" class="block text-sm font-medium text-gray-700">Prénom</label>
                        <input type="text" id="prenom_parent1" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="nom_parent1" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" id="nom_parent1" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="mail_parent1" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="mail_parent1" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="num_parent1" class="block text-sm font-medium text-gray-700">N° de téléphone</label>
                        <input type="tel" id="num_parent1" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                </div>
            </div>
            
            <!-- Section 4: Responsable Légal 2 -->
            <div>
                <h2 class="text-xl font-bold text-gray-900 border-b pb-2 mb-6">Responsable Légal 2 (optionnel)</h2>
                 <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                        <label for="prenom_parent2" class="block text-sm font-medium text-gray-700">Prénom</label>
                        <input type="text" id="prenom_parent2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="nom_parent2" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" id="nom_parent2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="mail_parent2" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="mail_parent2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                     <div>
                        <label for="num_parent2" class="block text-sm font-medium text-gray-700">N° de téléphone</label>
                        <input type="tel" id="num_parent2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                    </div>
                </div>
            </div>

            <div id="form-message" class="text-center mt-4 text-sm"></div>

            <div class="pt-6 text-right">
                <button type="submit" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-all hover:bg-blue-700 w-full sm:w-auto">
                    Enregistrer la fiche de l'enfant
                </button>
            </div>
        </form>
    </div>
</main>

<script>
document.getElementById('add-child-form').addEventListener('submit', async function(event) {
    event.preventDefault();

    const formData = {
        prenom_enfant: document.getElementById('prenom_enfant').value,
        nom_enfant: document.getElementById('nom_enfant').value,
        date_naissance: document.getElementById('date_naissance').value,
        sexe: document.getElementById('sexe').value,
        num_enfant: document.getElementById('num_enfant').value,
        alergie: document.getElementById('alergie').value,
        prenom_parent1: document.getElementById('prenom_parent1').value,
        nom_parent1: document.getElementById('nom_parent1').value,
        mail_parent1: document.getElementById('mail_parent1').value,
        num_parent1: document.getElementById('num_parent1').value,
        prenom_parent2: document.getElementById('prenom_parent2').value,
        nom_parent2: document.getElementById('nom_parent2').value,
        mail_parent2: document.getElementById('mail_parent2').value,
        num_parent2: document.getElementById('num_parent2').value,
    };
    
    // Note : la logique d'envoi de fichier (carnet_sante) n'est pas gérée ici.
    // Elle nécessite un traitement plus complexe (ex: envoi vers un serveur de stockage).

    const messageArea = document.getElementById('form-message');
    const submitButton = this.querySelector('button[type="submit"]');

    messageArea.innerHTML = '<p class="text-blue-500">Enregistrement en cours...</p>';
    submitButton.disabled = true;

    try {
        const response = await fetch('api/add_child.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (response.ok) {
            messageArea.innerHTML = `<p class="text-green-600 font-bold">${result.success}</p>`;
            setTimeout(() => { window.location.href = 'profile.php#children'; }, 1500);
        } else {
            throw new Error(result.error || 'Une erreur est survenue.');
        }
    } catch (error) {
        messageArea.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
        submitButton.disabled = false;
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Panneau d'Administration - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Panneau d'Administration</h1>

    <!-- Grille de navigation des rubriques admin -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

        <!-- Carte : Demandes d'accès Directeur -->
        <a href="admin_requests.php" class="relative bg-white p-6 rounded-xl shadow-lg border hover:border-blue-500 hover:ring-2 hover:ring-blue-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-blue-100 text-blue-600 flex items-center justify-center">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0ZM3 19.235v-.11a6.375 6.375 0 0 1 12.75 0v.109A12.318 12.318 0 0 1 9.374 21c-2.331 0-4.512-.645-6.374-1.766Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Demandes d'accès</h3>
                    <p class="text-sm text-gray-500">Traiter les demandes de directeurs.</p>
                </div>
                <span id="request-count-badge" class="absolute top-3 right-3 w-6 h-6 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span>
            </div>
        </a>

        <!-- Carte pour les demandes d'ajout de camp -->
        <a href="admin_camp_requests.php" class="relative bg-white p-6 rounded-xl shadow-lg border hover:border-yellow-500 hover:ring-2 hover:ring-yellow-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-yellow-100 text-yellow-600 flex items-center justify-center">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15m0-3-3-3m0 0-3 3m3-3V15" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Demandes de Camps</h3>
                    <p class="text-sm text-gray-500">Approuver les nouveaux camps.</p>
                </div>
                <span id="camp-request-count-badge" class="absolute top-3 right-3 w-6 h-6 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span>
            </div>
        </a>

        <!-- Carte : Ajouter un camp -->
        <a href="admin_add_camp.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-green-500 hover:ring-2 hover:ring-green-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-green-100 text-green-600 flex items-center justify-center">
                     <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 10.5v6m3-3H9m4.06-7.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Ajouter un camp</h3>
                    <p class="text-sm text-gray-500">Créer une fiche manuellement.</p>
                </div>
            </div>
        </a>
        
        <!-- Carte : Historique des directeurs acceptés -->
        <a href="admin_history_accepted.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-purple-500 hover:ring-2 hover:ring-purple-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-purple-100 text-purple-600 flex items-center justify-center">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Directeurs Acceptés</h3>
                    <p class="text-sm text-gray-500">Voir l'historique des acceptations.</p>
                </div>
            </div>
        </a>
        
        <!-- Carte : Historique des demandes refusées -->
        <a href="admin_history_refused.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-red-500 hover:ring-2 hover:ring-red-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-red-100 text-red-600 flex items-center justify-center">
                     <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Demandes Refusées</h3>
                    <p class="text-sm text-gray-500">Voir l'historique des refus.</p>
                </div>
            </div>
        </a>

    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Fonction réutilisable pour mettre à jour les compteurs
    async function updateRequestCount(apiUrl, badgeId) {
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) return;
            const data = await response.json();
            const badge = document.getElementById(badgeId);
            if (badge && data.count > 0) {
                badge.textContent = data.count;
                badge.classList.remove('hidden');
            } else if (badge) {
                badge.classList.add('hidden');
            }
        } catch (error) {
            console.error('Erreur de mise à jour du compteur pour ' + badgeId, error);
        }
    }
    
    // Met à jour les deux compteurs au chargement de la page
    updateRequestCount('api/get_request_count.php', 'request-count-badge');
    updateRequestCount('api/get_camp_request_count.php', 'camp-request-count-badge');
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin_add_camp.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Ajouter un Camp - Admin</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">

    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-2 text-gray-900">Ajouter un nouveau camp manuellement</h1>
        <p class="text-sm text-gray-500 mb-6">Note : Le camp sera assigné à votre propre compte directeur. Une future version permettra de choisir un autre organisateur.</p>
        
        <form id="add-camp-form" class="space-y-6">
            <div>
                <label for="nom" class="block text-sm font-medium text-gray-700">Nom du camp</label>
                <input type="text" id="nom" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2">
            </div>
            <div>
                <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea id="description" rows="4" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"></textarea>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="ville" class="block text-sm font-medium text-gray-700">Ville</label>
                    <input type="text" id="ville" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div>
                    <label for="code_postal" class="block text-sm font-medium text-gray-700">Code Postal</label>
                    <input type="text" id="code_postal" required pattern="[0-9]{5}" title="Le code postal doit contenir 5 chiffres." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
            </div>
             <div>
                <label for="adresse" class="block text-sm font-medium text-gray-700">Adresse exacte</label>
                <input type="text" id="adresse" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
            </div>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label for="prix" class="block text-sm font-medium text-gray-700">Prix (€)</label>
                    <input type="number" id="prix" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div>
                    <label for="age_min" class="block text-sm font-medium text-gray-700">Âge minimum</label>
                    <input type="number" id="age_min" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div>
                    <label for="age_max" class="block text-sm font-medium text-gray-700">Âge maximum</label>
                    <input type="number" id="age_max" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="date_debut" class="block text-sm font-medium text-gray-700">Date de début</label>
                    <input type="date" id="date_debut" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div>
                    <label for="date_fin" class="block text-sm font-medium text-gray-700">Date de fin</label>
                    <input type="date" id="date_fin" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
                </div>
            </div>
            <div>
                <label for="image_url" class="block text-sm font-medium text-gray-700">URL de l'image d'illustration</label>
                <input type="url" id="image_url" placeholder="https://..." required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 focus:border-blue-500 focus:ring-blue-500">
            </div>
            <div id="form-message" class="text-center mt-4 text-sm font-medium"></div>
            <div class="pt-4 text-right">
                <button type="submit" class="bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 hover:bg-green-700">
                    Ajouter le camp
                </button>
            </div>
        </form>
    </div>
</main>

<script>
document.getElementById('add-camp-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formMessage = document.getElementById('form-message');
    const submitButton = this.querySelector('button[type="submit"]');

    const campData = {
        nom: document.getElementById('nom').value,
        description: document.getElementById('description').value,
        ville: document.getElementById('ville').value,
        code_postal: document.getElementById('code_postal').value,
        adresse: document.getElementById('adresse').value,
        prix: document.getElementById('prix').value,
        age_min: document.getElementById('age_min').value,
        age_max: document.getElementById('age_max').value,
        date_debut: document.getElementById('date_debut').value,
        date_fin: document.getElementById('date_fin').value,
        image_url: document.getElementById('image_url').value
    };

    formMessage.innerHTML = '<p class="text-blue-500">Ajout du camp en cours...</p>';
    submitButton.disabled = true;
    submitButton.classList.add('opacity-50', 'cursor-not-allowed');

    try {
        const response = await fetch('api/add_camp.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(campData)
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.error || 'Une erreur inconnue est survenue.');
        }

        formMessage.innerHTML = `<p class="text-green-600">${result.success}</p>`;
        this.reset();
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-50', 'cursor-not-allowed');

    } catch (error) {
        formMessage.innerHTML = `<p class="text-red-600">${error.message}</p>`;
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin_camp_requests.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Demandes d'Ajout de Camp - Admin</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-4">Camps en attente d'approbation</h1>
        <div id="camp-requests-list" class="space-y-4"></div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const listContainer = document.getElementById('camp-requests-list');

    async function fetchCampRequests() {
        listContainer.innerHTML = '<p class="text-gray-500 text-center py-4">Chargement...</p>';
        try {
            const response = await fetch('api/get_camp_requests.php');
            if (!response.ok) throw new Error('Erreur réseau.');
            const requests = await response.json();

            listContainer.innerHTML = '';
            if (requests.length === 0) {
                listContainer.innerHTML = '<p class="text-gray-500 text-center py-4">Aucune demande de camp en attente.</p>';
                return;
            }

            requests.forEach(camp => {
                const card = `
                    <div class="request-card bg-gray-50 p-4 rounded-lg border" id="camp-card-${camp.id}">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="font-bold text-lg">${camp.nom}</p>
                                <p class="text-sm text-gray-600">${camp.ville}, ${camp.code_postal}</p>
                                <p class="text-xs text-gray-400 mt-1">Soumis par: <span class="font-medium">${camp.organisateur_nom || 'N/A'}</span></p>
                            </div>
                            <div class="flex items-center gap-3">
                                <a href="camp_details.php?id=${camp.id}" target="_blank" class="text-xs bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded-lg font-semibold">Prévisualiser</a>
                                <button class="process-camp-button bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-3 rounded-lg" data-action="approve" data-campid="${camp.id}">Approuver</button>
                                <button class="process-camp-button bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-3 rounded-lg" data-action="deny" data-campid="${camp.id}">Refuser</button>
                            </div>
                        </div>
                    </div>`;
                listContainer.innerHTML += card;
            });

            document.querySelectorAll('.process-camp-button').forEach(button => {
                button.addEventListener('click', handleProcessCampClick);
            });

        } catch (error) {
            listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
        }
    }

    async function handleProcessCampClick(event) {
        const button = event.currentTarget;
        const action = button.dataset.action;
        const campId = button.dataset.campid;
        
        if (action === 'deny' && !confirm('Êtes-vous sûr de vouloir refuser et supprimer ce camp ?')) {
            return;
        }

        button.parentElement.querySelectorAll('button').forEach(btn => btn.disabled = true);
        button.textContent = '...';

        try {
            const response = await fetch('api/process_camp_request.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ campId, action })
            });

            if (!response.ok) throw new Error((await response.json()).error || 'Erreur.');
            
            const cardToRemove = document.getElementById(`camp-card-${campId}`);
            if (cardToRemove) cardToRemove.remove();

        } catch (error) {
            alert('Erreur: ' + error.message);
            button.parentElement.querySelectorAll('button').forEach(btn => btn.disabled = false);
            button.textContent = action === 'approve' ? 'Approuver' : 'Refuser';
        }
    }

    fetchCampRequests();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin_history_accepted.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Directeurs Acceptés - Admin</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-4">Historique des Directeurs Acceptés</h1>
        <div id="accepted-list" class="space-y-3">
            <!-- La liste des directeurs acceptés sera chargée ici par JavaScript -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const listContainer = document.getElementById('accepted-list');
    listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Chargement de l\'historique...</p>';
    try {
        const response = await fetch('api/get_accepted_directors.php');
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erreur réseau lors de la récupération de l\'historique.');
        }
        const directors = await response.json();
        
        listContainer.innerHTML = '';
        if(directors.length === 0) {
            listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Aucun directeur n\'a encore été accepté.</p>';
            return;
        }

        directors.forEach(director => {
            const directorCard = `
                <div class="bg-gray-50 p-3 rounded-lg border flex justify-between items-center">
                    <div>
                        <p class="font-semibold">${director.prenom} ${director.nom}</p>
                        <p class="text-sm text-gray-600">${director.mail}</p>
                    </div>
                    <span class="text-xs font-mono text-gray-400" title="ID de l'utilisateur">${director.id}</span>
                </div>
            `;
            listContainer.innerHTML += directorCard;
        });
    } catch (error) {
        listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin_history_refused.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Historique des Camps Refusés - Admin</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-4">Historique des Camps Refusés</h1>
        <div id="refused-camps-list" class="space-y-3">
            <!-- La liste sera chargée ici par JavaScript -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const listContainer = document.getElementById('refused-camps-list');

    async function fetchRefusedCamps() {
        listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Chargement de l\'historique...</p>';
        try {
            const response = await fetch('api/get_refused_camps.php');
            if (!response.ok) throw new Error('Erreur réseau.');
            const camps = await response.json();
            
            listContainer.innerHTML = '';
            if(camps.length === 0) {
                listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Aucun camp n\'a encore été refusé.</p>';
                return;
            }

            camps.forEach(camp => {
                const campCard = document.createElement('div');
                campCard.className = "camp-card bg-red-50 p-3 rounded-lg border border-red-200 flex justify-between items-center";
                campCard.id = `camp-${camp.id}`;
                campCard.innerHTML = `
                    <div>
                        <p class="font-semibold text-gray-800">${camp.nom}</p>
                        <p class="text-sm text-red-800">${camp.ville}</p>
                    </div>
                    <button class="requeue-button text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold px-2 py-1 rounded-md" data-campid="${camp.id}">
                        Remettre en attente
                    </button>
                `;
                listContainer.appendChild(campCard);
            });

            document.querySelectorAll('.requeue-button').forEach(button => {
                button.addEventListener('click', handleRequeueClick);
            });

        } catch (error) {
            listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
        }
    }

    async function handleRequeueClick(event) {
        const button = event.currentTarget;
        const campId = button.dataset.campid;

        if (!confirm('Voulez-vous vraiment remettre ce camp dans la liste des demandes en attente ?')) {
            return;
        }

        button.disabled = true;
        button.textContent = '...';

        try {
            const response = await fetch('api/requeue_camp.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ campId })
            });

            const result = await response.json();
            if (!response.ok) throw new Error(result.error || 'Une erreur est survenue.');

            // Supprimer la carte de l'interface si l'opération a réussi
            const cardToRemove = document.getElementById(`camp-${campId}`);
            if (cardToRemove) {
                cardToRemove.remove();
            }
            if (listContainer.children.length === 0) {
                listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Aucun camp n\'a encore été refusé.</p>';
            }

        } catch (error) {
            alert('Erreur: ' + error.message);
            button.disabled = false;
            button.textContent = 'Remettre en attente';
        }
    }

    fetchRefusedCamps();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\admin_requests.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Demandes d'accès - Admin</title>

<!-- Modale pour afficher les détails de l'utilisateur -->
<div id="user-details-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-lg flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-2xl shadow-2xl p-6 max-w-lg w-full relative m-4 transform transition-all" id="user-modal-content">
        <h2 class="text-2xl font-bold mb-4 text-gray-800">Détails du demandeur</h2>
        <div id="user-details-content" class="space-y-2 text-sm"></div>
        <button id="close-modal-button" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
        </button>
        <div id="copy-feedback" class="absolute bottom-4 right-4 bg-green-500 text-white text-xs font-bold py-1 px-3 rounded-full transition-opacity opacity-0">Copié !</div>
    </div>
</div>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-4">Demandes d'accès Directeur en attente</h1>
        <div id="requests-list" class="space-y-4"></div>
    </div>
</main>

<script>
// Le JavaScript de l'ancienne page admin.php est transféré ici
document.addEventListener('DOMContentLoaded', function() {
    const requestsList = document.getElementById('requests-list');
    const modal = document.getElementById('user-details-modal');
    const modalContent = document.getElementById('user-details-content');
    const closeModalButton = document.getElementById('close-modal-button');
    const copyFeedback = document.getElementById('copy-feedback');

    let allRequestsData = [];

    async function fetchRequests() {
        requestsList.innerHTML = '<p class="text-gray-500 text-center py-4">Chargement des demandes...</p>';
        try {
            const response = await fetch('api/get_director_requests.php');
            if (!response.ok) throw new Error('Erreur réseau.');
            allRequestsData = await response.json();
            renderRequests(allRequestsData);
        } catch (error) {
            requestsList.innerHTML = `<p class="text-red-600 font-bold text-center py-4">${error.message}</p>`;
        }
    }
    
    function renderRequests(requests) {
        requestsList.innerHTML = '';
        if (requests.length === 0) {
            requestsList.innerHTML = '<p class="text-gray-500 text-center py-4">Aucune demande en attente.</p>';
            return;
        }
        requests.forEach(user => {
            const requestCard = document.createElement('div');
            requestCard.className = 'request-card bg-gray-50 p-4 rounded-lg border';
            requestCard.id = `user-${user.id}`;
            requestCard.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
                    <div class="md:col-span-2">
                        <p class="font-bold text-lg">${user.prenom} ${user.nom}</p>
                        <p class="text-sm text-gray-600">${user.mail}</p>
                    </div>
                    <div class="flex items-center justify-end gap-3 flex-wrap">
                        <button class="view-details-button bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-3 rounded-lg text-sm" data-userid="${user.id}">Voir infos</button>
                        <button class="process-button bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-3 rounded-lg" data-action="accept" data-userid="${user.id}">Accepter</button>
                        <button class="process-button bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-3 rounded-lg" data-action="refuse" data-userid="${user.id}">Refuser</button>
                    </div>
                </div>`;
            requestsList.appendChild(requestCard);
        });
        addEventListeners();
    }

    function addEventListeners() {
        document.querySelectorAll('.process-button').forEach(btn => btn.addEventListener('click', handleProcessClick));
        document.querySelectorAll('.view-details-button').forEach(btn => btn.addEventListener('click', handleViewDetailsClick));
    }

    function handleViewDetailsClick(event) {
        const userId = event.currentTarget.dataset.userid;
        const user = allRequestsData.find(u => u.id === userId);
        if (!user) return;
        modalContent.innerHTML = `
            ${createDetailRow('ID Utilisateur', user.id)}
            ${createDetailRow('Prénom', user.prenom)}
            ${createDetailRow('Nom', user.nom)}
            ${createDetailRow('Email', user.mail)}
            ${createDetailRow('Téléphone', user.tel || 'Non fourni')}
        `;
        modal.classList.remove('hidden');
        document.querySelectorAll('.copy-button').forEach(btn => btn.addEventListener('click', handleCopyClick));
    }
    
    function createDetailRow(label, value) {
        const id = `copy-${label.replace(/\s+/g, '')}`;
        return `
            <div class="flex justify-between items-center bg-gray-100 p-2 rounded-md">
                <span class="font-semibold text-gray-700">${label} :</span>
                <div class="flex items-center gap-3">
                    <span id="${id}" class="text-gray-900 font-mono">${value}</span>
                    <button class="copy-button text-gray-400 hover:text-blue-600" data-target="${id}" title="Copier">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>
                    </button>
                </div>
            </div>`;
    }

    function handleCopyClick(event) {
        const targetId = event.currentTarget.dataset.target;
        const textToCopy = document.getElementById(targetId).textContent;
        const textArea = document.createElement("textarea");
        textArea.value = textToCopy;
        document.body.appendChild(textArea);
        textArea.select();
        try {
            document.execCommand('copy');
            copyFeedback.classList.remove('opacity-0');
            setTimeout(() => copyFeedback.classList.add('opacity-0'), 1500);
        } catch (err) {
            console.error('Erreur de copie:', err);
        }
        document.body.removeChild(textArea);
    }

    async function handleProcessClick(event) {
        const button = event.currentTarget;
        const action = button.dataset.action;
        const userId = button.dataset.userid;
        button.parentElement.querySelectorAll('button').forEach(btn => btn.disabled = true);
        button.textContent = '...';
        try {
            const response = await fetch('api/process_request.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, action })
            });
            if (!response.ok) throw new Error((await response.json()).error || 'Erreur.');
            const cardToRemove = document.getElementById(`user-${userId}`);
            if (cardToRemove) cardToRemove.remove();
        } catch (error) {
            alert(`Erreur : ${error.message}`);
            button.parentElement.querySelectorAll('button').forEach(btn => btn.disabled = false);
            button.textContent = action === 'accept' ? 'Accepter' : 'Refuser';
        }
    }

    closeModalButton.addEventListener('click', () => modal.classList.add('hidden'));
    fetchRequests();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\aide.php === 
<?php
require_once 'partials/header.php';

// On définit tous les statuts possibles pour simplifier le code HTML
$is_logged_in = isset($_SESSION['user']);
$is_director =  $is_logged_in && ($_SESSION['user']['is_directeur'] ?? false);
$request_pending = $is_logged_in && ($_SESSION['user']['demande_en_cours'] ?? false);
$is_refused = $is_logged_in && ($_SESSION['user']['is_refused'] ?? false);
?>

<title>Aide et Documentation - ColoMap</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="bg-white p-8 rounded-xl shadow-lg border">

        <h1 class="text-3xl font-extrabold text-center text-gray-900 mb-4">Centre d'Aide de ColoMap</h1>
        <p class="text-center text-gray-600 mb-12">Trouvez ici les réponses à vos questions, que vous soyez un parent à la recherche du camp parfait ou un organisateur souhaitant rejoindre notre plateforme.</p>

        <!-- Section Pour les Parents -->
        <div class="mb-10">
            <h2 class="text-2xl font-bold text-blue-600 mb-4">Pour les Parents</h2>
            <div class="space-y-4">
                <div>
                    <h3 class="font-semibold text-lg">Qu'est-ce que ColoMap ?</h3>
                    <p class="text-gray-700">ColoMap est une plateforme conçue pour simplifier la recherche de colonies de vacances et de camps pour vos enfants. Nous centralisons des centaines d'offres partout en France pour vous permettre de trouver, comparer et choisir l'aventure idéale en quelques clics.</p>
                </div>
                <div>
                    <h3 class="font-semibold text-lg">Comment rechercher un camp ?</h3>
                    <p class="text-gray-700">Utilisez la barre de recherche sur la page d'accueil pour filtrer les camps par nom, ou cliquez sur "Filtres avancés" pour affiner votre recherche par ville, date ou âge de votre enfant. Si vous êtes connecté, vous pouvez même filtrer directement en fonction de l'âge de vos enfants enregistrés !</p>
                </div>
                <div>
                    <h3 class="font-semibold text-lg">La création d'un compte est-elle obligatoire ?</h3>
                    <p class="text-gray-700">Vous pouvez explorer tous les camps sans compte. Cependant, un compte gratuit est nécessaire pour accéder aux détails complets d'un camp, comme l'adresse exacte ou la brochure PDF. Cela nous permet d'assurer un environnement sécurisé pour nos organisateurs partenaires.</p>
                </div>
            </div>
        </div>

        <!-- Section Pour les Organisateurs -->
        <div class="mb-12">
            <h2 class="text-2xl font-bold text-green-600 mb-4">Pour les Organisateurs</h2>
            <div class="space-y-4">
                <div>
                    <h3 class="font-semibold text-lg">Pourquoi inscrire mes camps sur ColoMap ?</h3>
                    <p class="text-gray-700">En rejoignant ColoMap, vous bénéficiez d'une visibilité exceptionnelle auprès de milliers de parents activement à la recherche d'une colonie. Notre plateforme vous offre un "Espace Organisateur" complet pour gérer vos fiches de camp, ajouter de nouvelles offres et mettre en avant vos points forts.</p>
                </div>
                <div>
                    <h3 class="font-semibold text-lg">Comment puis-je ajouter mes camps ?</h3>
                    <p class="text-gray-700">Pour ajouter et gérer vos camps, vous devez disposer d'un "Espace Directeur". Ce statut est accordé après une simple demande de votre part et une vérification de notre équipe. Cette étape garantit la qualité et la fiabilité des offres présentées sur notre site.</p>
                </div>
            </div>
        </div>
        
        <!-- Section "Devenir Directeur" -->
        <div class="bg-gray-100 rounded-lg p-6 text-center">
            <h2 class="text-xl font-bold text-gray-800 mb-3">Prêt à rejoindre l'aventure ?</h2>
            
            <?php if (!$is_logged_in): ?>
                <p class="text-gray-600 mb-4">Créez un compte ou connectez-vous pour pouvoir demander un accès directeur.</p>
                <a href="login.php" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-all duration-300 hover:bg-gradient-to-r hover:from-blue-500 hover:via-purple-500 hover:to-pink-500">
                    Connexion / Inscription
                </a>

            <?php elseif ($is_director): ?>
                <p class="text-green-700 font-semibold mb-4">Vous disposez déjà d'un accès directeur.</p>
                <a href="organisateurs.php" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700">
                    Accéder à mon espace
                </a>

            <?php elseif ($is_refused): ?>
                <!-- NOUVEAU : Cas où la demande a été refusée -->
                <p class="text-red-700 font-semibold mb-4">Votre précédente demande d'accès n'a pas pu être validée. Pour plus d'informations, veuillez contacter le support.</p>
                <button class="bg-gray-400 text-white font-bold py-2 px-6 rounded-lg cursor-not-allowed">
                    Demande non autorisée
                </button>

            <?php elseif ($request_pending): ?>
                <p class="text-blue-700 font-semibold mb-4">Votre demande d'accès a bien été reçue et est en cours de traitement.</p>
                <button class="bg-gray-400 text-white font-bold py-2 px-6 rounded-lg cursor-not-allowed">
                    Demande en cours...
                </button>

            <?php else: ?>
                <p class="text-gray-600 mb-4">Cliquez sur le bouton ci-dessous pour nous envoyer votre demande.</p>
                <button id="request-access-button" class="bg-purple-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-purple-700">
                    Demander un espace directeur
                </button>
                <div id="request-message" class="mt-4 text-sm"></div>
            <?php endif; ?>
        </div>
    </div>
</main>

<script>
// Le script JS de cette page n'a pas besoin d'être modifié
document.addEventListener('DOMContentLoaded', function() {
    const requestButton = document.getElementById('request-access-button');
    const requestMessage = document.getElementById('request-message');
    if (requestButton) {
        requestButton.addEventListener('click', async function() {
            this.disabled = true; this.textContent = 'Envoi en cours...';
            try {
                const response = await fetch('api/request_director_access.php', { method: 'POST' });
                const result = await response.json();
                if (!response.ok) throw new Error(result.error || 'Erreur.');
                requestMessage.innerHTML = `<p class="text-green-600 font-bold">${result.success}</p>`;
                // On cache le bouton après un succès pour éviter les demandes multiples
                setTimeout(() => { requestButton.style.display = 'none'; }, 2000);
            } catch (error) {
                requestMessage.innerHTML = `<p class="text-red-600 font-bold">${error.message}</p>`;
                this.disabled = false; this.textContent = 'Demander un espace directeur';
            }
        });
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\animateur.php === 
<?php
// On inclut le header qui gère la session et les statuts
require_once 'partials/header.php';

// Sécurité : si l'utilisateur n'est pas connecté OU n'est pas un animateur, on le redirige.
// La variable $is_animateur vient du header.php que nous venons d'inclure.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_animateur'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>
<title>Espace Animateur - ColoMap</title>

<main class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl py-6">
    
    <section class="text-center mt-4 mb-8">
        <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
            Espace <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">Animateur</span>
        </h1>
        <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
            Bienvenue. Retrouvez ici la liste de tous les camps disponibles sur la plateforme.
        </p>
    </section>

    <section class="mt-8">
        <h2 class="text-2xl font-bold mb-6">Tous les camps disponibles</h2>
        
        <div id="loader" class="flex justify-center items-center h-64"><div class="loader"></div></div>
        <div id="camps-list" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            </div>
    </section>

</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    
    const campsListContainer = document.getElementById('camps-list');
    const loader = document.getElementById('loader');

    async function fetchAndDisplayCamps() {
        loader.style.display = 'flex';
        campsListContainer.innerHTML = ''; 

        const apiUrl = `api/get_camps.php`;
        
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Erreur réseau lors de la récupération des camps.');
            }
            const camps = await response.json();
            
            loader.style.display = 'none';

            if (camps.error || camps.length === 0) {
                campsListContainer.innerHTML = `<p class="text-gray-500 col-span-full text-center">Aucun camp disponible pour le moment.</p>`;
                return;
            }
            
            renderCamps(camps);

        } catch (error) {
            loader.style.display = 'none';
            campsListContainer.innerHTML = `<p class="text-red-500 col-span-full text-center">${error.message}</p>`;
        }
    }
    
    function renderCamps(camps) {
        let newContent = '';
        camps.forEach(camp => {
            newContent += `
                <div class="bg-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 group">
                    <div class="relative">
                         <img src="${camp.image_url}" alt="Image pour ${camp.nom}" class="w-full h-48 object-cover cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'" onerror="this.onerror=null;this.src='https://placehold.co/600x400/e2e8f0/cbd5e0?text=Image+invalide';">
                    </div>
                    <div class="p-4 cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'">
                         <h3 class="font-bold text-lg mb-2 truncate">${camp.nom}</h3>
                         <p class="text-gray-600 text-sm mb-1">📍 ${camp.ville}</p>
                         <p class="text-gray-600 text-sm mb-3">🎂 ${camp.age_min} - ${camp.age_max} ans</p>
                         <div class="flex justify-between items-center">
                             <p class="text-blue-600 font-bold text-lg">${camp.prix}€</p>
                              <span class="text-xs font-semibold text-gray-500">${new Date(camp.date_debut).toLocaleDateString('fr-FR')}</span>
                         </div>
                    </div>
                </div>`;
        });
        campsListContainer.innerHTML = newContent;
    }

    fetchAndDisplayCamps();
});
</script>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\arbre du 11 juin 2025.txt === 
Voici l'arborescence de vos fichiers, organisée à partir du dossier racine `camps/`.

```
camps/
├── api/
│   ├── add_camp.php
│   ├── add_child.php
│   ├── config.php
│   ├── create_organisateur.php
│   ├── delete_camp.php
│   ├── get_accepted_directors.php
│   ├── get_camp_details.php
│   ├── get_camp_request_count.php
│   ├── get_camp_requests.php
│   ├── get_camps.php
│   ├── get_children.php
│   ├── get_conversations.php
│   ├── get_director_requests.php
│   ├── get_favorites.php
│   ├── get_inscription_details.php
│   ├── get_messages.php
│   ├── get_my_camps.php
│   ├── get_my_reservations.php
│   ├── get_organisateurs.php
│   ├── get_refused_camps.php
│   ├── get_refused_requests.php
│   ├── get_request_count.php
│   ├── get_unread_messages_count.php
│   ├── logout.php
│   ├── process_camp_request.php
│   ├── process_inscription.php
│   ├── process_request.php
│   ├── request_director_access.php
│   ├── requeue_camp.php
│   ├── send_message.php
│   ├── start_conversation.php
│   ├── toggle_favorite.php
│   ├── update_camp.php
│   ├── user_login.php
│   └── user_register.php
├── partials/
│   └── header.php
├── add_child.php
├── admin.php
├── admin_add_camp.php
├── admin_camp_requests.php
├── admin_history_accepted.php
├── admin_history_refused.php
├── admin_requests.php
├── aide.php
├── camp_details.php
├── children.php
├── create_camp.php
├── create_organisateur.php
├── edit_camp.php
├── favorites.php
├── index.php
├── info_inscrit.php
├── inscription.php
├── login.php
├── mes_camps.php
├── messagerie.php
├── organisateurs.php
├── profile.php
├── public_infos.php
├── register.php
└── reservations.php
``` 
 
=== FICHIER : C:\xampp\htdocs\camps\camp_details.php === 
<?php
require_once 'partials/header.php';

// On récupère les informations de l'utilisateur pour les favoris et la connexion
$is_logged_in = isset($_SESSION['user']);
$user_favorites = $_SESSION['user']['favorites'] ?? [];
$camp_id = $_GET['id'] ?? '';
?>

<title>Détails du Camp - ColoMap</title>

<!-- POPUP DE CONNEXION OBLIGATOIRE -->
<div id="auth-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl p-8 max-w-sm w-full text-center">
        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 mb-4">
            <svg class="h-6 w-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" /></svg>
        </div>
        <h2 class="text-2xl font-bold mb-2">Accès réservé</h2>
        <p class="text-gray-600 mb-6">Vous devez être connecté pour voir les détails de ce camp.</p>
        <a href="login.php" class="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg inline-block hover:bg-blue-700">Se connecter</a>
        <a href="index.php" class="mt-4 text-sm text-gray-500 hover:text-gray-700">Retour à l'accueil</a>
    </div>
</div>

<main class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-6xl py-8">
    <div id="loader" class="text-center py-20"><div class="loader inline-block"></div><p class="mt-4 text-gray-600">Chargement...</p></div>
    <div id="camp-content" class="hidden">
        <div class="mb-6"><a href="index.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>Retour</a></div>
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12">
            <div class="lg:col-span-2">
                <img id="camp-image" src="" alt="Image du camp" class="w-full h-auto object-cover rounded-xl shadow-lg mb-4">
                <div class="flex justify-between items-start mb-6">
                    <div>
                        <h1 id="camp-name" class="text-4xl font-extrabold text-gray-900 mb-2"></h1>
                        <p id="camp-location" class="text-lg text-gray-500"></p>
                    </div>
                    <div class="flex items-center gap-2 mt-2">
                        <?php if ($is_logged_in): ?>
                        <button id="favorite-button" class="bg-white p-3 rounded-full shadow-md hover:bg-gray-100 transition-all" title="Ajouter aux favoris">
                            <?php $is_favorited = in_array($camp_id, $user_favorites); ?>
                            <svg class="w-6 h-6 <?php echo $is_favorited ? 'text-red-500 fill-current' : 'text-gray-500'; ?>" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.5l1.318-1.182a4.5 4.5 0 116.364 6.364L12 21l-7.682-7.682a4.5 4.5 0 010-6.364z"></path></svg>
                        </button>
                        <?php endif; ?>
                        <button id="share-button" class="bg-white p-3 rounded-full shadow-md hover:bg-gray-100 transition-all" title="Partager"><svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 12v8a2 2 0 002 2h12a2 2 0 002-2v-8m-4-6l-4-4m0 0L8 6m4-4v12"></path></svg></button>
                    </div>
                </div>
                <div class="flex items-center gap-6 text-sm text-gray-500 mb-6 border-y py-3">
                    <div class="flex items-center gap-2"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639l4.433-7.467a1.012 1.012 0 0 1 1.732 0l4.433 7.467a1.012 1.012 0 0 1 0 .639l-4.433 7.467a1.012 1.012 0 0 1-1.732 0l-4.433-7.467Z" /></svg><span id="camp-views" class="font-medium"></span> vues</div>
                    <div class="flex items-center gap-2"><svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 24 24"><path d="M11.645 20.91a.75.75 0 0 1-1.29 0A18.131 18.131 0 0 1 3.75 10.5a8.25 8.25 0 0 1 16.5 0c0 4.86-3.06 9.25-7.605 10.41Z" /></svg><span id="camp-likes" class="font-medium"></span> favoris</div>
                </div>
                <div class="prose max-w-none"><h2 class="text-2xl font-bold mb-4">Description du camp</h2><div id="camp-description" class="text-gray-700"></div></div>
            </div>
            <div class="lg:col-span-1">
                <div class="sticky top-24 bg-white p-6 rounded-xl shadow-lg border">
                    <div id="places-container" class="hidden text-center font-bold p-3 rounded-lg mb-4"><span id="camp-places"></span></div>
                    <h2 class="text-2xl font-bold mb-4">Votre séjour</h2>
                    <div class="space-y-4 mb-6">
                        <div class="flex items-start gap-3"><div class="flex-shrink-0 w-8 h-8 rounded-lg bg-blue-100 text-blue-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path d="M10 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM3.465 14.493a1.23 1.23 0 0 0 .41 1.412A9.957 9.957 0 0 0 10 18c2.31 0 4.438-.784 6.131-2.095a1.23 1.23 0 0 0 .41-1.412A9.99 9.99 0 0 0 10 12.001c-2.31 0-4.438.784-6.131 2.094Z" /></svg></div><div><p class="font-semibold">Âge</p><p id="camp-age" class="text-gray-600"></p></div></div>
                        <div class="flex items-start gap-3"><div class="flex-shrink-0 w-8 h-8 rounded-lg bg-green-100 text-green-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M5.75 2a.75.75 0 0 1 .75.75V4h7V2.75a.75.75 0 0 1 1.5 0V4h.25A2.75 2.75 0 0 1 18 6.75v8.5A2.75 2.75 0 0 1 15.25 18H4.75A2.75 2.75 0 0 1 2 15.25v-8.5A2.75 2.75 0 0 1 4.75 4H5V2.75A.75.75 0 0 1 5.75 2Zm-1 5.5a.75.75 0 0 0 0 1.5h10.5a.75.75 0 0 0 0-1.5H4.75Z" clip-rule="evenodd" /></svg></div><div><p class="font-semibold">Dates</p><p id="camp-dates" class="text-gray-600"></p></div></div>
                    </div>
                    <div id="action-buttons" class="text-center border-t pt-6 space-y-3">
                        <p class="text-gray-600 -mb-2">À partir de</p>
                        <p id="camp-price" class="text-4xl font-bold text-gray-900"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<script>
document.addEventListener('DOMContentLoaded', async function() {
    const isLoggedIn = <?php echo json_encode($is_logged_in); ?>;
    const loader = document.getElementById('loader');

    if (!isLoggedIn) {
        loader.style.display = 'none';
        document.getElementById("auth-modal").classList.remove("hidden");
        document.body.classList.add("overflow-hidden");
        return;
    }

    const campContent = document.getElementById('camp-content');
    const params = new URLSearchParams(window.location.search);
    const campId = params.get('id');
    const favoriteButton = document.getElementById('favorite-button');
    const shareButton = document.getElementById('share-button');

    if (!campId) {
        loader.innerHTML = '<p class="text-red-500 font-bold">Aucun camp sélectionné.</p>';
        return;
    }

    try {
        const response = await fetch(`api/get_camp_details.php?id=${campId}`);
        if (!response.ok) throw new Error('Camp introuvable.');
        const camp = await response.json();

        const safeSetText = (id, text) => {
            const el = document.getElementById(id);
            if (el) el.textContent = text;
        };
        const safeSetHTML = (id, html) => {
            const el = document.getElementById(id);
            if (el) el.innerHTML = html;
        };

        document.title = `${camp.nom} - ColoMap`;
        if (document.getElementById('camp-image')) document.getElementById('camp-image').src = camp.image_url;
        safeSetText('camp-name', camp.nom);
        safeSetText('camp-location', camp.ville);
        safeSetHTML('camp-description', camp.description);
        safeSetText('camp-views', camp.vues);
        safeSetText('camp-likes', camp.likes);
        safeSetText('camp-price', `${camp.prix}€`);
        safeSetText('camp-age', `${camp.age_min} - ${camp.age_max} ans`);
        const startDate = new Date(camp.date_debut).toLocaleDateString('fr-FR', { day: 'numeric', month: 'long' });
        const endDate = new Date(camp.date_fin).toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' });
        safeSetText('camp-dates', `Du ${startDate} au ${endDate}`);

        const actionContainer = document.getElementById('action-buttons');
        const placesContainer = document.getElementById('places-container');

        if (camp.inscription_en_ligne) {
            placesContainer.classList.remove('hidden');
            if (camp.places_restantes > 0) {
                if (camp.places_restantes < 10) {
                    placesContainer.innerHTML = `<span>Plus que ${camp.places_restantes} places !</span>`;
                    placesContainer.className = 'text-center font-bold p-3 rounded-lg mb-4 bg-red-100 text-red-800';
                } else {
                    placesContainer.innerHTML = `<span>${camp.places_restantes} places restantes</span>`;
                    placesContainer.className = 'text-center font-bold p-3 rounded-lg mb-4 bg-blue-50 text-blue-800';
                }
                actionContainer.innerHTML += `<a href="inscription.php?id=${camp.id}" class="w-full block text-center bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700">S'inscrire en ligne</a>`;
            } else {
                placesContainer.innerHTML = 'Camp complet';
                placesContainer.className = 'text-center font-bold p-3 rounded-lg mb-4 bg-red-100 text-red-800';
            }
        } else if (camp.inscription_hors_ligne) {
            if (camp.pdf_url) {
                actionContainer.innerHTML += `<a href="${camp.pdf_url}" target="_blank" class="w-full block text-center bg-gray-800 text-white font-bold py-3 px-6 rounded-lg">Télécharger le dossier</a>`;
            }
            if (camp.adresse_retour) {
                actionContainer.innerHTML += `<p class="text-xs text-gray-500 pt-2">* À retourner à l'adresse suivante :<br>${camp.adresse_retour}</p>`;
            }
        }

        const contactBtnHtml = `<button id="contact-organizer-btn" data-organizer-id="${camp.organisateur_id}" class="w-full block text-center bg-gray-100 text-gray-800 font-bold py-3 px-6 rounded-lg hover:bg-gray-200">Contacter l'organisateur</button>`;
        if(camp.organisateur_id) {
            actionContainer.innerHTML += contactBtnHtml;
            document.getElementById('contact-organizer-btn').addEventListener('click', handleContactClick);
        }

        loader.classList.add('hidden');
        campContent.classList.remove('hidden');

    } catch (error) {
        loader.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
    }

    async function handleContactClick(event) {
        const organizerId = event.currentTarget.dataset.organizerId;
        event.currentTarget.textContent = 'Ouverture...';
        try {
            const response = await fetch('api/start_conversation.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ organisateurId: organizerId })
            });
            const result = await response.json();
            if(result.conversationId) {
                window.location.href = `messagerie.php?conv_id=${result.conversationId}`;
            } else {
                throw new Error(result.error || "Impossible de démarrer la conversation.");
            }
        } catch(e) {
            alert(e.message);
            event.currentTarget.textContent = "Contacter l'organisateur";
        }
    }

    if (favoriteButton) {
        favoriteButton.addEventListener('click', async function() {
            try {
                const response = await fetch('api/toggle_favorite.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ campId: campId })
                });
                const result = await response.json();
                if (response.ok) {
                    const svg = favoriteButton.querySelector('svg');
                    if (result.isFavorited) {
                        svg.classList.add('text-red-500', 'fill-current');
                        svg.classList.remove('text-gray-500');
                    } else {
                        svg.classList.remove('text-red-500', 'fill-current');
                        svg.classList.add('text-gray-500');
                    }
                } else {
                    throw new Error(result.error || "Erreur lors de la mise à jour des favoris.");
                }
            } catch (error) {
                alert(error.message);
            }
        });
    }

    if (shareButton) {
        shareButton.addEventListener('click', function() {
            if (navigator.share) {
                navigator.share({
                    title: document.title,
                    text: `Regardez ce camp sur ColoMap: ${camp.nom}`,
                    url: window.location.href
                }).catch(error => {
                    console.log('Erreur de partage:', error);
                });
            } else {
                alert("La fonction de partage n'est pas supportée sur cet appareil.");
            }
        });
    }
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\children.php === 
<?php
require_once 'partials/header.php';

if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
?>

<title>Mes Enfants - ColoMap</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="profile.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour à l'espace personnel
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-900">Gérer mes enfants</h1>
            <a href="add_child.php" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">
                Ajouter un enfant
            </a>
        </div>
        
        <div id="children-list" class="space-y-4">
            <!-- La liste des enfants sera chargée ici -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const listContainer = document.getElementById('children-list');

    async function fetchChildren() {
        listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Chargement...</p>';
        try {
            const response = await fetch('api/get_children.php');
            if (!response.ok) throw new Error('Erreur réseau');
            const children = await response.json();
            
            listContainer.innerHTML = '';
            if(children.length === 0) {
                listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Vous n\'avez pas encore enregistré d\'enfant.</p>';
                return;
            }

            children.forEach(child => {
                const card = `
                    <div class="bg-gray-50 p-4 rounded-lg border flex justify-between items-center">
                        <div>
                            <p class="font-semibold text-gray-800">${child.prenom}</p>
                            <p class="text-sm text-gray-600">${child.age !== null ? child.age + ' ans' : 'Âge non calculable'}</p>
                        </div>
                        <div class="flex items-center gap-4">
                            <a href="#" class="text-yellow-600 hover:underline text-sm font-medium">Modifier</a>
                            <button class="text-red-600 hover:underline text-sm font-medium">Supprimer</button>
                        </div>
                    </div>
                `;
                listContainer.innerHTML += card;
            });
            // Note: La logique de modification/suppression n'est pas encore implémentée.
        } catch (error) {
            listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
        }
    }

    fetchChildren();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\create_camp.php === 
<?php
require_once 'partials/header.php';
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
?>
<title>Créer un Nouveau Camp - ColoMap</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8"><a href="organisateurs.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>Retour</a></div>
    
    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <form id="single-page-form" class="space-y-10">
            
            <fieldset class="space-y-6">
                <legend class="text-2xl font-bold mb-4 border-b pb-2 w-full">Informations Générales</legend>
                <div><label for="nom" class="block text-sm font-medium text-gray-700">Nom du camp</label><input type="text" id="nom" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                <div><label for="description" class="block text-sm font-medium text-gray-700">Description</label><textarea id="description" rows="4" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea></div>
                <div class="grid md:grid-cols-2 gap-6">
                    <div><label for="date_debut" class="block text-sm font-medium text-gray-700">Date de début</label><input type="date" id="date_debut" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    <div><label for="date_fin" class="block text-sm font-medium text-gray-700">Date de fin</label><input type="date" id="date_fin" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                </div>
            </fieldset>

            <fieldset class="space-y-6 pt-6 border-t">
                 <legend class="text-2xl font-bold mb-4 border-b pb-2 w-full">Détails du Camp</legend>
                <div class="grid md:grid-cols-2 gap-6">
                    <div><label for="adresse" class="block text-sm font-medium text-gray-700">Adresse</label><input type="text" id="adresse" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    <div><label for="ville" class="block text-sm font-medium text-gray-700">Ville</label><input type="text" id="ville" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    <div><label for="code_postal" class="block text-sm font-medium text-gray-700">Code Postal</label><input type="text" id="code_postal" required pattern="[0-9]{5}" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                </div>
                <div class="grid md:grid-cols-3 gap-6 pt-4">
                    <div class="hidden"><label for="prix">Prix de base (€)</label><input type="number" id="prix" value="0" required></div>
                    <div><label for="age_min" class="block text-sm font-medium text-gray-700">Âge min.</label><input type="number" id="age_min" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    <div><label for="age_max" class="block text-sm font-medium text-gray-700">Âge max.</label><input type="number" id="age_max" required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                </div>
                <div><label for="image_url" class="block text-sm font-medium text-gray-700">URL de l'image d'illustration</label><input type="url" id="image_url" placeholder="https://..." required class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
            </fieldset>
            
            <fieldset class="space-y-6 pt-6 border-t">
                <legend class="text-2xl font-bold mb-2 border-b pb-2 w-full">Options d'Inscription</legend>
                <div class="pt-2"><label class="flex items-center cursor-pointer"><input type="checkbox" id="online-inscription" class="h-4 w-4 rounded text-blue-600 focus:ring-blue-500" checked><span class="ml-3 text-sm font-medium">Activer les inscriptions en ligne sur ColoMap</span></label></div>
                
                <div id="online-fields" class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <div class="flex justify-between items-center mb-1">
                                <label for="organisateur-select" class="block text-sm font-medium text-gray-700">Organisme responsable</label>
                                <button type="button" id="toggle-new-org-btn" class="text-sm text-blue-600 hover:underline font-medium">+ Créer</button>
                            </div>
                            <select id="organisateur-select" required class="bg-gray-50 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></select>
                            <div id="new-org-form" class="hidden mt-2 space-y-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                <h3 class="font-semibold text-gray-800">Création rapide d'un organisme</h3>
                                <div><input type="text" id="new-org-name" placeholder="Nom de l'organisme" class="w-full p-2 border-gray-300 rounded-md"></div>
                                <div class="grid md:grid-cols-2 gap-4">
                                    <div><input type="email" id="new-org-mail" placeholder="Email de contact" class="w-full p-2 border-gray-300 rounded-md"></div>
                                    <div><input type="tel" id="new-org-tel" placeholder="Téléphone" class="w-full p-2 border-gray-300 rounded-md"></div>
                                </div>
                                <div><input type="url" id="new-org-web" placeholder="Site web (optionnel)" class="w-full p-2 border-gray-300 rounded-md"></div>
                                <div id="new-org-message" class="text-xs"></div>
                                <div class="text-right">
                                    <button type="button" id="cancel-new-org-btn" class="text-sm text-gray-600 mr-4">Annuler</button>
                                    <button type="button" id="save-new-org-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg text-sm">Enregistrer</button>
                                </div>
                            </div>
                        </div>
                        <div><label for="date-limite" class="block text-sm font-medium">Date limite d'inscription</label><input type="date" id="date-limite" class="bg-gray-50 mt-1 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                        <div><label for="remise" class="block text-sm font-medium">Remise / enfant supp. (%)</label><input type="number" id="remise" value="0" min="0" max="100" class="bg-gray-50 mt-1 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    </div>
                    <div class="grid md:grid-cols-2 gap-6 items-end">
                         <div><label for="quota-max" class="block text-sm font-medium">Quota d'enfants total</label><input type="number" id="quota-max" required min="1" class="bg-gray-50 mt-1 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                         <div><button type="button" id="toggle-genre-quota" class="text-sm text-blue-600 hover:underline">+ quota par genre</button></div>
                    </div>
                    <div id="genre-quota-fields" class="hidden grid md:grid-cols-2 gap-6 bg-gray-100 p-4 rounded-lg">
                        <div><label for="quota-fille" class="block text-sm font-medium">Quota max filles</label><input type="number" id="quota-fille" min="0" class="bg-gray-50 mt-1 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                        <div><label for="quota-garcon" class="block text-sm font-medium">Quota max garçons</label><input type="number" id="quota-garcon" min="0" class="bg-gray-50 mt-1 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    </div>
                </div>
                <div id="offline-fields" class="hidden space-y-4">
                    <div><label for="offline-prix" class="block text-sm font-medium text-gray-700">Prix du camp (€)</label><input type="number" id="offline-prix" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    <div class="bg-gray-100 p-4 rounded-lg space-y-4">
                        <p class="text-sm text-gray-600">Infos pour le dossier papier :</p>
                        <div><label for="pdf-link" class="block text-sm font-medium">Lien vers le dossier PDF</label><input type="url" id="pdf-link" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                        <div><label for="adresse_retour" class="block text-sm font-medium">Adresse de retour du dossier</label><input type="text" id="adresse_retour" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                    </div>
                </div>
            </fieldset>
            
            <fieldset id="advanced-options-container" class="space-y-6 pt-10 mt-10 border-t">
                <legend class="text-2xl font-bold mb-4 border-b pb-2 w-full">Options Avancées</legend>
                <div class="space-y-4">
                    <label class="flex items-center cursor-pointer"><input type="checkbox" id="toggle-tarifs" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm font-medium">Gérer les tarifs multiples</span></label>
                    <div id="tarifs-section" class="hidden space-y-6 pl-6">
                        <div>
                            <h3 class="text-lg font-medium mb-2">Sélectionner des tarifs existants</h3>
                            <div id="existing-tarifs-list" class="space-y-2 max-h-40 overflow-y-auto bg-gray-100 p-3 rounded">Sélectionnez un organisme pour voir les tarifs.</div>
                        </div>
                        <div class="border-t pt-4">
                             <h3 class="text-lg font-medium mb-2">Ou créer un nouveau tarif pour ce camp</h3>
                             <div class="grid md:grid-cols-2 gap-4 items-center">
                                <div><input type="text" id="new-tarif-name" placeholder="Nom du nouveau tarif" class="bg-gray-50 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                                <div><input type="number" id="new-tarif-price" placeholder="Prix (€)" class="bg-gray-50 block w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                             </div>
                             <div class="mt-2"><label class="flex items-center cursor-pointer"><input type="checkbox" id="new-tarif-montant-libre" class="h-4 w-4 focus:ring-blue-500"><span class="ml-2 text-sm text-gray-600">Montant libre (le prix devient un prix conseillé)</span></label></div>
                             <button type="button" id="add-new-tarif-btn" class="mt-4 bg-green-100 text-green-800 font-semibold py-2 px-4 rounded-lg text-sm">Ajouter ce tarif</button>
                        </div>
                    </div>
                </div>
                <div class="space-y-4 pt-4 border-t">
                    <label class="flex items-center cursor-pointer"><input type="checkbox" id="toggle-animateurs" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm font-medium">Gérer les animateurs</span></label>
                    <div id="animateurs-section" class="hidden space-y-6 pl-6">
                         <div class="grid md:grid-cols-3 gap-6">
                            <div><label for="quota-max-anim" class="text-sm">Quota animateurs</label><input type="number" id="quota-max-anim" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                            <div><label for="quota-max-anim-fille" class="text-sm">... dont filles</label><input type="number" id="quota-max-anim-fille" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                            <div><label for="quota-max-anim-garcon" class="text-sm">... dont garçons</label><input type="number" id="quota-max-anim-garcon" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                         </div>
                         <div class="pt-4"><label class="flex items-center"><input type="checkbox" id="anim-majeur" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm">Animateurs majeurs uniquement</span></label></div>
                         <div id="anim-age-details" class="hidden grid md:grid-cols-2 lg:grid-cols-4 gap-4 bg-gray-100 p-4 rounded-lg">
                            <div><label class="text-sm" for="quota-fille-mineur">Filles -18</label><input type="number" id="quota-fille-mineur" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                            <div><label class="text-sm" for="quota-fille-majeur">Filles +18</label><input type="number" id="quota-fille-majeur" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                            <div><label class="text-sm" for="quota-garcon-mineur">Garçons -18</label><input type="number" id="quota-garcon-mineur" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                            <div><label class="text-sm" for="quota-garcon-majeur">Garçons +18</label><input type="number" id="quota-garcon-majeur" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                         </div>
                         <div class="pt-4"><label class="flex items-center"><input type="checkbox" id="bafa-obligatoire" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm">BAFA obligatoire</span></label></div>
                         <div class="border-t pt-6 space-y-4">
                             <label class="flex items-center"><input type="checkbox" id="paiement-anim" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm">Les animateurs doivent payer une part</span></label>
                             <div id="anim-payment-details" class="hidden grid md:grid-cols-2 gap-6">
                                <div><label for="prix-anim" class="text-sm">Montant à payer (€)</label><input type="number" id="prix-anim" class="bg-gray-50 mt-1 w-full p-2 border-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></div>
                                <div class="flex items-end pb-2"><label class="flex items-center"><input type="checkbox" id="montant-libre-anim" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm">Montant libre</span></label></div>
                             </div>
                             <label class="flex items-center"><input type="checkbox" id="remuneration-anim" class="h-4 w-4 focus:ring-blue-500"><span class="ml-3 text-sm">Rémunération prévue pour les animateurs</span></label>
                         </div>
                    </div>
                </div>
            </fieldset>

            <div class="flex justify-end mt-10 border-t pt-6">
                 <button type="submit" class="bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">Soumettre le camp</button>
            </div>
            
            <div id="form-message" class="text-center mt-4 text-sm font-medium"></div>
        </form>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // --- DOM Elements ---
    const form = document.getElementById('single-page-form');
    const orgSelect = document.getElementById('organisateur-select');
    const onlineCheckbox = document.getElementById('online-inscription');
    const advancedOptionsContainer = document.getElementById('advanced-options-container');
    const toggleTarifsBtn = document.getElementById('toggle-tarifs');
    const basePriceInput = document.getElementById('prix');
    const offlinePriceInput = document.getElementById('offline-prix');
    const newTarifMontantLibre = document.getElementById('new-tarif-montant-libre');
    const newTarifPriceInput = document.getElementById('new-tarif-price');
    const toggleNewOrgBtn = document.getElementById('toggle-new-org-btn');
    const newOrgForm = document.getElementById('new-org-form');
    const saveNewOrgBtn = document.getElementById('save-new-org-btn');
    const cancelNewOrgBtn = document.getElementById('cancel-new-org-btn');
    let selectedTarifs = new Set();
    let allTarifs = [];

    // --- Fonctions de visibilité ---
    function toggleOnlineSections() {
        const isOnline = onlineCheckbox.checked;
        document.getElementById('online-fields').classList.toggle('hidden', !isOnline);
        document.getElementById('offline-fields').classList.toggle('hidden', isOnline);
        advancedOptionsContainer.classList.toggle('hidden', !isOnline);
        if (isOnline) {
            updateBasePrice();
        } else {
            basePriceInput.value = offlinePriceInput.value || 0;
            toggleTarifsBtn.checked = false;
            document.getElementById('toggle-animateurs').checked = false;
            document.getElementById('tarifs-section').classList.add('hidden');
            document.getElementById('animateurs-section').classList.add('hidden');
        }
    }
    
    // --- Logique du Prix de Base ---
    function updateBasePrice() {
        if (!toggleTarifsBtn.checked) {
            basePriceInput.value = 0;
            return;
        }
        const tarifCheckboxes = document.querySelectorAll('.existing-tarif-checkbox:checked');
        let prices = [];
        tarifCheckboxes.forEach(checkbox => {
            prices.push(parseFloat(checkbox.dataset.price));
        });
        if (prices.length > 0) {
            basePriceInput.value = Math.min(...prices);
        } else {
            basePriceInput.value = 0;
        }
    }

    // --- Logique des Tarifs (Filtrage Côté Client) ---
    function renderFilteredTarifs() {
        const listContainer = document.getElementById('existing-tarifs-list');
        const orgId = orgSelect.value;
        listContainer.innerHTML = '';
        if (!orgId) { listContainer.innerHTML = '<p class="text-sm text-gray-500">Veuillez sélectionner un organisme.</p>'; return; }

        const filteredTarifs = allTarifs.filter(tarif => tarif.fields['Lien'] && tarif.fields['Lien'][0] === orgId);
        if (filteredTarifs.length > 0) {
            filteredTarifs.forEach(tarif => {
                const label = document.createElement('label');
                label.className = 'flex items-center p-2 rounded hover:bg-gray-100 cursor-pointer';
                label.innerHTML = `<input type="checkbox" value="${tarif.id}" data-price="${tarif.fields['Prix']}" class="h-4 w-4 existing-tarif-checkbox focus:ring-blue-500" ${selectedTarifs.has(tarif.id) ? 'checked' : ''}><span class="ml-3 text-sm">${tarif.fields['Nom du tarif']} (${tarif.fields['Prix']}€)</span>`;
                listContainer.appendChild(label);
            });
        } else { listContainer.innerHTML = '<p class="text-sm text-gray-500">Aucun tarif existant pour cet organisme.</p>'; }
    }
    
    // --- Logique des Quotas ---
    function handleQuotaChange() {
        const total = parseInt(document.getElementById('quota-max').value, 10) || 0;
        const filles = document.getElementById('quota-fille');
        const garcons = document.getElementById('quota-garcon');
        if (document.activeElement === filles && filles.value !== '') {
            const valFilles = Math.max(0, parseInt(filles.value, 10) || 0);
            filles.value = Math.min(valFilles, total);
            garcons.value = total - filles.value;
        } else if (document.activeElement === garcons && garcons.value !== '') {
            const valGarcons = Math.max(0, parseInt(garcons.value, 10) || 0);
            garcons.value = Math.min(valGarcons, total);
            filles.value = total - garcons.value;
        }
    }

    // --- Attachement des Événements ---
    onlineCheckbox.addEventListener('change', toggleOnlineSections);
    toggleTarifsBtn.addEventListener('change', (e) => {
        document.getElementById('tarifs-section').classList.toggle('hidden', !e.target.checked);
        if(e.target.checked) renderFilteredTarifs();
        updateBasePrice();
    });
    offlinePriceInput.addEventListener('input', () => { if (!onlineCheckbox.checked) { basePriceInput.value = offlinePriceInput.value; } });
    newTarifMontantLibre.addEventListener('change', (e) => { newTarifPriceInput.placeholder = e.target.checked ? "Prix conseillé" : "Prix (€)"; });
    document.getElementById('toggle-animateurs').addEventListener('change', (e) => document.getElementById('animateurs-section').classList.toggle('hidden', !e.target.checked));
    document.getElementById('toggle-genre-quota').addEventListener('click', () => document.getElementById('genre-quota-fields').classList.toggle('hidden'));
    document.getElementById('anim-majeur').addEventListener('change', (e) => document.getElementById('anim-age-details').classList.toggle('hidden', e.target.checked));
    document.getElementById('paiement-anim').addEventListener('change', (e) => document.getElementById('anim-payment-details').classList.toggle('hidden', !e.target.checked));
    orgSelect.addEventListener('change', renderFilteredTarifs);
    document.getElementById('existing-tarifs-list').addEventListener('change', (e) => {
        if (e.target.classList.contains('existing-tarif-checkbox')) {
            if (e.target.checked) { selectedTarifs.add(e.target.value); } 
            else { selectedTarifs.delete(e.target.value); }
            updateBasePrice();
        }
    });
    saveNewOrgBtn.addEventListener('click', async function() {
        const orgData = {
            nom: document.getElementById('new-org-name').value,
            mail: document.getElementById('new-org-mail').value,
            tel: document.getElementById('new-org-tel').value,
            web: document.getElementById('new-org-web').value
        };
        if (!orgData.nom || !orgData.mail || !orgData.tel) { alert('Veuillez remplir au moins le nom, l\'email et le téléphone.'); return; }
        this.disabled = true; this.textContent = "Enregistrement...";
        const msgEl = document.getElementById('new-org-message');
        msgEl.textContent = '';
        try {
            const response = await fetch('api/create_organisateur.php', {
                method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(orgData)
            });
            if (!response.ok) { throw new Error((await response.json()).error || 'Erreur serveur'); }
            const newOrg = await response.json();
            
            const newOption = document.createElement('option');
            newOption.value = newOrg.id;
            newOption.textContent = newOrg.fields["Nom de l'organisme"];
            newOption.selected = true;
            orgSelect.appendChild(newOption);
            orgSelect.dispatchEvent(new Event('change')); // Déclenche le filtrage des tarifs
            
            newOrgForm.classList.add('hidden');
            document.getElementById('new-org-name').value = '';
            document.getElementById('new-org-mail').value = '';
            document.getElementById('new-org-tel').value = '';
            document.getElementById('new-org-web').value = '';
        } catch (error) {
            msgEl.textContent = `Erreur : ${error.message}`;
            msgEl.className = "text-xs text-red-600";
        } finally {
            this.disabled = false; this.textContent = "Enregistrer";
        }
    });
    toggleNewOrgBtn.addEventListener('click', () => newOrgForm.classList.toggle('hidden'));
    cancelNewOrgBtn.addEventListener('click', () => newOrgForm.classList.add('hidden'));
    document.getElementById('add-new-tarif-btn').addEventListener('click', async function() {
        const nameInput = document.getElementById('new-tarif-name');
        const priceInput = document.getElementById('new-tarif-price');
        const orgId = orgSelect.value;
        const isMontantLibre = newTarifMontantLibre.checked;
        if (!nameInput.value || !priceInput.value || !orgId) { alert('Veuillez entrer un nom, un prix et sélectionner un organisme.'); return; }
        this.disabled = true; this.textContent = 'Ajout...';
        try {
            const response = await fetch('api/create_tarif.php', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ nom: nameInput.value, prix: parseFloat(priceInput.value), organisateur_id: orgId, montant_libre: isMontantLibre })
            });
            if (response.ok) {
                const newTarif = await response.json();
                allTarifs.push(newTarif); // Ajoute le nouveau tarif à la liste globale
                selectedTarifs.add(newTarif.id);
                renderFilteredTarifs();
                updateBasePrice();
                nameInput.value = ''; priceInput.value = ''; newTarifMontantLibre.checked = false; newTarifPriceInput.placeholder = "Prix (€)";
            } else {
                const errorDetails = await response.json();
                console.error('Erreur API:', errorDetails);
                alert('Erreur lors de la création du tarif.');
            }
        } catch(e) { 
            console.error('Erreur communication:', e);
            alert('Erreur de communication avec le serveur.');
        }
        this.disabled = false; this.textContent = 'Ajouter ce tarif';
    });
    ['quota-max', 'quota-fille', 'quota-garcon'].forEach(id => document.getElementById(id).addEventListener('input', handleQuotaChange));

    // --- Soumission du formulaire ---
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        const submitButton = form.querySelector('button[type="submit"]');
        const formMessage = document.getElementById('form-message');
        formMessage.innerHTML = '<p class="text-blue-500">Soumission en cours...</p>';
        submitButton.disabled = true;
        const formData = {
            nom: document.getElementById('nom').value,
            description: document.getElementById('description').value,
            ville: document.getElementById('ville').value,
            code_postal: document.getElementById('code_postal').value,
            adresse: document.getElementById('adresse').value,
            prix: document.getElementById('prix').value,
            age_min: document.getElementById('age_min').value,
            age_max: document.getElementById('age_max').value,
            date_debut: document.getElementById('date_debut').value,
            date_fin: document.getElementById('date_fin').value,
            image_url: document.getElementById('image_url').value,
            inscription_en_ligne: document.getElementById('online-inscription').checked,
            dossier_pdf: document.getElementById('pdf-link').value,
            adresse_retour: document.getElementById('adresse_retour').value,
            organisateur_id: document.getElementById('organisateur-select').value,
            date_limite_inscription: document.getElementById('date-limite').value,
            remise: document.getElementById('remise').value,
            quota_max: document.getElementById('quota-max').value,
            quota_fille: document.getElementById('quota-fille').value,
            quota_garcon: document.getElementById('quota-garcon').value,
            tarifs: document.getElementById('toggle-tarifs').checked ? Array.from(selectedTarifs) : [],
            gestion_animateur: document.getElementById('toggle-animateurs').checked,
            quota_max_anim: document.getElementById('quota-max-anim').value,
            quota_max_anim_fille: document.getElementById('quota-max-anim-fille').value,
            quota_max_anim_garcon: document.getElementById('quota-max-anim-garcon').value,
            anim_majeur: document.getElementById('anim-majeur').checked,
            quota_fille_mineur: document.getElementById('quota-fille-mineur').value,
            quota_fille_majeur: document.getElementById('quota-fille-majeur').value,
            quota_garcon_mineur: document.getElementById('quota-garcon-mineur').value,
            quota_garcon_majeur: document.getElementById('quota-garcon-majeur').value,
            bafa_obligatoire: document.getElementById('bafa-obligatoire').checked,
            paiement_anim: document.getElementById('paiement-anim').checked,
            prix_anim: document.getElementById('prix-anim').value,
            montant_libre_anim: document.getElementById('montant-libre-anim').checked,
            remuneration_anim: document.getElementById('remuneration-anim').checked,
        };
        try {
            const response = await fetch('api/add_camp.php', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) });
            const result = await response.json();
            if (!response.ok) throw new Error(result.error || 'Une erreur est survenue.');
            formMessage.innerHTML = `<p class="text-green-600 font-bold">${result.success}</p>`;
            setTimeout(() => window.location.href = 'organisateurs.php', 2000);
        } catch (error) {
            formMessage.innerHTML = `<p class="text-red-600 font-bold">${error.message}</p>`;
            submitButton.disabled = false;
        }
    });

    // --- Initialisation ---
    (async () => {
        try {
            const [orgsResponse, tarifsResponse] = await Promise.all([
                fetch('api/get_organisateurs.php'),
                fetch('api/get_tarifs_by_organisateur.php')
            ]);
            if (!orgsResponse.ok || !tarifsResponse.ok) throw new Error('Erreur de chargement initial.');
            
            const dataOrgs = await orgsResponse.json();
            allTarifs = await tarifsResponse.json();

            orgSelect.innerHTML = '<option value="">Sélectionnez un organisme</option>';
            dataOrgs.forEach(org => {
                orgSelect.innerHTML += `<option value="${org.id}">${org.nom}</option>`;
            });
        } catch (e) { console.error("Erreur d'initialisation:", e); }
        toggleOnlineSections();
    })();
});
</script>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\create_organisateur.php === 
<?php
require_once 'partials/header.php';

// Sécurité
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
?>

<title>Créer un Organisme - ColoMap</title>

<main class="container mx-auto max-w-2xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="public_infos.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-6 text-gray-900">Créer un nouvel organisme</h1>
        <form id="create-org-form" class="space-y-6">
            <div>
                <label for="nom_organisme" class="block text-sm font-medium text-gray-700">Nom de l'organisme</label>
                <input type="text" id="nom_organisme" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="tel" class="block text-sm font-medium text-gray-700">Téléphone</label>
                    <input type="tel" id="tel" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                </div>
                <div>
                    <label for="mail" class="block text-sm font-medium text-gray-700">Email de contact</label>
                    <input type="email" id="mail" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
                </div>
            </div>
            <div>
                <label for="web" class="block text-sm font-medium text-gray-700">Site Web (optionnel)</label>
                <input type="url" id="web" placeholder="https://..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2">
            </div>
            <div id="form-message" class="text-center mt-4 text-sm font-medium"></div>
            <div class="pt-4 text-right">
                <button type="submit" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700">
                    Enregistrer l'organisme
                </button>
            </div>
        </form>
    </div>
</main>

<script>
document.getElementById('create-org-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formMessage = document.getElementById('form-message');
    formMessage.textContent = 'Enregistrement en cours...';

    const formData = {
        nom: document.getElementById('nom_organisme').value,
        tel: document.getElementById('tel').value,
        mail: document.getElementById('mail').value,
        web: document.getElementById('web').value
    };

    try {
        const response = await fetch('api/create_organisateur.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        const result = await response.json();
        if (!response.ok) throw new Error(result.error);
        
        formMessage.innerHTML = `<p class="text-green-600">${result.success}</p>`;
        setTimeout(() => window.location.href = 'public_infos.php', 1500);

    } catch (error) {
        formMessage.innerHTML = `<p class="text-red-600">${error.message}</p>`;
    }
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\debug_final.php === 
<?php
// On active toutes les erreurs pour ne rien manquer.
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Démarrage manuel de la session pour isoler le test.
session_start();

// Inclusion manuelle de la config pour la fonction callAirtable et les clés.
// Si ce fichier n'est pas trouvé, une erreur s'affichera immédiatement.
require_once 'api/config.php'; 
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debug Final des Réservations</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-4 md:p-8">
<div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border max-w-5xl mx-auto space-y-6">
    <h1 class="text-2xl font-bold text-center">Script de Débogage Ultime</h1>
    
    <?php
    // ÉTAPE 1 : VÉRIFICATION DE LA CONFIGURATION ET DE LA SESSION
    echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 1 : Vérification de la Configuration</h2>';
    if (!isset($_SESSION['user']['id'])) {
        echo "<p class='text-red-500 font-bold'>ERREUR : Utilisateur non connecté. Veuillez vous connecter avant de lancer ce script.</p></div>";
        exit;
    }
    $userId = $_SESSION['user']['id'];
    echo "<p><strong>ID de la Base Airtable utilisée :</strong> <span class='font-mono text-sm'>" . htmlspecialchars(AIRTABLE_BASE_ID) . "</span></p>";
    echo "<p><strong>ID de l'Utilisateur connecté :</strong> <span class='font-mono text-sm'>" . htmlspecialchars($userId) . "</span></p>";
    echo '</div>';

    // ÉTAPE 2 : CONSTRUCTION DE LA REQUÊTE
    echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 2 : Construction de la Requête</h2>';
    $formula = "{Parent_ID_Unique} = '{$userId}'";
    echo "<p><strong>Formule de filtre qui sera envoyée à Airtable :</strong></p>";
    echo "<pre class='bg-yellow-100 text-yellow-800 p-3 my-2 rounded-md font-mono text-sm'>" . htmlspecialchars($formula) . "</pre>";
    
    // Construction manuelle de l'URL pour l'afficher
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/Enfants' . '?filterByFormula=' . urlencode($formula);
    echo "<p><strong>URL exacte de l'API qui va être appelée (pour trouver les enfants) :</strong></p>";
    echo "<pre class='bg-gray-100 p-2 rounded-md text-xs break-all'>" . htmlspecialchars($url) . "</pre>";
    echo '</div>';
    
    // ÉTAPE 3 : EXÉCUTION DE L'APPEL ET AFFICHAGE DE LA RÉPONSE BRUTE
    echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 3 : Exécution et Réponse Brute de l\'API</h2>';
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY, 'Content-Type: application/json']);
    $response_body = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    echo "<p><strong>Code de statut HTTP retourné par Airtable :</strong> <span class='font-bold " . ($http_code >= 200 && $http_code < 300 ? "text-green-600" : "text-red-600") . "'>" . htmlspecialchars($http_code) . "</span></p>";
    echo "<p><strong>Réponse brute de l'API Airtable (texte JSON) :</strong></p>";
    echo "<pre class='bg-gray-100 p-4 rounded-lg border text-sm'>" . htmlspecialchars($response_body) . "</pre>";
    echo '</div>';

    // ÉTAPE 4 : INTERPRÉTATION DU RÉSULTAT
    echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 4 : Interprétation du Résultat</h2>';
    $resultData = json_decode($response_body, true);
    if ($http_code >= 300 || isset($resultData['error'])) {
        echo "<p class='text-red-500 font-bold'>DIAGNOSTIC : ERREUR. Airtable a retourné une erreur. Le problème vient de la requête elle-même (URL, formule, clé API) ou d'un nom de champ incorrect dans la formule.</p>";
    } else {
        $recordsFound = $resultData['records'] ?? [];
        if (empty($recordsFound)) {
            echo "<p class='text-red-500 font-bold'>DIAGNOSTIC : ANOMALIE. La requête a réussi (code " . $http_code . ") mais Airtable n'a retourné **aucun enfant**. Cela confirme que la liaison via le champ `Parent_ID_Unique` est le problème dans votre base de données. Il faut vérifier sa configuration.</p>";
        } else {
            echo "<p class='text-green-600 font-bold'>DIAGNOSTIC : SUCCÈS. La requête a parfaitement fonctionné. Airtable a retourné " . count($recordsFound) . " enfant(s) appartenant à l'utilisateur connecté.</p>";
            $names = [];
            foreach($recordsFound as $record) {
                $names[] = $record['fields']['Prénom'] ?? '[Prénom non trouvé]';
            }
            echo "<p><strong>Liste des prénoms trouvés :</strong> " . htmlspecialchars(implode(', ', $names)) . "</p>";
            echo "<hr class='my-4'>";
            echo "<p class='font-bold'>CONCLUSION FINALE : Si la liste ci-dessus contient UNIQUEMENT vos enfants, alors la logique de filtrage est **100% CORRECTE**. Si vous voyez toujours toutes les réservations sur la page principale, cela signifie que le fichier `api/get_my_reservations.php` sur votre serveur n'est pas la bonne version ou qu'un cache agressif est toujours actif malgré nos efforts.</p>";
        }
    }
    echo '</div>';
    ?>
</div>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\debug_messagerie.php === 
<?php
// On active toutes les erreurs pour ne rien manquer
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();
require_once 'api/config.php'; 
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Debug Messagerie</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-8">
<div class="bg-white p-8 rounded-xl shadow-lg border max-w-5xl mx-auto space-y-6">
    <h1 class="text-2xl font-bold text-center">Script de Débogage de la Messagerie</h1>
    
    <?php
    // L'ID de la conversation que vous voulez tester est maintenant directement dans le code.
    $testConversationId = 'reck7cqipKVYHtspb'; // VOTRE ID EST ICI

    echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 1 : Vérification de la Configuration</h2>';
    if (!isset($_SESSION['user']['id'])) {
        echo "<p class='text-red-500'>ERREUR : Utilisateur non connecté.</p></div>";
        exit;
    }
    $userId = $_SESSION['user']['id'];
    echo "<p><strong>ID de l'Utilisateur connecté :</strong> <span class='font-mono text-sm'>" . htmlspecialchars($userId) . "</span></p>";
    echo "<p><strong>ID de la Conversation en test :</strong> <span class='font-mono text-sm'>" . htmlspecialchars($testConversationId) . "</span></p>";
    echo '</div>';

    try {
        // Étape 2 : Vérifier que l'utilisateur est bien participant
        echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 2 : Vérification de Sécurité</h2>';
        $convoRecord = callAirtable('GET', 'Conversations', null, $testConversationId);

        // On vérifie d'abord que la conversation a bien été trouvée
        if(isset($convoRecord['error'])) {
             echo "<p class='text-red-500'><strong>ERREUR :</strong> Impossible de trouver la conversation avec l'ID `{$testConversationId}`. Vérifiez que l'ID est correct.</p></div>";
             exit;
        }

        if(!in_array($userId, $convoRecord['fields']['Participants'] ?? [])) {
            echo "<p class='text-red-500'><strong>ERREUR :</strong> L'utilisateur connecté (ID: {$userId}) ne fait PAS partie des participants de cette conversation. Participants trouvés : ";
            print_r($convoRecord['fields']['Participants'] ?? ['Aucun']);
            echo "</p></div>";
            exit;
        }
        echo "<p class='text-green-600'><strong>SUCCÈS :</strong> L'utilisateur est bien un participant de la conversation.</p></div>";


        // ÉTAPE 3: Recherche des messages avec le champ unique
        echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 3 : Recherche des Messages</h2>';
        $formula = "{Conversation_ID_Unique} = '{$testConversationId}'";
        echo "<p><strong>Formule de filtre envoyée à Airtable :</strong></p>";
        echo "<pre class='bg-yellow-100 text-yellow-800 p-3 my-2 rounded-md font-mono text-sm'>" . htmlspecialchars($formula) . "</pre>";
        
        $params = ['filterByFormula' => $formula];
        $messagesResult = callAirtable('GET', 'Messages', $params);
        
        echo "<p><strong>Réponse brute de l'API Airtable (JSON) :</strong></p>";
        echo "<pre class='bg-gray-100 p-4 rounded-lg border text-sm'>" . htmlspecialchars(json_encode($messagesResult, JSON_PRETTY_PRINT)) . "</pre>";
        echo '</div>';


        // ÉTAPE 4 : Interprétation
        echo '<div><h2 class="text-xl font-semibold text-blue-600 border-b pb-2 mb-2">Étape 4 : Interprétation</h2>';
        if (isset($messagesResult['error'])) {
            echo "<p class='text-red-500'><strong>DIAGNOSTIC : ERREUR.</strong> Airtable a retourné une erreur. Le problème vient probablement du nom du champ `Conversation_ID_Unique` ou de la formule.</p>";
        } else if (empty($messagesResult['records'])) {
            echo "<p class='text-orange-500'><strong>DIAGNOSTIC : ANOMALIE.</strong> La requête a réussi mais Airtable n'a retourné **aucun message**. Cela signifie que le champ `Conversation_ID_Unique` dans votre table `Messages` est vide ou ne contient pas l'ID de conversation attendu. Veuillez vérifier sa configuration.</p>";
        } else {
            echo "<p class='text-green-600 font-bold'>DIAGNOSTIC : SUCCÈS. La requête a parfaitement fonctionné et a retourné " . count($messagesResult['records']) . " message(s).</p>";
        }
        echo '</div>';

    } catch (Exception $e) {
        echo "<div><h2 class='text-xl font-semibold text-red-600'>Erreur Fatale</h2><p>Le script a rencontré une erreur : " . $e->getMessage() . "</p></div>";
    }
    ?>
</div>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\debug_tarif.php === 
<?php
require_once 'partials/header.php';
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
?>
<title>Debug - Création de Tarif</title>

<main class="container mx-auto max-w-2xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="bg-white p-8 rounded-xl shadow-lg border space-y-6">
        <h1 class="text-2xl font-bold text-center">Page de Débogage : Création de Tarif</h1>
        
        <div class="space-y-4 border p-4 rounded-lg">
            <div>
                <label for="debug-org-select" class="block text-sm font-medium text-gray-700">1. Sélectionnez un Organisme</label>
                <select id="debug-org-select" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Chargement...</option>
                </select>
            </div>
            <div>
                <label for="debug-tarif-name" class="block text-sm font-medium text-gray-700">2. Entrez un nom de tarif</label>
                <input type="text" id="debug-tarif-name" value="Tarif Test" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div>
                <label for="debug-tarif-price" class="block text-sm font-medium text-gray-700">3. Entrez un prix</label>
                <input type="number" id="debug-tarif-price" value="99" class="bg-gray-50 mt-1 block w-full rounded-md border-gray-400 p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div>
                <label class="flex items-center cursor-pointer"><input type="checkbox" id="debug-montant-libre" class="h-4 w-4"><span class="ml-2 text-sm">Montant libre</span></label>
            </div>
            <button id="debug-test-btn" class="w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Lancer le Test de Création</button>
        </div>

        <div class="space-y-2">
            <h2 class="text-lg font-semibold">Résultat :</h2>
            <pre id="debug-output" class="bg-gray-800 text-white text-sm p-4 rounded-lg overflow-x-auto">En attente du test...</pre>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const orgSelect = document.getElementById('debug-org-select');
    const testBtn = document.getElementById('debug-test-btn');
    const outputEl = document.getElementById('debug-output');

    // 1. Charger les organismes
    (async () => {
        try {
            const response = await fetch('api/get_organisateurs.php');
            const data = await response.json();
            orgSelect.innerHTML = '<option value="">-- Choisissez un organisme --</option>';
            data.forEach(org => {
                orgSelect.innerHTML += `<option value="${org.id}">${org.nom}</option>`;
            });
        } catch (e) {
            orgSelect.innerHTML = '<option value="">Erreur de chargement</option>';
        }
    })();

    // 2. Lancer le test au clic
    testBtn.addEventListener('click', async () => {
        const payload = {
            nom: document.getElementById('debug-tarif-name').value,
            prix: parseFloat(document.getElementById('debug-tarif-price').value),
            organisateur_id: orgSelect.value,
            montant_libre: document.getElementById('debug-montant-libre').checked
        };

        outputEl.textContent = 'Envoi des données suivantes à l\'API...\n\n';
        outputEl.textContent += JSON.stringify(payload, null, 2);

        try {
            const response = await fetch('api/create_tarif.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            outputEl.textContent += '\n\n-----------------------------------\n';
            outputEl.textContent += 'Réponse du serveur reçue.\n\n';
            outputEl.textContent += 'Code Statut HTTP: ' + response.status + '\n';
            
            const responseData = await response.json();
            outputEl.textContent += 'Données de la réponse (JSON) :\n\n';
            outputEl.textContent += JSON.stringify(responseData, null, 2);

        } catch (error) {
            outputEl.textContent += '\n\n-----------------------------------\n';
            outputEl.textContent += 'ERREUR DE COMMUNICATION FATALE :\n\n' + error;
        }
    });
});
</script>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\edit_camp.php === 
<?php
require_once 'partials/header.php';

// Sécurité
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
if (!isset($_GET['id'])) {
    header('Location: mes_camps.php');
    exit;
}
?>

<title>Modifier le Camp - Espace Organisateur</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">

    <div id="loader-edit" class="text-center py-20">
        <div class="loader inline-block"></div>
        <p class="mt-4 text-gray-600">Chargement des informations du camp...</p>
    </div>

    <div id="form-container" class="hidden">
        <div class="mb-8">
            <a href="mes_camps.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
                Retour à la liste de mes camps
            </a>
        </div>

        <div class="bg-white p-8 rounded-xl shadow-lg border">
            <h1 class="text-2xl font-bold mb-6 text-gray-900">Modifier le camp</h1>
            <form id="edit-camp-form" class="space-y-6">
                <!-- Les champs du formulaire seront ici, identiques à create_camp.php -->
                <div><label for="nom" class="block text-sm font-medium text-gray-700">Nom du camp</label><input type="text" id="nom" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                <div><label for="description" class="block text-sm font-medium text-gray-700">Description</label><textarea id="description" rows="4" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></textarea></div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div><label for="ville" class="block text-sm font-medium text-gray-700">Ville</label><input type="text" id="ville" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                    <div><label for="code_postal" class="block text-sm font-medium text-gray-700">Code Postal</label><input type="text" id="code_postal" required pattern="[0-9]{5}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                </div>
                <div><label for="adresse" class="block text-sm font-medium text-gray-700">Adresse exacte</label><input type="text" id="adresse" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div><label for="prix" class="block text-sm font-medium text-gray-700">Prix (€)</label><input type="number" id="prix" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                    <div><label for="age_min" class="block text-sm font-medium text-gray-700">Âge minimum</label><input type="number" id="age_min" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                    <div><label for="age_max" class="block text-sm font-medium text-gray-700">Âge maximum</label><input type="number" id="age_max" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div><label for="date_debut" class="block text-sm font-medium text-gray-700">Date de début</label><input type="date" id="date_debut" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                    <div><label for="date_fin" class="block text-sm font-medium text-gray-700">Date de fin</label><input type="date" id="date_fin" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                </div>
                <div><label for="image_url" class="block text-sm font-medium text-gray-700">URL de l'image d'illustration</label><input type="url" id="image_url" placeholder="https://..." required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2"></div>
                
                <div id="form-message" class="text-center mt-4"></div>
                <div class="pt-4 text-right"><button type="submit" class="bg-yellow-500 text-white font-bold py-3 px-6 rounded-lg transition hover:bg-yellow-600">Enregistrer les modifications</button></div>
            </form>
        </div>
    </div>
</main>
<script>
document.addEventListener('DOMContentLoaded', async function() {
    const params = new URLSearchParams(window.location.search);
    const campId = params.get('id');
    const loader = document.getElementById('loader-edit');
    const formContainer = document.getElementById('form-container');
    const form = document.getElementById('edit-camp-form');
    const formMessage = document.getElementById('form-message');

    if (!campId) {
        window.location.href = 'mes_camps.php';
        return;
    }

    // 1. Charger les données du camp et pré-remplir le formulaire
    try {
        const response = await fetch(`api/get_camp_details.php?id=${campId}`);
        if (!response.ok) throw new Error('Camp introuvable.');
        const camp = await response.json();

        // Remplissage du formulaire
        document.getElementById('nom').value = camp.nom;
        document.getElementById('description').value = camp.description.replace(/<br\s*\/?>/gi, ""); // Retire les <br>
        document.getElementById('ville').value = camp.ville;
        document.getElementById('code_postal').value = camp.code_postal || '';
        document.getElementById('adresse').value = camp.adresse;
        document.getElementById('prix').value = camp.prix;
        document.getElementById('age_min').value = camp.age_min;
        document.getElementById('age_max').value = camp.age_max;
        document.getElementById('date_debut').value = camp.date_debut;
        document.getElementById('date_fin').value = camp.date_fin;
        document.getElementById('image_url').value = camp.image_url;
        
        loader.classList.add('hidden');
        formContainer.classList.remove('hidden');

    } catch(error) {
        loader.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
    }

    // 2. Gérer la soumission du formulaire
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        formMessage.innerHTML = '<p class="text-blue-500">Enregistrement...</p>';
        const updatedData = {
            nom: document.getElementById('nom').value,
            description: document.getElementById('description').value,
            ville: document.getElementById('ville').value,
            code_postal: document.getElementById('code_postal').value,
            adresse: document.getElementById('adresse').value,
            prix: parseInt(document.getElementById('prix').value),
            age_min: parseInt(document.getElementById('age_min').value),
            age_max: parseInt(document.getElementById('age_max').value),
            date_debut: document.getElementById('date_debut').value,
            date_fin: document.getElementById('date_fin').value,
            image_url: document.getElementById('image_url').value
        };

        try {
            const response = await fetch(`api/update_camp.php?id=${campId}`, {
                method: 'POST', // Les serveurs gèrent souvent mieux POST que PATCH
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedData)
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.error);
            formMessage.innerHTML = `<p class="text-green-600 font-bold">${result.success}</p>`;
        } catch(error) {
            formMessage.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
        }
    });
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\favorites.php === 
<?php
require_once 'partials/header.php';

if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
$user_favorites = $_SESSION['user']['favorites'] ?? [];
$is_logged_in = true;
?>

<title>Mes Favoris - ColoMap</title>

<!-- MODIFIÉ : Ajout de la classe max-w-7xl pour limiter la largeur et créer des marges sur les côtés -->
<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
            Mes <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">Favoris</span>
        </h1>
        <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
            Retrouvez ici tous les camps que vous avez sauvegardés pour ne pas les perdre de vue.
        </p>
    </div>
    
    <div id="favorites-list" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <!-- La liste des camps favoris sera chargée ici -->
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const listContainer = document.getElementById('favorites-list');
    let userFavorites = <?php echo json_encode($user_favorites); ?>;

    async function fetchFavorites() {
        listContainer.innerHTML = '<p class="text-gray-500 col-span-full text-center py-10">Chargement de vos favoris...</p>';
        try {
            const response = await fetch('api/get_favorites.php');
            if (!response.ok) throw new Error('Erreur réseau.');
            const camps = await response.json();
            
            listContainer.innerHTML = '';
            if (camps.length === 0) {
                listContainer.innerHTML = '<p class="text-gray-500 col-span-full text-center py-10">Vous n\'avez pas encore de camps favoris.</p>';
                return;
            }
            
            renderCamps(camps);
        } catch (error) {
            listContainer.innerHTML = `<p class="text-red-500 font-bold col-span-full text-center py-10">${error.message}</p>`;
        }
    }

    function renderCamps(camps) {
        let newContent = '';
        camps.forEach(camp => {
            const isFavorited = userFavorites.includes(camp.id);
            newContent += `
                <div class="bg-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 group">
                    <div class="relative">
                        <img src="${camp.image_url}" alt="Image pour ${camp.nom}" class="w-full h-48 object-cover cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'">
                        <button class="favorite-button absolute top-3 right-3 bg-white/70 backdrop-blur-sm p-2 rounded-full transition-all hover:scale-110" data-camp-id="${camp.id}" title="Gérer les favoris">
                            <svg class="w-5 h-5 ${isFavorited ? 'text-red-500 fill-current' : 'text-gray-600'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.5l1.318-1.182a4.5 4.5 0 116.364 6.364L12 21l-7.682-7.682a4.5 4.5 0 010-6.364z"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="p-4 cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'">
                         <h3 class="font-bold text-lg mb-2 truncate">${camp.nom}</h3>
                         <p class="text-gray-600 text-sm mb-1">📍 ${camp.ville}</p>
                         <p class="text-blue-600 font-bold text-lg">${camp.prix}€</p>
                    </div>
                </div>`;
        });
        listContainer.innerHTML = newContent;
        addFavoriteListeners();
    }

    function addFavoriteListeners() {
        document.querySelectorAll('.favorite-button').forEach(button => {
            button.addEventListener('click', toggleFavorite);
        });
    }

    async function toggleFavorite(event) {
        const button = event.currentTarget;
        const campCard = button.closest('.group');
        const campId = button.dataset.campId;
        const svg = button.querySelector('svg');

        try {
            const response = await fetch('api/toggle_favorite.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ campId })
            });
            const result = await response.json();
            if (result.success) {
                // Sur cette page, retirer un favori le fait disparaître.
                if (!result.isFavorited) {
                    campCard.style.transition = 'opacity 0.5s';
                    campCard.style.opacity = '0';
                    setTimeout(() => {
                        campCard.remove();
                        if (listContainer.children.length === 0) {
                             listContainer.innerHTML = '<p class="text-gray-500 col-span-full text-center py-10">Vous n\'avez pas encore de camps favoris.</p>';
                        }
                    }, 500);
                }
            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour des favoris:', error);
        }
    }

    fetchFavorites();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\index.php === 
<?php 
require_once 'partials/header.php'; 

$is_logged_in = isset($_SESSION['user']);
$user_favorites = $_SESSION['user']['favorites'] ?? [];

// Liste des départements français pour le menu déroulant
$departments = [
    '01' => 'Ain', '02' => 'Aisne', '03' => 'Allier', '04' => 'Alpes-de-Haute-Provence', '05' => 'Hautes-Alpes',
    '06' => 'Alpes-Maritimes', '07' => 'Ardèche', '08' => 'Ardennes', '09' => 'Ariège', '10' => 'Aube',
    '11' => 'Aude', '12' => 'Aveyron', '13' => 'Bouches-du-Rhône', '14' => 'Calvados', '15' => 'Cantal',
    '16' => 'Charente', '17' => 'Charente-Maritime', '18' => 'Cher', '19' => 'Corrèze', '2A' => 'Corse-du-Sud',
    '2B' => 'Haute-Corse', '21' => 'Côte-d\'Or', '22' => 'Côtes-d\'Armor', '23' => 'Creuse', '24' => 'Dordogne',
    '25' => 'Doubs', '26' => 'Drôme', '27' => 'Eure', '28' => 'Eure-et-Loir', '29' => 'Finistère', '30' => 'Gard',
    '31' => 'Haute-Garonne', '32' => 'Gers', '33' => 'Gironde', '34' => 'Hérault', '35' => 'Ille-et-Vilaine',
    '36' => 'Indre', '37' => 'Indre-et-Loire', '38' => 'Isère', '39' => 'Jura', '40' => 'Landes',
    '41' => 'Loir-et-Cher', '42' => 'Loire', '43' => 'Haute-Loire', '44' => 'Loire-Atlantique', '45' => 'Loiret',
    '46' => 'Lot', '47' => 'Lot-et-Garonne', '48' => 'Lozère', '49' => 'Maine-et-Loire', '50' => 'Manche',
    '51' => 'Marne', '52' => 'Haute-Marne', '53' => 'Mayenne', '54' => 'Meurthe-et-Moselle', '55' => 'Meuse',
    '56' => 'Morbihan', '57' => 'Moselle', '58' => 'Nièvre', '59' => 'Nord', '60' => 'Oise', '61' => 'Orne',
    '62' => 'Pas-de-Calais', '63' => 'Puy-de-Dôme', '64' => 'Pyrénées-Atlantiques', '65' => 'Hautes-Pyrénées',
    '66' => 'Pyrénées-Orientales', '67' => 'Bas-Rhin', '68' => 'Haut-Rhin', '69' => 'Rhône', '70' => 'Haute-Saône',
    '71' => 'Saône-et-Loire', '72' => 'Sarthe', '73' => 'Savoie', '74' => 'Haute-Savoie', '75' => 'Paris',
    '76' => 'Seine-Maritime', '77' => 'Seine-et-Marne', '78' => 'Yvelines', '79' => 'Deux-Sèvres', '80' => 'Somme',
    '81' => 'Tarn', '82' => 'Tarn-et-Garonne', '83' => 'Var', '84' => 'Vaucluse', '85' => 'Vendée', '86' => 'Vienne',
    '87' => 'Haute-Vienne', '88' => 'Vosges', '89' => 'Yonne', '90' => 'Territoire de Belfort', '91' => 'Essonne',
    '92' => 'Hauts-de-Seine', '93' => 'Seine-Saint-Denis', '94' => 'Val-de-Marne', '95' => 'Val-d\'Oise',
    '971' => 'Guadeloupe', '972' => 'Martinique', '973' => 'Guyane', '974' => 'La Réunion', '976' => 'Mayotte'
];
?>

<!-- Barre de filtre -->
<div id="filter-bar" class="hidden sticky top-[64px] z-30 bg-white/95 backdrop-blur-sm shadow-md transition-all duration-300">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
        <form id="advanced-search-form" class="py-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                
                <select id="filter-department" name="department" class="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-gray-700">
                    <option value="">Tous les départements</option>
                    <?php foreach ($departments as $code => $name): ?>
                        <option value="<?php echo $code; ?>"><?php echo $code; ?> - <?php echo $name; ?></option>
                    <?php endforeach; ?>
                </select>
                
                <?php if ($is_logged_in): ?>
                    <select id="filter-child" name="age" class="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-gray-500">
                        <option value="">Tous mes enfants</option>
                    </select>
                <?php else: ?>
                    <input type="number" id="filter-age" name="age" placeholder="Âge de l'enfant" class="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                <?php endif; ?>

                <button type="submit" class="w-full bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition-colors">Rechercher</button>
            </div>
        </form>
    </div>
</div>

<main class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
    
    <section class="text-center my-12">
        <?php if ($is_logged_in): ?>
            <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
                Bonjour <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent"><?php echo htmlspecialchars($_SESSION['user']['prenom']); ?></span>
            </h1>
            <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
                Prêt à trouver une nouvelle aventure ?
            </p>
        <?php else: ?>
            <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
                Bienvenu sur <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">ColoMap</span>
            </h1>
            <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
                Explorez des centaines de camps partout en France. L'aventure inoubliable de votre enfant commence ici.
            </p>
        <?php endif; ?>
    </section>

    <!-- Barre de recherche rapide par nom -->
    <section class="mb-8">
        <div class="relative">
            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" /></svg>
            </div>
            <input type="text" id="name-search-input" placeholder="Rechercher un camp par nom..." class="block w-full rounded-lg border-gray-300 p-3 pl-10 text-base shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
    </section>

    <!-- Liste des camps -->
    <section class="mt-8">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Tous les camps disponibles</h2>
            <button id="toggle-filters-button" class="inline-flex items-center gap-2 rounded-lg bg-white px-4 py-2 text-sm font-medium text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100 transition-all">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M2.628 1.601C5.028 1.206 7.49 1 10 1s4.973.206 7.372.601a.75.75 0 0 1 .628.74v2.288a2.25 2.25 0 0 1-.659 1.59l-4.682 4.683a2.25 2.25 0 0 0-.659 1.59v3.037c0 .684-.31 1.33-.844 1.757l-1.937 1.55A.75.75 0 0 1 8 18.25v-5.757a2.25 2.25 0 0 0-.659-1.59L2.659 6.22A2.25 2.25 0 0 1 2 4.629V2.34a.75.75 0 0 1 .628-.74Z" clip-rule="evenodd" /></svg>
                <span>Filtres avancés</span>
            </button>
        </div>
        
        <div id="loader" class="flex justify-center items-center h-64"><div class="loader"></div></div>
        <div id="camps-list" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"></div>
    </section>

</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    
    const toggleFiltersButton = document.getElementById('toggle-filters-button');
    const filterBar = document.getElementById('filter-bar');
    const searchForm = document.getElementById('advanced-search-form');
    const campsListContainer = document.getElementById('camps-list');
    const loader = document.getElementById('loader');
    const nameSearchInput = document.getElementById('name-search-input');
    const childSelect = document.getElementById('filter-child');
    let userFavorites = <?php echo json_encode($user_favorites); ?>;

    async function loadChildren() {
        if (!childSelect) return;
        try {
            const response = await fetch('api/get_children.php');
            if (!response.ok) return;
            const children = await response.json();

            if (children.length > 0) {
                children.forEach(child => {
                    const option = document.createElement('option');
                    option.value = child.age;
                    option.textContent = `${child.prenom} (${child.age} ans)`;
                    childSelect.appendChild(option);
                });
            } else {
                childSelect.innerHTML = '<option value="">Aucun enfant enregistré</option>';
                childSelect.disabled = true;
            }
        } catch (error) {
            console.error("Erreur lors du chargement des enfants:", error);
        }
    }

    function debounce(func, timeout = 300){
        let timer;
        return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => { func.apply(this, args); }, timeout);
        };
    }

    async function fetchAndDisplayCamps(params = {}) {
        loader.style.display = 'flex';
        campsListContainer.innerHTML = ''; 

        const query = new URLSearchParams(params).toString();
        const apiUrl = `api/get_camps.php?${query}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erreur réseau');
            }
            let camps = await response.json();
            
            loader.style.display = 'none';

            if (camps.error || camps.length === 0) {
                campsListContainer.innerHTML = `<p class="text-gray-500 col-span-full text-center">Aucun camp ne correspond à votre recherche.</p>`;
                return;
            }
            renderCamps(camps);

        } catch (error) {
            console.error("Erreur lors de la récupération des camps:", error);
            loader.style.display = 'none';
            campsListContainer.innerHTML = `<p class="text-red-500 col-span-full text-center">${error.message}</p>`;
        }
    }
    
    function renderCamps(camps) {
        let newContent = '';
        camps.forEach(camp => {
            const isFavorited = userFavorites.includes(camp.id);
            newContent += `
                <div class="bg-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 group">
                    <div class="relative">
                        <img src="${camp.image_url}" alt="Image pour ${camp.nom}" class="w-full h-48 object-cover cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'" onerror="this.onerror=null;this.src='https://placehold.co/600x400/e2e8f0/cbd5e0?text=Image+invalide';">
                        <?php if ($is_logged_in): ?>
                        <button class="favorite-button absolute top-3 right-3 bg-white/70 backdrop-blur-sm p-2 rounded-full transition-all hover:scale-110" data-camp-id="${camp.id}" title="Ajouter aux favoris">
                            <svg class="w-5 h-5 ${isFavorited ? 'text-red-500 fill-current' : 'text-gray-600'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.5l1.318-1.182a4.5 4.5 0 116.364 6.364L12 21l-7.682-7.682a4.5 4.5 0 010-6.364z"></path>
                            </svg>
                        </button>
                        <?php endif; ?>
                    </div>
                    <div class="p-4 cursor-pointer" onclick="window.location.href='camp_details.php?id=${camp.id}'">
                         <h3 class="font-bold text-lg mb-2 truncate">${camp.nom}</h3>
                         <p class="text-gray-600 text-sm mb-1">📍 ${camp.ville}</p>
                         <p class="text-gray-600 text-sm mb-3">🎂 ${camp.age_min} - ${camp.age_max} ans</p>
                         <div class="flex justify-between items-center">
                             <p class="text-blue-600 font-bold text-lg">${camp.prix}€</p>
                             <span class="text-xs font-semibold text-gray-500">${new Date(camp.date_debut).toLocaleDateString('fr-FR')}</span>
                         </div>
                    </div>
                </div>`;
        });
        campsListContainer.innerHTML = newContent;
        addFavoriteListeners();
    }

    function addFavoriteListeners() {
        document.querySelectorAll('.favorite-button').forEach(button => {
            button.addEventListener('click', toggleFavorite);
        });
    }

    async function toggleFavorite(event) {
        const button = event.currentTarget;
        const campId = button.dataset.campId;
        const svg = button.querySelector('svg');
        try {
            const response = await fetch('api/toggle_favorite.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ campId })
            });
            const result = await response.json();
            if (result.success) {
                const index = userFavorites.indexOf(campId);
                if (result.isFavorited) {
                    if (index === -1) userFavorites.push(campId);
                    svg.classList.add('text-red-500', 'fill-current');
                    svg.classList.remove('text-gray-600');
                } else {
                    if (index > -1) userFavorites.splice(index, 1);
                    svg.classList.remove('text-red-500', 'fill-current');
                    svg.classList.add('text-gray-600');
                }
            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour des favoris:', error);
        }
    }

    if (searchForm) {
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const params = Object.fromEntries(formData.entries());
            const nameValue = nameSearchInput.value.trim();
            if(nameValue) params.name = nameValue;
            
            fetchAndDisplayCamps(params);
        });
    }

    nameSearchInput.addEventListener('input', debounce(() => {
        fetchAndDisplayCamps({ name: nameSearchInput.value });
    }));

    toggleFiltersButton.addEventListener('click', function() {
        filterBar.classList.toggle('hidden');
    });

    loadChildren();
    fetchAndDisplayCamps();
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\info_inscrit.php === 
<?php
require_once 'partials/header.php';

// Sécurité : l'utilisateur doit être connecté.
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
$camp_id = $_GET['camp_id'] ?? '';
$child_id = $_GET['child_id'] ?? '';

if (empty($camp_id) || empty($child_id)) {
    header('Location: reservations.php');
    exit;
}
?>

<title>Informations sur l'Inscription - ColoMap</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div id="loader" class="text-center py-20">
        <div class="loader inline-block"></div>
        <p class="mt-4 text-gray-600">Chargement des informations...</p>
    </div>

    <div id="content" class="hidden">
        <div class="mb-8">
            <a href="reservations.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
                Retour à mes réservations
            </a>
        </div>

        <div class="bg-white p-8 rounded-xl shadow-lg border">
            <div class="text-center border-b pb-6 mb-6">
                <p class="text-blue-600 font-semibold">INSCRIPTION CONFIRMÉE</p>
                <h1 id="camp-name" class="text-3xl font-bold mt-2 text-gray-900"></h1>
                <p class="text-lg text-gray-600">pour <span id="child-name" class="font-bold"></span></p>
            </div>
            
            <div class="grid md:grid-cols-2 gap-8">
                <!-- Section Informations Pratiques -->
                <div class="space-y-4">
                    <h2 class="text-xl font-bold">Informations Pratiques</h2>
                    <div id="camp-dates"></div>
                    <div id="camp-address"></div>
                </div>

                <!-- Section Contact -->
                <div class="space-y-4">
                    <h2 class="text-xl font-bold">Contact Organisateur</h2>
                    <div id="org-name"></div>
                    <div id="org-contact"></div>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const loader = document.getElementById('loader');
    const content = document.getElementById('content');
    const campId = '<?php echo $camp_id; ?>';
    const childId = '<?php echo $child_id; ?>';

    try {
        const response = await fetch(`api/get_inscription_details.php?camp_id=${campId}&child_id=${childId}`);
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Impossible de charger les détails.');
        }
        
        const data = await response.json();

        // Remplissage des champs
        document.getElementById('camp-name').textContent = data.camp.nom;
        document.getElementById('child-name').textContent = data.enfant.prenom;
        
        const startDate = new Date(data.camp.date_debut).toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
        document.getElementById('camp-dates').innerHTML = `<p class="font-semibold">Date d'arrivée</p><p>${startDate}</p>`;
        
        document.getElementById('camp-address').innerHTML = `<p class="font-semibold">Lieu du camp</p><p>${data.camp.adresse}</p>`;
        
        document.getElementById('org-name').innerHTML = `<p class="font-semibold">Organisme</p><p>${data.organisateur.nom}</p>`;
        
        document.getElementById('org-contact').innerHTML = `<p class="font-semibold">Contact</p><p>${data.organisateur.mail} / ${data.organisateur.tel}</p>`;

        loader.classList.add('hidden');
        content.classList.remove('hidden');

    } catch (error) {
        loader.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\inscription.php === 
<?php
require_once 'partials/header.php';
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
$camp_id = $_GET['id'] ?? '';
if (empty($camp_id)) {
    header('Location: index.php');
    exit;
}
?>
<title>Inscription au Camp - ColoMap</title>

<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div id="loader" class="text-center py-20">
        <div class="loader inline-block"></div>
        <p class="mt-4 text-gray-600">Préparation de l'inscription...</p>
    </div>

    <div id="inscription-process" class="hidden">
        <div class="text-center mb-8">
            <h1 id="camp-title" class="text-3xl font-bold text-gray-900"></h1>
        </div>

        <div id="step-1-children" class="step-content bg-white p-8 rounded-xl shadow-lg border">
            <h2 class="text-2xl font-bold mb-4">Étape 1: Qui participe ?</h2>
            <p class="text-gray-600 mb-6">Sélectionnez le ou les enfants que vous souhaitez inscrire à ce camp.</p>
            <div id="children-selection-list" class="space-y-3"></div>
            <div class="text-right mt-8">
                <button id="btn-to-summary" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700 disabled:bg-gray-400" disabled>Continuer</button>
            </div>
        </div>
        <div id="step-2-summary" class="step-content hidden bg-white p-8 rounded-xl shadow-lg border">
             <h2 class="text-2xl font-bold mb-6">Étape 2: Résumé et Paiement</h2>
            <div id="summary-details" class="space-y-4 border-b pb-4 mb-6"></div>
            <div class="font-bold text-xl flex justify-between">
                <span>Total à régler :</span>
                <span id="total-price"></span>
            </div>
             <div class="mt-8">
                 <h3 class="text-lg font-semibold mb-4">Informations de paiement (simulation)</h3>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input type="text" placeholder="Numéro de carte (ex: 4242 ...)" class="p-2 border rounded-md">
                    <input type="text" placeholder="Nom sur la carte" class="p-2 border rounded-md">
                    <input type="text" placeholder="MM/AA" class="p-2 border rounded-md">
                    <input type="text" placeholder="CVC" class="p-2 border rounded-md">
                 </div>
            </div>
            <div id="payment-message" class="text-center my-4 text-sm font-medium"></div>
            <div class="flex justify-between mt-8">
                <button id="btn-back-to-children" class="bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-lg">Retour</button>
                <button id="btn-confirm-payment" class="bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700">Valider l'inscription</button>
            </div>
        </div>
        <div id="step-3-confirmation" class="step-content hidden bg-white p-8 rounded-xl shadow-lg border text-center">
             <h2 class="text-2xl font-bold mb-2">Inscription Réussie !</h2>
            <p class="text-gray-600 mb-6">Félicitations ! L'inscription a bien été prise en compte.</p>
            <a href="reservations.php" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg">Voir mes réservations</a>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const loader = document.getElementById('loader');
    const inscriptionProcess = document.getElementById('inscription-process');
    const campTitle = document.getElementById('camp-title');
    const childrenListContainer = document.getElementById('children-selection-list');
    const summaryContainer = document.getElementById('summary-details');
    const totalPriceEl = document.getElementById('total-price');
    const campId = '<?php echo $camp_id; ?>';
    
    const steps = {
        children: document.getElementById('step-1-children'),
        summary: document.getElementById('step-2-summary'),
        confirmation: document.getElementById('step-3-confirmation')
    };

    let campData = {};
    let childrenData = [];

    function showStep(stepName) {
        Object.values(steps).forEach(step => step.classList.add('hidden'));
        if (steps[stepName]) steps[stepName].classList.remove('hidden');
    }

    try {
        const [campRes, childrenRes] = await Promise.all([
            fetch(`api/get_camp_details.php?id=${campId}`),
            fetch('api/get_children.php')
        ]);
        if (!campRes.ok || !childrenRes.ok) throw new Error('Erreur de chargement des données initiales.');
        campData = await campRes.json();
        childrenData = await childrenRes.json();
        if (campData.error || childrenData.error) throw new Error('Données invalides reçues du serveur.');
        campTitle.textContent = `Inscription pour : ${campData.nom}`;
        renderChildrenList();
        loader.classList.add('hidden');
        inscriptionProcess.classList.remove('hidden');
        showStep('children');
    } catch (error) {
        loader.innerHTML = `<p class="text-red-500 font-bold">${error.message}</p>`;
    }

    function renderChildrenList() {
        childrenListContainer.innerHTML = '';
        if (childrenData.length === 0) {
            childrenListContainer.innerHTML = '<p>Vous devez d\'abord <a href="add_child.php" class="text-blue-600 underline">enregistrer un enfant</a> sur votre profil.</p>';
            return;
        }
        
        const alreadyRegisteredIds = campData.inscrits || [];
        
        childrenData.forEach(child => {
            const isEligibleByAge = child.age >= campData.age_min && child.age <= campData.age_max;
            const isAlreadyRegistered = alreadyRegisteredIds.includes(child.id);
            
            let isEligibleByGender = true;
            let statusHtml = '';

            if (isAlreadyRegistered) {
                 statusHtml = '<span class="text-xs font-bold text-green-600 ml-2">Déjà inscrit</span>';
            } else if (!isEligibleByAge) {
                statusHtml = '<span class="text-xs text-red-500 ml-2">Âge non compatible</span>';
            } else {
                // On vérifie le quota par genre uniquement si l'enfant n'est ni déjà inscrit, ni inéligible par l'âge.
                if (child.sexe === 'Femme' && campData.quota_max_filles > 0 && campData.filles_inscrites >= campData.quota_max_filles) {
                    isEligibleByGender = false;
                    statusHtml = '<span class="text-xs font-bold text-orange-600 ml-2">Plus de place pour les filles</span>';
                } else if (child.sexe === 'Homme' && campData.quota_max_garcons > 0 && campData.garcons_inscrits >= campData.quota_max_garcons) {
                    isEligibleByGender = false;
                    statusHtml = '<span class="text-xs font-bold text-orange-600 ml-2">Plus de place pour les garçons</span>';
                }
            }
            
            const isSelectable = isEligibleByAge && !isAlreadyRegistered && isEligibleByGender;

            const label = document.createElement('label');
            label.className = `flex items-center p-4 border rounded-lg ${isSelectable ? 'cursor-pointer hover:bg-blue-50' : 'opacity-60 bg-gray-100 cursor-not-allowed'}`;
            
            label.innerHTML = `
                <input type="checkbox" class="h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-blue-500" data-child-id="${child.id}" data-child-name="${child.prenom}" ${!isSelectable ? 'disabled' : ''}>
                <div class="ml-4">
                    <span class="font-semibold">${child.prenom}</span>
                    <span class="text-sm text-gray-500">(${child.age} ans - ${child.sexe})</span>
                    ${statusHtml}
                </div>
            `;
            childrenListContainer.appendChild(label);
        });
        childrenListContainer.addEventListener('change', updateSummaryButtonState);
    }
    
    function getSelectedChildren() {
        return Array.from(childrenListContainer.querySelectorAll('input:checked')).map(input => ({ id: input.dataset.childId, name: input.dataset.childName }));
    }
    
    function updateSummaryButtonState() {
        document.getElementById('btn-to-summary').disabled = getSelectedChildren().length === 0;
    }
    
    document.getElementById('btn-to-summary').addEventListener('click', function() {
        const selectedChildren = getSelectedChildren();
        let summaryHtml = '';
        let total = 0;
        const price = parseFloat(campData.prix);
        const discount = campData.remise ? parseFloat(campData.remise) / 100 : 0;
        selectedChildren.forEach((child, index) => {
            let itemPrice = price;
            let discountText = '';
            if (index > 0 && discount > 0) {
                itemPrice = price * (1 - discount);
                discountText = ` (Remise de ${campData.remise}%)`;
            }
            total += itemPrice;
            summaryHtml += `<div class="flex justify-between"><p>Inscription pour <strong>${child.name}</strong>${discountText}</p><p>${itemPrice.toFixed(2)}€</p></div>`;
        });
        summaryContainer.innerHTML = summaryHtml;
        totalPriceEl.textContent = `${total.toFixed(2)}€`;
        showStep('summary');
    });

    document.getElementById('btn-back-to-children').addEventListener('click', () => showStep('children'));

    document.getElementById('btn-confirm-payment').addEventListener('click', async function() {
        this.disabled = true; this.textContent = 'Traitement en cours...';
        const messageEl = document.getElementById('payment-message');
        messageEl.textContent = '';
        const payload = { campId: campId, childIds: getSelectedChildren().map(c => c.id), finalPrice: parseFloat(totalPriceEl.textContent) };
        try {
            const response = await fetch('api/process_inscription.php', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
            const result = await response.json();
            if(!response.ok) throw new Error(result.error);
            showStep('confirmation');
        } catch (error) {
            messageEl.innerHTML = `<p class="text-red-600">${error.message}</p>`;
            this.disabled = false; this.textContent = "Valider l'inscription";
        }
    });
});
</script>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\login.php === 
<?php require_once 'partials/header.php'; ?>
<title>Connexion - TrouveTonCamp</title>

<main class="container mx-auto px-4 py-16 flex justify-center">
    <div class="w-full max-w-md">
        <form id="login-form" class="bg-white shadow-lg rounded-xl px-8 pt-6 pb-8 mb-4">
            <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">Connexion</h1>

            <!-- Zone de message d'erreur/succès -->
            <div id="message-area" class="mb-4 text-center"></div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="mail">
                    Adresse Email
                </label>
                <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" id="mail" type="email" placeholder="votre.email@exemple.com" required>
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="password">
                    Mot de passe
                </label>
                <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" id="password" type="password" placeholder="******************" required>
            </div>
            <div class="flex items-center justify-between">
                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg focus:outline-none focus:shadow-outline w-full transition duration-300" type="submit">
                    Se connecter
                </button>
            </div>
             <p class="text-center text-gray-500 text-sm mt-6">
                Pas encore de compte ? <a class="font-bold text-blue-600 hover:text-blue-800" href="register.php">Inscrivez-vous</a>
            </p>
        </form>
    </div>
</main>

<script>
document.getElementById('login-form').addEventListener('submit', async function(event) {
    event.preventDefault();

    const mail = document.getElementById('mail').value;
    const password = document.getElementById('password').value;
    const messageArea = document.getElementById('message-area');
    messageArea.innerHTML = '<p class="text-blue-500">Connexion en cours...</p>';

    try {
        const response = await fetch('api/user_login.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ mail, password })
        });

        const result = await response.json();

        if (response.ok) {
            messageArea.innerHTML = `<p class="text-green-500 font-bold">Connexion réussie ! Redirection...</p>`;
            window.location.href = 'index.php';
        } else {
            // --- CORRECTION IMPORTANTE ---
            // Ce bloc affiche maintenant le message de débogage s'il existe.
            let errorMessage = result.error;
            if (result.debug) {
                // On ajoute le message de débogage en plus petit en dessous.
                errorMessage += `<br><small class="text-gray-500 mt-2 block">${result.debug}</small>`;
            }
            messageArea.innerHTML = `<p class="text-red-500 font-bold">${errorMessage}</p>`;
        }
    } catch (error) {
        messageArea.innerHTML = `<p class="text-red-500 font-bold">Une erreur de communication est survenue.</p>`;
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\messagerie.php === 
<?php
require_once 'partials/header.php';
// Sécurité : l'utilisateur doit être connecté pour accéder à sa messagerie.
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
$current_user_id = $_SESSION['user']['id'];
?>
<title>Ma Messagerie - ColoMap</title>

<main class="h-[calc(100vh-64px)] container mx-auto p-0 sm:p-4">
    <div class="h-full border-0 sm:border bg-white sm:rounded-xl shadow-lg flex">
        
        <aside id="conversations-column" class="w-full md:w-1/3 border-r h-full flex flex-col transition-transform duration-300 ease-in-out">
            <div class="p-4 border-b">
                <h1 class="text-2xl sm:text-3xl font-bold text-center mb-2">
                    Mes <span class="bg-gradient-to-r from-blue-500 to-pink-500 text-transparent bg-clip-text">Conversations</span>
                </h1>
                <p class="text-center text-gray-500 text-xs sm:text-sm mb-4">Retrouvez ici toutes vos discussions.</p>
                <div class="relative">
                    <input type="text" id="search-conversations" placeholder="Rechercher..." class="w-full p-2 pl-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <svg class="w-5 h-5 text-gray-400 absolute left-3 top-1/2 -translate-y-1/2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                         <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                    </svg>
                </div>
            </div>
            <div id="conversations-list" class="flex-grow overflow-y-auto">
                <div class="p-4 text-center text-gray-500">Chargement...</div>
            </div>
        </aside>

        <section id="active-conversation" class="hidden md:flex w-full md:w-2/3 h-full flex-col bg-gray-50">
            <div id="conversation-header" class="p-4 border-b flex items-center bg-white">
                <button id="back-to-convos-btn" class="md:hidden mr-4 p-2 rounded-full hover:bg-gray-100">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" /></svg>
                </button>
                <p id="conversation-title" class="font-bold text-lg"></p>
            </div>
            
            <div id="messages-container" class="flex-grow p-6 overflow-y-auto space-y-4">
                <div id="welcome-message" class="h-full flex items-center justify-center text-gray-500">
                     <p>Sélectionnez une conversation pour commencer.</p>
                </div>
            </div>

            <div id="message-form-container" class="p-4 border-t bg-white hidden">
                <form id="send-message-form" class="flex items-center gap-4">
                     <input type="text" id="message-input" placeholder="Taper un message..." class="flex-grow p-3 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500" autocomplete="off">
                    <button type="submit" class="bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 active:bg-blue-800 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
                             <path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" />
                        </svg>
                    </button>
                </form>
            </div>
        </section>
    </div>
</main>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const currentUserId = '<?php echo $current_user_id; ?>';
    const conversationsColumn = document.getElementById('conversations-column');
    const activeConversationColumn = document.getElementById('active-conversation');
    const conversationsList = document.getElementById('conversations-list');
    const conversationHeader = document.getElementById('conversation-header');
    const conversationTitle = document.getElementById('conversation-title');
    const messagesContainer = document.getElementById('messages-container');
    const welcomeMessage = document.getElementById('welcome-message');
    const messageFormContainer = document.getElementById('message-form-container');
    const sendMessageForm = document.getElementById('send-message-form');
    const messageInput = document.getElementById('message-input');
    const backToConvosBtn = document.getElementById('back-to-convos-btn');
    const searchConversationsInput = document.getElementById('search-conversations');
    
    let activeConversationId = null;
    
    function filterConversations() {
        const searchTerm = searchConversationsInput.value.toLowerCase();
        const conversationItems = conversationsList.querySelectorAll('.conversation-item');
        conversationItems.forEach(item => {
            const name = item.dataset.name.toLowerCase();
            if (name.includes(searchTerm)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    searchConversationsInput.addEventListener('input', filterConversations);

    async function loadConversations() {
        try {
            const response = await fetch('api/get_conversations.php');
            const conversations = await response.json();
            conversationsList.innerHTML = '';
            if (conversations.length === 0) {
                 conversationsList.innerHTML = `<div class="flex flex-col items-center justify-center h-full p-4 text-center text-gray-500"><svg class="w-16 h-16 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z" /></svg><p class="font-semibold text-lg text-gray-700">Vous n'avez pas de conversation</p><p class="text-sm">Commencez une discussion pour la voir ici.</p></div>`;
                return;
            }
            
            for (const convo of conversations) {
                let lastMessageContent = 'Aucun message';
                try {
                    const messagesResponse = await fetch(`api/get_messages.php?id=${convo.id}`);
                    if (messagesResponse.ok) {
                        const messages = await messagesResponse.json();
                        if (messages.length > 0) {
                            messages.sort((a, b) => new Date(a.fields["Date d'envoi"]) - new Date(b.fields["Date d'envoi"]));
                            lastMessageContent = messages[messages.length - 1].fields.Contenu;
                        }
                    }
                } catch (e) { /* On ignore les erreurs ici pour ne pas bloquer l'affichage de la liste */ }

                const convoElement = document.createElement('div');
                convoElement.className = 'flex items-center p-4 border-b cursor-pointer hover:bg-gray-100 transition-colors conversation-item';
                convoElement.dataset.id = convo.id;
                convoElement.dataset.name = convo.displayName;
                const initial = convo.displayName ? convo.displayName.charAt(0).toUpperCase() : '?';
                const avatarUrl = `https://placehold.co/40x40/e2e8f0/2563eb?text=${initial}`;
                convoElement.innerHTML = `
                    <img src="${avatarUrl}" alt="Avatar for ${convo.displayName}" class="w-10 h-10 rounded-full mr-4 flex-shrink-0">
                    <div class="flex-grow overflow-hidden">
                        <p class="font-bold truncate">${convo.displayName}</p>
                         <p class="text-sm text-gray-500 truncate">${lastMessageContent}</p>
                    </div>
                `;
                convoElement.addEventListener('click', () => loadMessages(convo.id, convo.displayName));
                conversationsList.appendChild(convoElement);
            }
        } catch (error) {
            conversationsList.innerHTML = '<p class="text-center text-red-500 p-4">Erreur de chargement des conversations.</p>';
        }
    }

    async function loadMessages(conversationId, name) {
        if (window.innerWidth < 768) { 
            conversationsColumn.classList.add('hidden');
            activeConversationColumn.classList.remove('hidden');
            activeConversationColumn.classList.add('w-full');
        }

        activeConversationId = conversationId;
        welcomeMessage.classList.add('hidden');
        conversationHeader.classList.remove('hidden');
        messageFormContainer.classList.remove('hidden');
        conversationTitle.textContent = name;
        messagesContainer.innerHTML = '<p class="text-center text-gray-400">Chargement...</p>';

        try {
            const response = await fetch(`api/get_messages.php?id=${conversationId}`);
            if (!response.ok) { throw new Error('La réponse du serveur n\'est pas OK'); }

            const messages = await response.json();
            
            // --- AJOUT DE LA LIGNE DE TRI ---
            // On trie les messages par date, du plus ancien au plus récent, juste après les avoir reçus.
            messages.sort((a, b) => new Date(a.fields["Date d'envoi"]) - new Date(b.fields["Date d'envoi"]));

            messagesContainer.innerHTML = '';
            messages.forEach(msg => {
                const isSent = msg.fields.Auteur && msg.fields.Auteur[0] === currentUserId;
                const sentDate = new Date(msg.fields["Date d'envoi"]);
                const timeString = sentDate.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });

                const messageWrapper = document.createElement('div');
                messageWrapper.className = `flex w-full ${isSent ? 'justify-end' : 'justify-start'}`;
                
                const messageContent = document.createElement('div');
                messageContent.className = 'flex flex-col max-w-[80%] md:max-w-md';

                const messageBubble = document.createElement('div');
                messageBubble.className = `px-4 py-2 rounded-2xl break-words ${isSent ? 'bg-blue-600 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'}`;
                messageBubble.textContent = msg.fields.Contenu;
                
                const timeElement = document.createElement('div');
                timeElement.className = `text-xs text-gray-400 mt-1 px-1 ${isSent ? 'text-right' : 'text-left'}`;
                timeElement.textContent = timeString;

                messageContent.appendChild(messageBubble);
                messageContent.appendChild(timeElement);
                messageWrapper.appendChild(messageContent);
                messagesContainer.appendChild(messageWrapper);
            });

            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 0);
        } catch (error) {
            console.error("Erreur détaillée:", error);
            messagesContainer.innerHTML = '<p class="text-center text-red-500 p-4">Impossible de charger les messages.</p>';
        }
    }

    sendMessageForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const content = messageInput.value.trim();
        if (!content || !activeConversationId) return;

        const originalMessage = content;
        messageInput.value = '';
        messageInput.disabled = true;

        try {
            const response = await fetch('api/send_message.php', { 
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ conversationId: activeConversationId, content: originalMessage })
            });
            if (!response.ok) throw new Error("Erreur d'envoi");
            
            await loadMessages(activeConversationId, conversationTitle.textContent);
            await loadConversations();

        } catch (error) {
            console.error('Erreur d\'envoi:', error);
            messageInput.value = originalMessage; 
            alert("Le message n'a pas pu être envoyé.");
        } finally {
            messageInput.disabled = false;
            messageInput.focus();
        }
    });

    backToConvosBtn.addEventListener('click', () => {
        conversationsColumn.classList.remove('hidden');
        activeConversationColumn.classList.add('hidden');
    });

    loadConversations();
    
    const urlParams = new URLSearchParams(window.location.search);
    const convIdFromUrl = urlParams.get('conv_id');
    if (convIdFromUrl) {
        setTimeout(async () => {
            await loadConversations(); 
            const targetConvo = conversationsList.querySelector(`[data-id="${convIdFromUrl}"]`);
            if (targetConvo) {
                loadMessages(convIdFromUrl, targetConvo.dataset.name);
            }
        }, 300);
    }
});
</script>
</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\mes_camps.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est directeur.
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
?>

<title>Mes Camps - Espace Organisateur</title>

<!-- Popup de confirmation de suppression -->
<div id="delete-confirm-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-xl flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full text-center transform transition-all" id="modal-content">
        <!-- Icône d'avertissement -->
        <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-5">
            <svg class="h-10 w-10 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
            </svg>
        </div>
        <h2 class="text-2xl font-bold mb-2 text-gray-900">Confirmation Requise</h2>
        <p class="text-gray-600 mb-6">Vous êtes sur le point de supprimer définitivement le camp :</p>
        
        <div class="bg-gray-100 rounded-lg p-3 text-left mb-6">
            <p class="text-sm text-gray-500">Nom du camp</p>
            <p id="modal-camp-name" class="font-bold text-lg text-gray-800"></p>
            <p class="text-sm text-gray-500 mt-2">ID du camp</p>
            <p id="modal-camp-id" class="font-mono text-xs text-gray-800"></p>
        </div>
        
        <p class="text-sm text-red-700 font-semibold mb-6">Cette action est irréversible. Toutes les données associées seront perdues.</p>

        <div class="flex flex-col gap-3">
            <button id="confirm-delete-button" disabled class="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg transition-all duration-300 disabled:bg-red-300 disabled:cursor-not-allowed">
                <!-- Le texte du bouton sera mis à jour par JS -->
            </button>
            <button id="cancel-delete-button" class="w-full bg-gray-200 text-gray-800 font-bold py-3 px-4 rounded-lg hover:bg-gray-300">
                Annuler
            </button>
        </div>
    </div>
</div>


<main class="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    
    <div class="mb-8">
        <a href="organisateurs.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour à l'espace organisateur
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-900">Gérer mes camps</h1>
            <a href="create_camp.php" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-all duration-300 hover:text-white hover:bg-gradient-to-r hover:from-blue-500 hover:via-purple-500 hover:to-pink-500">
                Ajouter un camp
            </a>
        </div>
        
        <div id="my-camps-list" class="space-y-4">
            <!-- La liste des camps sera chargée ici par JavaScript -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const myCampsList = document.getElementById('my-camps-list');
    const modal = document.getElementById('delete-confirm-modal');
    const modalCampName = document.getElementById('modal-camp-name');
    const modalCampId = document.getElementById('modal-camp-id');
    const confirmDeleteButton = document.getElementById('confirm-delete-button');
    const cancelDeleteButton = document.getElementById('cancel-delete-button');

    let campToDeleteId = null;
    let countdownInterval = null;

    async function fetchMyCamps() {
        myCampsList.innerHTML = '<p class="text-gray-500 text-center py-4">Chargement de vos camps...</p>';
        try {
            const response = await fetch('api/get_my_camps.php');
            if (!response.ok) throw new Error('Erreur réseau');
            const camps = await response.json();
            
            myCampsList.innerHTML = ''; 
            if (camps.length === 0) {
                myCampsList.innerHTML = '<p class="text-gray-500 text-center py-4">Vous n\'avez encore ajouté aucun camp.</p>';
                return;
            }

            camps.forEach(camp => {
                const campElement = document.createElement('div');
                campElement.className = "camp-item flex items-center justify-between p-4 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors";
                campElement.id = `camp-${camp.id}`;
                campElement.innerHTML = `
                    <div>
                        <p class="font-bold text-gray-800">${camp.nom}</p>
                        <span class="text-xs text-gray-500">ID: ${camp.id}</span>
                    </div>
                    <div class="flex items-center gap-4">
                        <a href="camp_details.php?id=${camp.id}" class="text-blue-600 hover:underline text-sm font-medium">Voir</a>
                        <a href="edit_camp.php?id=${camp.id}" class="text-yellow-600 hover:underline text-sm font-medium">Modifier</a>
                        <button class="delete-button text-red-600 hover:underline text-sm font-medium" data-id="${camp.id}" data-name="${camp.nom}">Supprimer</button>
                    </div>`;
                myCampsList.appendChild(campElement);
            });
            
            document.querySelectorAll('.delete-button').forEach(button => {
                button.addEventListener('click', handleDeleteClick);
            });

        } catch (error) {
            myCampsList.innerHTML = `<p class="text-red-500 text-center font-bold py-4">Erreur lors du chargement de vos camps.</p>`;
        }
    }

    function handleDeleteClick(event) {
        const button = event.currentTarget;
        campToDeleteId = button.dataset.id;
        const campName = button.dataset.name;

        modalCampName.textContent = campName;
        modalCampId.textContent = campToDeleteId;
        
        modal.classList.remove('hidden');
        
        let countdown = 10;
        confirmDeleteButton.disabled = true;
        confirmDeleteButton.innerHTML = `Valider la suppression (${countdown})`;

        countdownInterval = setInterval(() => {
            countdown--;
            confirmDeleteButton.innerHTML = `Valider la suppression (${countdown})`;
            if (countdown <= 0) {
                clearInterval(countdownInterval);
                confirmDeleteButton.disabled = false;
                confirmDeleteButton.innerHTML = 'Valider la suppression';
            }
        }, 1000);
    }

    function closeModal() {
        modal.classList.add('hidden');
        clearInterval(countdownInterval);
        campToDeleteId = null;
    }

    async function confirmDelete() {
        if (!campToDeleteId) return;

        confirmDeleteButton.disabled = true;
        confirmDeleteButton.textContent = 'Suppression en cours...';

        try {
            const response = await fetch('api/delete_camp.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: campToDeleteId })
            });
            
            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Erreur inconnue.');
            }
            
            const campElementToRemove = document.getElementById(`camp-${campToDeleteId}`);
            if(campElementToRemove) {
                campElementToRemove.remove();
            }
            
            closeModal();

        } catch (error) {
            alert('Erreur: ' + error.message);
            confirmDeleteButton.disabled = false;
            confirmDeleteButton.textContent = 'Valider la suppression';
        }
    }

    cancelDeleteButton.addEventListener('click', closeModal);
    confirmDeleteButton.addEventListener('click', confirmDelete);

    fetchMyCamps();
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\organisateurs.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
$initial = strtoupper(substr($_SESSION['user']['prenom'], 0, 1));
$placeholder_avatar_url = "https://placehold.co/360x360/e2e8f0/2563eb?text=" . urlencode($initial);
?>
<title>Espace Organisateur - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="flex items-center gap-4 p-6 bg-white rounded-xl shadow border mb-12">
        <img class="h-16 w-16 rounded-full object-cover" 
             src="<?php echo htmlspecialchars($_SESSION['user']['photo_url'] ?? $placeholder_avatar_url); ?>" 
             alt="Photo de profil de l'organisateur">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Bienvenue dans votre Espace Organisateur</h1>
            <p class="text-gray-600">Gérez vos camps, ajoutez-en de nouveaux et communiquez avec les parents.</p>
        </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        
        <a href="mes_camps.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-blue-500 hover:ring-2 hover:ring-blue-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-blue-100 text-blue-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6"><path d="M4.5 3.75a3 3 0 0 0-3 3v.75h21v-.75a3 3 0 0 0-3-3h-15Z" /><path fill-rule="evenodd" d="M22.5 9.75h-21v7.5a3 3 0 0 0 3 3h15a3 3 0 0 0 3-3v-7.5Zm-18 3.75a.75.75 0 0 1 .75-.75h6a.75.75 0 0 1 0 1.5h-6a.75.75 0 0 1-.75-.75Zm.75 2.25a.75.75 0 0 0 0 1.5h3a.75.75 0 0 0 0-1.5h-3Z" clip-rule="evenodd" /></svg></div>
                <div>
                    <h3 class="font-bold text-lg">Gérer mes camps</h3>
                    <p class="text-sm text-gray-500">Modifier ou supprimer vos camps existants.</p>
                </div>
            </div>
        </a>

        <a href="create_camp.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-green-500 hover:ring-2 hover:ring-green-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-green-100 text-green-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6"><path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25ZM12.75 9a.75.75 0 0 0-1.5 0v2.25H9a.75.75 0 0 0 0 1.5h2.25V15a.75.75 0 0 0 1.5 0v-2.25H15a.75.75 0 0 0 0-1.5h-2.25V9Z" clip-rule="evenodd" /></svg></div>
                <div>
                    <h3 class="font-bold text-lg">Créer un camp</h3>
                    <p class="text-sm text-gray-500">Ajouter un nouveau séjour.</p>
                </div>
            </div>
        </a>

        <a href="public_infos.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-purple-500 hover:ring-2 hover:ring-purple-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-purple-100 text-purple-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M15 9h3.75M15 12h3.75M15 15h3.75M4.5 19.5h15a2.25 2.25 0 0 0 2.25-2.25V6.75A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25v10.5A2.25 2.25 0 0 0 4.5 19.5Z" /></svg></div>
                <div>
                    <h3 class="font-bold text-lg">Mes Organismes</h3>
                    <p class="text-sm text-gray-500">Gérer vos informations publiques.</p>
                </div>
            </div>
        </a>

        <!-- NOUVEL ONGLET MESSAGERIE -->
        <a href="messagerie.php" class="relative bg-white p-6 rounded-xl shadow-lg border hover:border-pink-500 hover:ring-2 hover:ring-pink-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-pink-100 text-pink-600 flex items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75" /></svg></div>
                <div>
                    <h3 class="font-bold text-lg">Messagerie</h3>
                    <p class="text-sm text-gray-500">Échanger avec les parents.</p>
                </div>
                <span id="unread-badge" class="absolute top-3 right-3 w-6 h-6 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span>
            </div>
        </a>
    </div>
</main>
<script>
document.addEventListener('DOMContentLoaded', async function() {
    const badge = document.getElementById('unread-badge');
    if (badge) {
        try {
            const response = await fetch('api/get_unread_messages_count.php');
            const data = await response.json();
            if (data.count > 0) {
                badge.textContent = data.count;
                badge.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Erreur de notification:', error);
        }
    }
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\profile.php === 
<?php
require_once 'partials/header.php';

// Sécurité : si l'utilisateur n'est pas connecté, on le redirige.
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}

// On récupère le statut d'administrateur depuis la session pour l'affichage conditionnel.
$is_admin = $_SESSION['user']['is_admin'] ?? false;
?>

<title>Mon Espace Personnel - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">

    <div class="mb-8">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900">Mon Espace Personnel</h1>
        <p class="mt-1 text-lg text-gray-600">Gérez vos informations, vos enfants et vos camps favoris.</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

        <!-- Carte : Mes enfants avec nouvelle icône -->
        <a href="children.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-blue-500 hover:ring-2 hover:ring-blue-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-blue-100 text-blue-600 flex items-center justify-center">
                    <svg class="w-7 h-7" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Mes Enfants</h3>
                    <p class="text-sm text-gray-500">Gérer les fiches de vos enfants.</p>
                </div>
            </div>
        </a>

        <!-- Carte : Paramètres du compte -->
        <a href="settings.php" class="bg-white p-6 rounded-xl shadow-lg border hover:border-gray-500 hover:ring-2 hover:ring-gray-200 transition-all cursor-pointer">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-gray-100 text-gray-600 flex items-center justify-center">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg">Mes Paramètres</h3>
                    <p class="text-sm text-gray-500">Modifier vos informations personnelles.</p>
                </div>
            </div>
        </a>
        
        <!-- Carte Admin avec nouvelle icône et logique de notif corrigée -->
        <?php if ($is_admin): ?>
        <a href="admin.php" class="relative bg-red-50 p-6 rounded-xl shadow-lg border border-red-200 hover:border-red-500 hover:ring-2 hover:ring-red-200 transition-all cursor-pointer md:col-span-2 lg:col-span-3">
            <div class="flex items-center gap-4">
                <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-red-100 text-red-600 flex items-center justify-center">
                    <svg class="w-7 h-7" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm-1.5 6.135a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
                </div>
                <div>
                    <h3 class="font-bold text-lg text-red-800">Panneau d'Administration</h3>
                    <p class="text-sm text-red-700">Gérer les demandes et le site.</p>
                </div>
                <span id="admin-notif-badge-profile" class="absolute top-3 right-3 w-6 h-6 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span>
            </div>
        </a>
        <?php endif; ?>

    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function () {
    <?php if ($is_admin): ?>
    async function getAdminNotifCount() {
        try {
            // On lance les deux appels en parallèle pour plus d'efficacité
            const [requestResponse, campResponse] = await Promise.all([
                fetch('api/get_request_count.php'),
                fetch('api/get_camp_request_count.php')
            ]);

            if (!requestResponse.ok || !campResponse.ok) return;

            const requestData = await requestResponse.json();
            const campData = await campResponse.json();
            const totalCount = (requestData.count || 0) + (campData.count || 0);
            
            const badge = document.getElementById('admin-notif-badge-profile');
            if (badge && totalCount > 0) {
                badge.textContent = totalCount;
                badge.classList.remove('hidden');
            } else if (badge) {
                badge.classList.add('hidden');
            }
        } catch (error) {
            console.error('Impossible de récupérer le nombre de notifications admin:', error);
        }
    }
    getAdminNotifCount();
    <?php endif; ?>
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\public_infos.php === 
<?php
require_once 'partials/header.php';

// Sécurité
if (!isset($_SESSION['user']) || !$_SESSION['user']['is_directeur']) {
    header('Location: index.php');
    exit;
}
?>

<title>Gestion des Organisateurs - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="organisateurs.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-lg border">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-900">Mes Organismes</h1>
            <a href="create_organisateur.php" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">
                Créer un organisme
            </a>
        </div>
        
        <div id="organisateurs-list" class="space-y-4">
            <!-- La liste des organismes sera chargée ici -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const listContainer = document.getElementById('organisateurs-list');
    listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Chargement...</p>';
    try {
        const response = await fetch('api/get_organisateurs.php');
        if (!response.ok) throw new Error('Erreur réseau');
        const organisateurs = await response.json();
        
        listContainer.innerHTML = '';
        if(organisateurs.length === 0) {
            listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Vous n\'avez encore créé aucun organisme.</p>';
            return;
        }

        organisateurs.forEach(org => {
            const campsList = org.camps.length > 0 
                ? org.camps.map(camp => `<li class="truncate">${camp}</li>`).join('') 
                : '<li class="text-gray-400">Aucun camp associé.</li>';

            const card = `
                <div class="bg-gray-50 p-4 rounded-lg border">
                    <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                        <div>
                            <p class="font-bold text-lg text-gray-800">${org.nom}</p>
                            <a href="mailto:${org.mail}" class="text-sm text-blue-600 hover:underline">${org.mail}</a>
                        </div>
                        <div class="text-left md:text-right">
                             <p class="font-bold text-2xl text-green-600">${org.portefeuille}€</p>
                             <p class="text-xs text-gray-500">Portefeuille</p>
                        </div>
                    </div>
                    <div class="mt-4 border-t pt-4">
                        <h4 class="font-semibold text-sm mb-2">Camps associés :</h4>
                        <ul class="list-disc list-inside text-sm text-gray-700 space-y-1">
                           ${campsList}
                        </ul>
                    </div>
                </div>
            `;
            listContainer.innerHTML += card;
        });
    } catch (error) {
        listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
    }
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\register.php === 
<?php require_once 'partials/header.php'; ?>
<title>Inscription - TrouveTonCamp</title>

<main class="container mx-auto px-4 py-16 flex justify-center">
    <div class="w-full max-w-lg">
        <form id="register-form" class="bg-white shadow-lg rounded-xl px-8 pt-6 pb-8 mb-4">
            <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">Créer un compte</h1>
            
            <div id="message-area" class="mb-4 text-center"></div>

            <div class="flex flex-wrap -mx-3 mb-4">
                <div class="w-full md:w-1/2 px-3 mb-4 md:mb-0">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="prenom">Prénom</label>
                    <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="prenom" type="text" required>
                </div>
                <div class="w-full md:w-1/2 px-3">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="nom">Nom</label>
                    <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="nom" type="text" required>
                </div>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="mail">Email</label>
                <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="mail" type="email" required>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="tel">Téléphone (Optionnel)</label>
                <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="tel" type="tel">
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="password">Mot de passe</label>
                <input class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="password" type="password" required>
            </div>
            
            <div class="flex items-center justify-between">
                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg focus:outline-none w-full transition duration-300" type="submit">
                    S'inscrire
                </button>
            </div>
            <p class="text-center text-gray-500 text-sm mt-6">
                Déjà un compte ? <a class="font-bold text-blue-600 hover:text-blue-800" href="login.php">Connectez-vous</a>
            </p>
        </form>
    </div>
</main>

<script>
document.getElementById('register-form').addEventListener('submit', async function(event) {
    event.preventDefault();

    const nom = document.getElementById('nom').value;
    const prenom = document.getElementById('prenom').value;
    const mail = document.getElementById('mail').value;
    const tel = document.getElementById('tel').value;
    const password = document.getElementById('password').value;
    const messageArea = document.getElementById('message-area');
    messageArea.innerHTML = '<p class="text-blue-500">Création du compte...</p>';

    try {
        const response = await fetch('api/user_register.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ nom, prenom, mail, tel, password })
        });

        const result = await response.json();

        if (response.ok) {
            messageArea.innerHTML = `<p class="text-green-500 font-bold">${result.success}</p>`;
            // Optionnel: rediriger vers la page de connexion après un court délai
            setTimeout(() => { window.location.href = 'login.php'; }, 2000);
        } else {
            messageArea.innerHTML = `<p class="text-red-500 font-bold">${result.error}</p>`;
        }
    } catch (error) {
        messageArea.innerHTML = `<p class="text-red-500 font-bold">Une erreur de communication est survenue.</p>`;
    }
});
</script>
</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\reservation2.php === 
<?php
require_once 'partials/header.php';

if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
?>

<title>Mes Réservations - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
            Mes <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">Réservations</span>
        </h1>
        <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
            Retrouvez ici un récapitulatif de toutes les inscriptions de vos enfants.
        </p>
    </div>

    <div id="loader" class="text-center py-10">
        <div class="loader inline-block"></div>
        <p class="mt-4 text-gray-600">Chargement de vos réservations...</p>
    </div>
    
    <div id="reservations-list" class="hidden space-y-6 max-w-4xl mx-auto">
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const listContainer = document.getElementById('reservations-list');
    const loader = document.getElementById('loader');

    try {
        // SOLUTION FINALE : FILTRAGE CÔTÉ CLIENT

        // 1. On récupère la liste complète (et incorrectement filtrée) des réservations depuis l'API.
        // On utilise le fichier API final qui est censé fonctionner.
        const allReservationsResponse = await fetch('api/get_my_reservations.php?t=' + new Date().getTime());
        if (!allReservationsResponse.ok) throw new Error('Erreur API principale.');
        const allReservations = await allReservationsResponse.json();

        // 2. On récupère la liste des enfants qui appartiennent VRAIMENT à l'utilisateur.
        const myChildrenResponse = await fetch('api/get_children.php?t=' + new Date().getTime());
        if (!myChildrenResponse.ok) throw new Error('Erreur API des enfants.');
        const myChildren = await myChildrenResponse.json();
        
        // 3. On crée une liste des IDs de nos enfants.
        const myChildrenIds = new Set(myChildren.map(child => child.id));

        // 4. On filtre la liste complète des réservations en ne gardant que celles qui correspondent à nos enfants.
        const myFilteredReservations = allReservations.filter(reservation => 
            myChildrenIds.has(reservation.enfant_id)
        );

        // 5. On affiche le résultat filtré.
        loader.classList.add('hidden');
        listContainer.classList.remove('hidden');

        if (myFilteredReservations.length === 0) {
            listContainer.innerHTML = `<div class="text-center py-10 bg-white rounded-lg shadow-md border"><p class="text-gray-500">Vous n'avez aucune réservation pour le moment.</p></div>`;
            return;
        }
        
        let htmlContent = '';
        myFilteredReservations.forEach(res => {
            const startDate = res.date_debut ? new Date(res.date_debut).toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' }) : 'Date non définie';
            htmlContent += `
                <div class="bg-white rounded-xl shadow-lg border p-4 flex flex-col sm:flex-row items-center gap-6">
                    <img src="${res.camp_image_url}" alt="Image du camp" class="w-full sm:w-32 h-32 object-cover rounded-lg">
                    <div class="flex-grow text-center sm:text-left">
                        <p class="text-xs text-blue-600 font-semibold">INSCRIPTION CONFIRMÉE</p>
                        <h3 class="text-xl font-bold text-gray-800">${res.camp_nom}</h3>
                        <p class="text-gray-600 mt-1">Pour : <strong class="font-medium text-gray-900">${res.enfant_nom}</strong></p>
                        <p class="text-sm text-gray-500">Date de début : ${startDate}</p>
                    </div>
                    <a href="info_inscrit.php?camp_id=${res.camp_id}&child_id=${res.enfant_id}" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg text-sm">Voir les détails</a>
                </div>
            `;
        });
        listContainer.innerHTML = htmlContent;

    } catch (error) {
        loader.innerHTML = `<p class="text-red-500 font-bold col-span-full text-center py-10">Erreur: ${error.message}</p>`;
    }
});
</script>

</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\reservations.php === 
<?php
require_once 'partials/header.php';

// Sécurité : l'utilisateur doit être connecté pour voir cette page.
if (!isset($_SESSION['user'])) {
    header('Location: login.php');
    exit;
}
?>

<title>Mes Réservations - ColoMap</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-gray-900">
            Mes <span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">Réservations</span>
        </h1>
        <p class="mt-4 max-w-2xl mx-auto text-lg text-gray-500">
            Retrouvez ici un récapitulatif de toutes les inscriptions de vos enfants.
        </p>
    </div>

    <div id="loader" class="text-center py-10">
        <div class="loader inline-block"></div>
        <p class="mt-4 text-gray-600">Chargement de vos réservations...</p>
    </div>
    
    <div id="reservations-list" class="hidden space-y-6 max-w-4xl mx-auto">
        </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const listContainer = document.getElementById('reservations-list');
    const loader = document.getElementById('loader');

    try {
        // --- NOUVELLE LOGIQUE DE FILTRAGE CÔTÉ CLIENT ---

        // 1. On lance les deux appels à l'API en même temps
        const [reservationsResponse, childrenResponse] = await Promise.all([
            fetch('api/get_my_reservations.php?t=' + new Date().getTime()), // On garde l'anti-cache
            fetch('api/get_children.php?t=' + new Date().getTime())
        ]);

        if (!reservationsResponse.ok || !childrenResponse.ok) {
            throw new Error('Erreur réseau lors de la récupération des données.');
        }
        
        // 2. On récupère les résultats des deux appels
        const allReservations = await reservationsResponse.json(); // Contient TOUTES les réservations
        const myChildren = await childrenResponse.json();         // Ne contient que VOS enfants

        // 3. On crée une liste des IDs de VOS enfants pour une recherche rapide
        const myChildrenIds = new Set(myChildren.map(child => child.id));

        // 4. On filtre la liste complète des réservations
        const myReservations = allReservations.filter(reservation => 
            myChildrenIds.has(reservation.enfant_id)
        );

        // 5. On affiche le résultat filtré
        loader.classList.add('hidden');
        listContainer.classList.remove('hidden');

        if (myReservations.length === 0) {
            listContainer.innerHTML = `
                <div class="text-center py-10 bg-white rounded-lg shadow-md border">
                    <p class="text-gray-500">Vous n'avez aucune réservation pour le moment.</p>
                    <a href="index.php" class="mt-4 inline-block bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Trouver un camp</a>
                </div>`;
            return;
        }
        
        let htmlContent = '';
        myReservations.forEach(res => {
            const startDate = res.date_debut ? new Date(res.date_debut).toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' }) : 'Date non définie';
            htmlContent += `
                <div class="bg-white rounded-xl shadow-lg border p-4 flex flex-col sm:flex-row items-center gap-6 transition-all hover:shadow-xl">
                    <img src="${res.camp_image_url}" alt="Image du camp" class="w-full sm:w-32 h-32 object-cover rounded-lg">
                    <div class="flex-grow text-center sm:text-left">
                        <p class="text-xs text-blue-600 font-semibold">INSCRIPTION CONFIRMÉE</p>
                        <h3 class="text-xl font-bold text-gray-800">${res.camp_nom}</h3>
                        <p class="text-gray-600 mt-1">Pour : <strong class="font-medium text-gray-900">${res.enfant_nom}</strong></p>
                        <p class="text-sm text-gray-500">Date de début : ${startDate}</p>
                    </div>
                    <a href="info_inscrit.php?camp_id=${res.camp_id}&child_id=${res.enfant_id}" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg text-sm w-full sm:w-auto">
                        Voir les détails
                    </a>
                </div>
            `;
        });
        listContainer.innerHTML = htmlContent;

    } catch (error) {
        loader.innerHTML = `<p class="text-red-500 font-bold col-span-full text-center py-10">Erreur: ${error.message}</p>`;
    }
});
</script>

</body>
</html> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\add_camp.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $input = json_decode(file_get_contents('php://input'), true);

    $fields = [
        'nom' => $input['nom'],
        'Déscription' => $input['description'],
        'Ville ou se déroule le camp' => $input['ville'],
        'Code Postale' => $input['code_postal'],
        'Adresse exacte du camp' => $input['adresse'],
        'Prix conseillé' => (int)$input['prix'],
        'Age min' => (int)$input['age_min'],
        'Age max' => (int)$input['age_max'],
        'Date début du camp' => $input['date_debut'],
        'Date fin du camp' => $input['date_fin'],
        'illustration' => [['url' => $input['image_url']]],
        'En attente' => true,
        'Validé' => false,
        'Refusé' => false,
        'Vues' => 0,
        'Organisateur' => [$_SESSION['user']['id']]
    ];

    // --- AJOUT DES NOUVEAUX CHAMPS ---

    // Inscription en ligne
    if ($input['inscription_en_ligne']) {
        $fields['Inscription en ligne'] = true;
        $fields['Inscription hors ligne'] = false;
        if (!empty($input['date_limite_inscription'])) {
            $fields["Date limite d'inscription"] = $input['date_limite_inscription'];
        }
        $fields['quota'] = (int)($input['quota_max'] ?? 0);
        $fields['Remise si plusieurs enfants'] = (int)($input['remise'] ?? 0);
        
        // Nouveaux champs
        $fields['Montant libre'] = $input['montant_libre'] ?? false;
        if(!empty($input['quota_fille'])) $fields['MAX FILLE'] = (int)$input['quota_fille'];
        if(!empty($input['quota_garcon'])) $fields['MAX GARCON'] = (int)$input['quota_garcon'];
    } else {
        $fields['Inscription en ligne'] = false;
        $fields['Inscription hors ligne'] = true;
        if (!empty($input['dossier_pdf'])) $fields["dossier d'inscription"] = $input['dossier_pdf'];
        if (!empty($input['adresse_retour'])) $fields['adresse retour dossier'] = $input['adresse_retour'];
    }

    // Tarifs
    if (!empty($input['tarifs'])) {
        $fields['Lien Tarifs'] = $input['tarifs']; // On attend un tableau d'IDs de tarifs
    }

    // Gestion animateur
    $fields['Gestion animateur'] = $input['gestion_animateur'] ?? false;
    if ($fields['Gestion animateur']) {
        if(!empty($input['quota_max_anim'])) $fields['quota max anim'] = (int)$input['quota_max_anim'];
        if(!empty($input['quota_max_anim_fille'])) $fields['quota max anim FILLE'] = (int)$input['quota_max_anim_fille'];
        if(!empty($input['quota_max_anim_garcon'])) $fields['quota max anim GARCON'] = (int)$input['quota_max_anim_garcon'];
        $fields['anim +18'] = $input['anim_majeur'] ?? false;
        if(!empty($input['quota_fille_mineur'])) $fields['quota max anim FILLE -18'] = (int)$input['quota_fille_mineur'];
        if(!empty($input['quota_fille_majeur'])) $fields['quota max anim FILLE +18'] = (int)$input['quota_fille_majeur'];
        if(!empty($input['quota_garcon_mineur'])) $fields['quota max anim GARCON -18'] = (int)$input['quota_garcon_mineur'];
        if(!empty($input['quota_garcon_majeur'])) $fields['quota max anim GARCON +18'] = (int)$input['quota_garcon_majeur'];
        $fields['BAFA ANIM'] = $input['bafa_obligatoire'] ?? false;
        $fields['paiement anim'] = $input['paiement_anim'] ?? false;
        if(!empty($input['prix_anim'])) $fields['prix anim'] = (float)$input['prix_anim'];
        $fields['montant libre anim'] = $input['montant_libre_anim'] ?? false;
        $fields['rémunération anim'] = $input['remuneration_anim'] ?? false;
    }

    $campData = ['fields' => $fields];
    $result = callAirtable('POST', 'Camps', $campData);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur inconnue.");
    }
    
    echo json_encode(['success' => 'Votre camp a été soumis pour approbation !']);
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\add_child.php === 
<?php
// Fichier: /api/add_child.php

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : L'utilisateur doit être connecté.
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé. Vous devez être connecté.']);
    exit;
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

try {
    $input = json_decode(file_get_contents('php://input'), true);

    // Validation des champs obligatoires
    $required_fields = [
        'prenom_enfant', 'nom_enfant', 'date_naissance', 
        'prenom_parent1', 'nom_parent1', 'mail_parent1', 'num_parent1'
    ];
    foreach ($required_fields as $field) {
        if (empty($input[$field])) {
            http_response_code(400);
            echo json_encode(['error' => "Le champ '$field' est obligatoire."]);
            exit;
        }
    }
    
    // Mapping des champs du formulaire vers les noms des colonnes Airtable
    $data = [
        'fields' => [
            'Prénom' => $input['prenom_enfant'],
            'Nom' => $input['nom_enfant'],
            'Date de naissance' => $input['date_naissance'],
            'Sexe' => $input['sexe'] ?? null,
            'num enfant' => $input['num_enfant'] ?? null,
            'Alèrgie' => $input['alergie'] ?? 'Aucune',
            // CORRIGÉ : Le nom du champ a été changé pour correspondre à la base de données.
            'prenom parent 1' => $input['prenom_parent1'],
            'nom parent 1' => $input['nom_parent1'],
            'mail parent 1' => $input['mail_parent1'],
            'num parent 1' => $input['num_parent1'],
            'prenom parent 2' => $input['prenom_parent2'] ?? null,
            'nom parent 2' => $input['nom_parent2'] ?? null,
            'mail parent 2' => $input['mail_parent2'] ?? null,
            'num parent 2' => $input['num_parent2'] ?? null,
            'Parent' => [$_SESSION['user']['id']] // Lie l'enfant au parent connecté
        ]
    ];
    
    // Note: La gestion de l'upload du fichier "copie carnet de santé" n'est pas incluse.
    // L'API Airtable attend une URL pour les pièces jointes.
    // Cela nécessite une étape supplémentaire :
    // 1. Uploader le fichier sur votre propre serveur (ou un service comme S3).
    // 2. Obtenir l'URL publique de ce fichier.
    // 3. Ajouter cette URL au tableau $data['fields']['copie carnet de santé'].

    $result = callAirtable('POST', 'Enfants', $data);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur lors de l'ajout de la fiche enfant.");
    }

    http_response_code(201); // Created
    echo json_encode(['success' => 'La fiche de l\'enfant a été enregistrée avec succès !']);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\config.php === 
<?php
// Fichier: /api/config.php
// Ce fichier contient vos informations secrètes de connexion à Airtable.
// NE PARTAGEZ JAMAIS CE FICHIER OU SON CONTENU.

// Votre "Personal access token" que vous avez généré sur Airtable.
define('AIRTABLE_API_KEY', 'patirCyGLZzXOZQla.dd78066f77fd3b02324df287029066dea37afabe29ce6a261b501bf739b41e53');

// L'ID de votre base de données Airtable (commence par "app...").
define('AIRTABLE_BASE_ID', 'app0AetG6XFed8k2B');

// L'URL de base de l'API Airtable.
define('AIRTABLE_API_URL', 'https://api.airtable.com/v0/');

/**
 * Une fonction simple pour communiquer avec l'API Airtable en utilisant cURL.
 *
 * @param string $method La méthode HTTP (GET, POST, PATCH, DELETE).
 * @param string $table Le nom de la table à interroger.
 * @param array|null $data Les données à envoyer pour les requêtes POST ou PATCH.
 * @param string|null $recordId L'ID de l'enregistrement pour les requêtes sur un seul enregistrement.
 * @return array Le résultat de la requête décodé depuis JSON.
 */
function callAirtable($method, $table, $data = null, $recordId = null) {
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($table);
    if ($recordId) {
        $url .= '/' . $recordId;
    }

    $ch = curl_init();
    $headers = [
        'Authorization: Bearer ' . AIRTABLE_API_KEY,
        'Content-Type: application/json'
    ];

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);

    if (($method === 'POST' || $method === 'PATCH') && $data !== null) {
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    }

    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 200 && $http_code < 300) {
        return json_decode($response, true);
    } else {
        // En cas d'erreur, on peut la logger ou la retourner
        // Pour le débogage, on peut retourner le corps de la réponse d'erreur
        return ['error' => true, 'http_code' => $http_code, 'response' => json_decode($response, true)];
    }
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\create_organisateur.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

try {
    $input = json_decode(file_get_contents('php://input'), true);
    
    $required_fields = ['nom', 'tel', 'mail'];
    foreach($required_fields as $field) {
        if(empty($input[$field])) {
            throw new Exception("Le champ '$field' est obligatoire.");
        }
    }

    $data = [
        'fields' => [
            "Nom de l'organisme" => $input['nom'],
            'Tel' => $input['tel'],
            'Mail' => $input['mail'],
            'Web' => $input['web'] ?? '',
            'Portefeuille' => 0,
            'Liaison' => [$_SESSION['user']['id']]
        ]
    ];

    $result = callAirtable('POST', 'Organisateur', $data);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur lors de la création de l'organisme.");
    }

    http_response_code(201);
    echo json_encode($result);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\create_tarif.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);
$nom = $input['nom'] ?? null;
$prix = $input['prix'] ?? null;
$organisateurId = $input['organisateur_id'] ?? null;
$montantLibre = $input['montant_libre'] ?? false;

if (!$nom || !is_numeric($prix) || !$organisateurId) {
    http_response_code(400);
    echo json_encode(['error' => 'Les champs nom, prix et organisateur sont obligatoires.']);
    exit;
}

try {
    $data = [
        'fields' => [
            'Nom du tarif' => $nom,
            'Prix' => (float)$prix,
            'Lien' => [$organisateurId],
            'Montant Libre' => $montantLibre
        ]
    ];
    $result = callAirtable('POST', 'Tarif', $data);

    if (isset($result['error'])) {
        $errorMessage = $result['response']['error']['message'] ?? 'Erreur inconnue lors de la communication avec Airtable.';
        throw new Exception($errorMessage);
    }
    
    http_response_code(201);
    echo json_encode($result);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\delete_camp.php === 
<?php
// Fichier: /api/delete_camp.php

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// --- SÉCURITÉ ---
// 1. On vérifie la méthode de la requête
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405); // Method Not Allowed
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

// 2. On vérifie que l'utilisateur est connecté et est un directeur
if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403); // Forbidden
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

// 3. On récupère et valide les données d'entrée
$input = json_decode(file_get_contents('php://input'), true);
$campId = $input['id'] ?? null;

if (empty($campId)) {
    http_response_code(400); // Bad Request
    echo json_encode(['error' => 'ID de camp manquant.']);
    exit;
}

try {
    // --- Logique de suppression ---
    $userId = $_SESSION['user']['id'];

    // Étape 1 : Supprimer l'enregistrement du camp de la table "Camps"
    $deleteResult = callAirtable('DELETE', 'Camps', null, $campId);

    if (isset($deleteResult['error'])) {
        // Si la suppression échoue, on arrête tout
        throw new Exception($deleteResult['response']['error']['message'] ?? 'Erreur lors de la suppression du camp.');
    }

    // Étape 2 : Mettre à jour l'enregistrement de l'utilisateur pour enlever le camp supprimé
    // On récupère d'abord l'utilisateur pour avoir sa liste actuelle de camps
    $userRecord = callAirtable('GET', 'User', null, $userId);
    if (isset($userRecord['error'])) {
        // C'est un problème si on ne trouve pas l'utilisateur, mais le camp est déjà supprimé.
        // On log l'erreur mais on peut renvoyer un succès partiel.
        error_log("Camp $campId supprimé mais impossible de trouver l'utilisateur $userId pour le délier.");
        echo json_encode(['success' => true, 'message' => 'Camp supprimé, mais une erreur est survenue lors de la mise à jour de votre profil.']);
        exit;
    }
    
    // On filtre la liste des camps de l'utilisateur pour enlever celui qui a été supprimé
    $existingCamps = $userRecord['fields']['proprio'] ?? [];
    $updatedCamps = array_filter($existingCamps, function($id) use ($campId) {
        return $id !== $campId;
    });

    // On prépare les données pour la mise à jour (PATCH)
    $updateUserData = [
        'fields' => [
            // Il faut s'assurer de redonner un tableau simple (pas associatif) à Airtable
            'proprio' => array_values($updatedCamps) 
        ]
    ];

    // On met à jour l'enregistrement de l'utilisateur
    callAirtable('PATCH', 'User', $updateUserData, $userId);

    // Si tout s'est bien passé
    echo json_encode(['success' => true, 'message' => 'Le camp a été supprimé avec succès.']);

} catch (Exception $e) {
    http_response_code(500); // Internal Server Error
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_accepted_directors.php === 
<?php
// Fichier: /api/get_accepted_directors.php
// Récupère la liste de tous les utilisateurs ayant le statut "Directeur".

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : Seul un admin peut voir cette liste.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $tableName = 'User';
    // On filtre pour ne prendre que les enregistrements où "Directeur" est coché.
    $formula = "{Directeur} = 1";
    
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("Erreur API Airtable."); }

    $result = json_decode($response, true);
    
    $directors = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $directors[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? '',
                'prenom' => $record['fields']['prenom'] ?? '',
                'mail' => $record['fields']['mail'] ?? ''
            ];
        }
    }
    
    echo json_encode($directors);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_camps.php === 
<?php
// Fichier: /api/get_camps.php
// Version finale qui n'affiche que les camps validés et futurs.

header('Content-Type: application/json');
require_once 'config.php';

try {
    $formulaParts = [];
    
    // CONDITION DE BASE : Le camp doit être validé ET sa date de début doit être future.
    $today = date('Y-m-d');
    $formulaParts[] = "IS_AFTER({Date début du camp}, '{$today}')";
    $formulaParts[] = "{Validé} = 1";

    // Filtre par nom
    if (!empty($_GET['name'])) {
        $formulaParts[] = "SEARCH(LOWER('" . addslashes($_GET['name']) . "'), LOWER({nom}))";
    }

    // Filtre par département
    if (!empty($_GET['department'])) {
        $departmentCode = addslashes($_GET['department']);
        $formulaParts[] = "LEFT(TRIM({Code Postale} & ''), 2) = '{$departmentCode}'";
    }

    // Filtre par âge
    if (!empty($_GET['age'])) {
        $age = intval($_GET['age']);
        $formulaParts[] = "AND({Age min} <= {$age}, {Age max} >= {$age})";
    }
    
    // Construit la formule finale avec des AND
    $formula = 'AND(' . implode(', ', $formulaParts) . ')';
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/Camps?filterByFormula=' . urlencode($formula);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) {
        $errorDetails = json_decode($response, true);
        throw new Exception($errorDetails['error']['message'] ?? 'Erreur API.');
    }
    
    $result = json_decode($response, true);
    $final_records = $result['records'] ?? [];

    $camps_response = [];
    foreach ($final_records as $record) {
        $camps_response[] = [
            'id' => $record['id'],
            'nom' => $record['fields']['nom'] ?? 'N/A',
            'ville' => $record['fields']['Ville ou se déroule le camp'] ?? 'N/A',
            'prix' => $record['fields']['Prix conseillé'] ?? 0,
            'age_min' => $record['fields']['Age min'] ?? 0,
            'age_max' => $record['fields']['Age max'] ?? 0,
            'date_debut' => $record['fields']['Date début du camp'] ?? '',
            'image_url' => $record['fields']['illustration'][0]['url'] ?? 'https://placehold.co/600x400'
        ];
    }
    
    echo json_encode($camps_response);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_camp_details.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Validation de l'entrée
if (!isset($_GET['id']) || empty($_GET['id'])) {
    http_response_code(400);
    echo json_encode(['error' => 'ID de camp manquant.']);
    exit;
}

$campId = $_GET['id'];

try {
    // === Étape 1: Récupérer les détails complets du camp ===
    $campRecord = callAirtable('GET', 'Camps', null, $campId);
    if (isset($campRecord['error'])) {
        http_response_code(404);
        echo json_encode(['error' => 'Camp introuvable.']);
        exit;
    }
    $fields = $campRecord['fields'];

    // === Étape 2: Compter les genres des enfants déjà inscrits ===
    $filles_inscrites = 0;
    $garcons_inscrits = 0;
    $registeredChildIds = $fields['Inscrit'] ?? [];

    if (!empty($registeredChildIds)) {
        // On construit une formule pour récupérer le genre de tous les enfants inscrits en une seule requête
        $childFormulaParts = [];
        foreach ($registeredChildIds as $childId) {
            $childFormulaParts[] = "RECORD_ID() = '{$childId}'";
        }
        $childFormula = 'OR(' . implode(', ', $childFormulaParts) . ')';
        
        // On ne demande que le champ "Sexe" pour optimiser
        $childrenRecords = callAirtable('GET', 'Enfants', ['filterByFormula' => $childFormula, 'fields' => ['Sexe']]);

        // On compte les genres à partir de la réponse
        if (isset($childrenRecords['records'])) {
            foreach ($childrenRecords['records'] as $child) {
                if (isset($child['fields']['Sexe'])) {
                    if ($child['fields']['Sexe'] === 'Femme') {
                        $filles_inscrites++;
                    } elseif ($child['fields']['Sexe'] === 'Homme') {
                        $garcons_inscrits++;
                    }
                }
            }
        }
    }

    // === Étape 3: Incrémenter le compteur de vues ===
    // Fait dans un try/catch séparé pour ne pas bloquer la page en cas d'échec
    $currentViews = $fields['Vues'] ?? 0;
    try {
        callAirtable('PATCH', 'Camps', ['fields' => ['Vues' => ($currentViews + 1)]], $campId);
    } catch (Exception $e) {
        // On ignore l'erreur
    }

    // === Étape 4: Calculer les autres statistiques ===
    $likeCount = isset($fields['User Favories']) ? count($fields['User Favories']) : 0;
    $quota = (int)($fields['quota'] ?? 0);
    $inscritsCount = count($registeredChildIds);
    $places_restantes = $quota - $inscritsCount;

    // === Étape 5: Formater la réponse JSON finale avec toutes les informations nécessaires ===
    $campDetails = [
        'id' => $campRecord['id'],
        'nom' => $fields['nom'] ?? 'N/A',
        'description' => nl2br(htmlspecialchars($fields['Déscription'] ?? '')),
        'ville' => $fields['Ville ou se déroule le camp'] ?? 'N/A',
        'prix' => $fields['Prix conseillé'] ?? 0,
        'age_min' => $fields['Age min'] ?? 0,
        'age_max' => $fields['Age max'] ?? 0,
        'date_debut' => $fields['Date début du camp'] ?? null,
        'date_fin' => $fields['Date fin du camp'] ?? null,
        'image_url' => $fields['illustration'][0]['url'] ?? 'https://placehold.co/1200x600',
        'inscription_en_ligne' => $fields['Inscription en ligne'] ?? false,
        'inscription_hors_ligne' => $fields['Inscription hors ligne'] ?? false,
        'pdf_url' => $fields["dossier d'inscription"][0]['url'] ?? null,
        'adresse_retour' => $fields['adresse retour dossier'] ?? null,
        'places_restantes' => $places_restantes,
        'vues' => $currentViews + 1,
        'likes' => $likeCount,
        'organisateur_id' => $fields['Organisme'][0] ?? null,
        'inscrits' => $registeredChildIds, // La liste des IDs bruts des inscrits

        // Données cruciales pour le quota par genre
        'quota_max_filles' => (int)($fields['MAX FILLE'] ?? 0),
        'quota_max_garcons' => (int)($fields['MAX GARCON'] ?? 0),
        'filles_inscrites' => $filles_inscrites,
        'garcons_inscrits' => $garcons_inscrits
    ];

    echo json_encode($campDetails);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_camp_requests.php === 
<?php
// Fichier: /api/get_camp_requests.php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Seul un administrateur peut accéder à cette liste.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403); 
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $tableName = 'Camps';

    // FORMULE DE FILTRE : C'est la ligne la plus importante.
    // Elle récupère uniquement les enregistrements où la case "En attente" est cochée.
    // Assurez-vous que le nom "En attente" correspond EXACTEMENT à votre nom de colonne dans Airtable.
    $formula = "{En attente} = 1"; 
    
    // On construit l'URL avec la formule de filtre.
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) {
        $errorDetails = json_decode($response, true);
        throw new Exception($errorDetails['error']['message'] ?? "Erreur lors de la récupération des demandes de camp.");
    }
    
    $result = json_decode($response, true);
    $requests = [];

    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $requests[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? 'N/A',
                'ville' => $record['fields']['Ville ou se déroule le camp'] ?? 'N/A',
                'code_postal' => $record['fields']['Code Postale'] ?? 'N/A',
                'organisateur_nom' => $record['fields']['Nom Organisateur (from Organisateur)'][0] ?? 'Inconnu'
            ];
        }
    }
    
    echo json_encode($requests);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_camp_request_count.php === 
<?php
// Fichier: /api/get_camp_request_count.php
// Version corrigée pour compter uniquement les camps "En attente".

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Seul un administrateur peut récupérer ce compteur.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    echo json_encode(['count' => 0]);
    exit;
}

try {
    $tableName = 'Camps';
    
    // CORRIGÉ : La formule filtre maintenant les enregistrements pour ne garder que
    // ceux où la case "En attente" est cochée.
    $formula = "{En attente} = 1";
    
    // Pour optimiser la requête, on ne demande qu'un seul champ, car seul le nombre nous intéresse.
    $fields = ['nom']; 
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula) . '&fields%5B%5D=' . rawurlencode($fields[0]);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("API Error"); }
    
    $result = json_decode($response, true);
    
    // On compte le nombre d'enregistrements retournés qui correspondent au filtre.
    $count = isset($result['records']) ? count($result['records']) : 0;
    
    echo json_encode(['count' => $count]);

} catch (Exception $e) {
    // En cas d'erreur, on renvoie simplement 0 pour ne pas casser l'interface.
    echo json_encode(['count' => 0]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_children.php === 
<?php
// Fichier: /api/get_children.php
// VERSION CORRIGÉE ET SÉCURISÉE AVEC LE SEXE

session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];

    // On utilise la formule fiable basée sur l'ID unique.
    $formula = "{Parent_ID_Unique} = '{$userId}'";

    // --- CORRECTION : On ajoute 'Sexe' à la liste des champs demandés ---
    $fields = ['Prénom', 'Date de naissance', 'Inscrit au camp', 'Sexe'];

    // Construction manuelle et directe de l'URL
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode('Enfants') . '?filterByFormula=' . urlencode($formula);
    foreach ($fields as $field) {
        $url .= '&fields%5B%5D=' . rawurlencode($field);
    }

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) {
        throw new Exception("Erreur de communication avec Airtable pour récupérer les enfants.");
    }

    $childrenResult = json_decode($response, true);

    $childrenData = [];
    if (isset($childrenResult['records'])) {
        foreach ($childrenResult['records'] as $record) {
            $dob = $record['fields']['Date de naissance'] ?? null;
            $age = $dob ? (new DateTime($dob))->diff(new DateTime('today'))->y : null;

            $childrenData[] = [
                'id' => $record['id'],
                'prenom' => $record['fields']['Prénom'] ?? 'Enfant',
                'age' => $age,
                'sexe' => $record['fields']['Sexe'] ?? null, // On ajoute le sexe ici
                'registeredCamps' => $record['fields']['Inscrit au camp'] ?? []
            ];
        }
    }

    echo json_encode($childrenData);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_child_eligibility.php === 
<?php
// Fichier: /api/get_child_eligibility.php
// Ce script compare les enfants d'un utilisateur à un camp spécifique
// et retourne leur statut d'éligibilité ainsi que les détails du camp.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité de base
if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
$userId = $_SESSION['user']['id'];

$campId = $_GET['camp_id'] ?? '';
if (empty($campId)) { http_response_code(400); exit; }

try {
    // --- PARTIE 1 : RÉCUPÉRER TOUTES LES DONNÉES NÉCESSAIRES ---

    // 1a. Détails du camp (quotas, inscrits, âges, prix, etc.)
    $campRecord = callAirtable('GET', 'Camps', null, $campId);
    if (isset($campRecord['error'])) { throw new Exception('Camp introuvable.'); }
    $campFields = $campRecord['fields'];
    
    // 1b. Les enfants de l'utilisateur connecté (avec leur sexe)
    $userChildrenFormula = "{Parent_ID_Unique} = '{$userId}'";
    $userChildrenResult = callAirtable('GET', 'Enfants', ['filterByFormula' => $userChildrenFormula, 'fields' => ['Prénom', 'Date de naissance', 'Sexe']]);
    $userChildren = $userChildrenResult['records'] ?? [];

    // On utilise les comptes déjà faits par Airtable (Fille inscrit, Garçon inscrit)
    $filles_inscrites = (int)($campFields['Fille inscrit'] ?? 0);
    $garcons_inscrits = (int)($campFields['Garçon inscrit'] ?? 0);
    $registeredChildIds = $campFields['Inscrit'] ?? [];

    // --- PARTIE 2 : COMPARER CHAQUE ENFANT DE L'UTILISATEUR ET CONSTRUIRE LA RÉPONSE ---

    $eligibilityData = [];
    foreach($userChildren as $child) {
        $childFields = $child['fields'];
        $childAge = isset($childFields['Date de naissance']) ? (new DateTime($childFields['Date de naissance']))->diff(new DateTime('today'))->y : null;
        
        $isSelectable = true;
        $reason = '';

        if (in_array($child['id'], $registeredChildIds)) {
            $isSelectable = false;
            $reason = 'Déjà inscrit';
        } elseif ($childAge < ($campFields['Age min'] ?? 0) || $childAge > ($campFields['Age max'] ?? 99)) {
            $isSelectable = false;
            $reason = 'Âge non compatible';
        } else {
            $quotaFilles = (int)($campFields['MAX FILLE'] ?? 0);
            $quotaGarcons = (int)($campFields['MAX GARCON'] ?? 0);
            
            if (($childFields['Sexe'] ?? '') === 'Femme' && $quotaFilles > 0 && $filles_inscrites >= $quotaFilles) {
                $isSelectable = false;
                $reason = 'Plus de place pour les filles';
            } elseif (($childFields['Sexe'] ?? '') === 'Homme' && $quotaGarcons > 0 && $garcons_inscrits >= $quotaGarcons) {
                $isSelectable = false;
                $reason = 'Plus de place pour les garçons';
            }
        }
        
        $eligibilityData[] = [
            'id' => $child['id'],
            'prenom' => $childFields['Prénom'] ?? 'N/A',
            'age' => $childAge,
            'sexe' => $childFields['Sexe'] ?? 'N/A',
            'isSelectable' => $isSelectable,
            'reason' => $reason
        ];
    }
    
    // On construit la réponse finale qui contient tout ce dont la page a besoin
    $finalResponse = [
        'campData' => [
            'nom' => $campFields['nom'] ?? 'Camp sans nom',
            'prix' => $campFields['Prix conseillé'] ?? 0,
            'remise' => $campFields['Remise si plusieurs enfants'] ?? 0
        ],
        'childrenEligibility' => $eligibilityData
    ];

    echo json_encode($finalResponse);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_conversations.php === 
<?php
// Fichier: /api/get_conversations.php
// Version sécurisée qui personnalise le nom de l'interlocuteur.
session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
$currentUserId = $_SESSION['user']['id'];

try {
    // 1. Récupérer les conversations de l'utilisateur
    $formula = "FIND('{$currentUserId}', ARRAYJOIN({Participants}))";
    $params = ['filterByFormula' => $formula, 'sort' => [['field' => 'Dernière Activité', 'direction' => 'desc']]];
    $conversationsResult = callAirtable('GET', 'Conversations', $params);
    $conversations = $conversationsResult['records'] ?? [];

    if (empty($conversations)) {
        echo json_encode([]);
        exit;
    }

    // 2. Extraire les IDs de tous les autres participants
    $otherUserIds = [];
    foreach ($conversations as $convo) {
        $participants = $convo['fields']['Participants'] ?? [];
        foreach ($participants as $pId) {
            if ($pId !== $currentUserId) {
                $otherUserIds[$pId] = $pId; // Utilise l'ID comme clé pour dédupliquer
            }
        }
    }

    // 3. Récupérer les noms de tous ces autres participants en une seule requête
    $userNames = [];
    if (!empty($otherUserIds)) {
        $userFormulaParts = [];
        foreach ($otherUserIds as $id) {
            $userFormulaParts[] = "RECORD_ID() = '{$id}'";
        }
        $userFormula = 'OR(' . implode(', ', $userFormulaParts) . ')';
        $usersResult = callAirtable('GET', 'User', ['filterByFormula' => $userFormula, 'fields' => ['nom', 'prenom']]);
        
        foreach ($usersResult['records'] as $userRecord) {
            $userNames[$userRecord['id']] = ($userRecord['fields']['prenom'] ?? '') . ' ' . ($userRecord['fields']['nom'] ?? '');
        }
    }
    
    // 4. Formater la réponse finale
    $formattedConversations = [];
    foreach ($conversations as $convo) {
        $participants = $convo['fields']['Participants'] ?? [];
        $otherUserId = null;
        foreach($participants as $pId) { if($pId !== $currentUserId) $otherUserId = $pId; }
        
        // Détermine le nom à afficher
        $displayName = $convo['fields']['Nom']; // Nom par défaut
        if ($otherUserId && isset($userNames[$otherUserId])) {
            $displayName = trim($userNames[$otherUserId]);
        }
        
        $convo['displayName'] = $displayName;
        $formattedConversations[] = $convo;
    }

    echo json_encode($formattedConversations);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_director_requests.php === 
<?php
// Fichier: /api/get_director_requests.php
// Récupère la liste des utilisateurs ayant une demande en cours.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : Seul un admin peut voir cette liste.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $tableName = 'User';
    // On filtre pour ne prendre que les enregistrements où "Demande en cours..." est coché.
    $formula = "{Demande en cours...} = 1";
    
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("Erreur API Airtable."); }
    $result = json_decode($response, true);
    
    $requests = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $requests[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? '',
                'prenom' => $record['fields']['prenom'] ?? '',
                'mail' => $record['fields']['mail'] ?? '',
                'tel' => $record['fields']['numero de tel'] ?? null,
            ];
        }
    }
    
    echo json_encode($requests);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_favorites.php === 
<?php
// Fichier: /api/get_favorites.php
// Récupère les détails des camps favoris d'un utilisateur.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : L'utilisateur doit être connecté.
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $favoriteIds = $_SESSION['user']['favorites'] ?? [];

    if (empty($favoriteIds)) {
        echo json_encode([]); // Renvoie un tableau vide si pas de favoris
        exit;
    }

    // Construire une formule Airtable pour récupérer plusieurs enregistrements par leur ID
    $formulaParts = [];
    foreach ($favoriteIds as $id) {
        $formulaParts[] = "RECORD_ID() = '" . addslashes($id) . "'";
    }
    $formula = 'OR(' . implode(', ', $formulaParts) . ')';

    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/Camps?filterByFormula=' . urlencode($formula);
    
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("Erreur API lors de la récupération des favoris."); }
    
    $result = json_decode($response, true);
    
    $camps = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $camps[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? 'N/A',
                'ville' => $record['fields']['Ville ou se déroule le camp'] ?? 'N/A',
                'prix' => $record['fields']['Prix conseillé'] ?? 0,
                'age_min' => $record['fields']['Age min'] ?? 0,
                'age_max' => $record['fields']['Age max'] ?? 0,
                'date_debut' => $record['fields']['Date début du camp'] ?? '',
                'image_url' => $record['fields']['illustration'][0]['url'] ?? 'https://placehold.co/600x400/e2e8f0/cbd5e0?text=Image'
            ];
        }
    }
    
    echo json_encode($camps);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_inscription_data.php === 
<?php
// Fichier: /api/get_inscription_data.php
// Rassemble toutes les données nécessaires pour la page d'inscription en une seule fois.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité de base
if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
$userId = $_SESSION['user']['id'];

$campId = $_GET['camp_id'] ?? '';
if (empty($campId)) { http_response_code(400); exit; }

try {
    // --- PARTIE 1 : RÉCUPÉRER LES DONNÉES DU CAMP ---
    // Inclus maintenant les quotas et les comptes par genre pré-calculés par Airtable.
    $campRecord = callAirtable('GET', 'Camps', null, $campId);
    if (isset($campRecord['error'])) { throw new Exception('Camp introuvable.'); }
    
    $campFields = $campRecord['fields'];
    $campData = [
        'id' => $campRecord['id'],
        'nom' => $campFields['nom'] ?? 'N/A',
        'prix' => $campFields['Prix conseillé'] ?? 0,
        'remise' => $campFields['Remise si plusieurs enfants'] ?? 0,
        'age_min' => $campFields['Age min'] ?? 0,
        'age_max' => $campFields['Age max'] ?? 99,
        'inscrits' => $campFields['Inscrit'] ?? [],
        'quota_max_filles' => (int)($campFields['MAX FILLE'] ?? 0),
        'quota_max_garcons' => (int)($campFields['MAX GARCON'] ?? 0),
        'filles_inscrites' => (int)($campFields['Fille inscrit'] ?? 0),
        'garcons_inscrits' => (int)($campFields['Garçon inscrit'] ?? 0)
    ];

    // --- PARTIE 2 : RÉCUPÉRER LES ENFANTS DE L'UTILISATEUR CONNECTÉ ---
    $userChildrenFormula = "{Parent_ID_Unique} = '{$userId}'";
    $userChildrenResult = callAirtable('GET', 'Enfants', ['filterByFormula' => $userChildrenFormula, 'fields' => ['Prénom', 'Date de naissance', 'Sexe']]);
    $userChildrenRaw = $userChildrenResult['records'] ?? [];
    
    $childrenData = [];
    foreach($userChildrenRaw as $child) {
        $childFields = $child['fields'];
        $dob = $childFields['Date de naissance'] ?? null;
        $age = $dob ? (new DateTime($dob))->diff(new DateTime('today'))->y : null;
        $childrenData[] = [
            'id' => $child['id'],
            'prenom' => $childFields['Prénom'] ?? 'N/A',
            'age' => $age,
            'sexe' => $childFields['Sexe'] ?? 'N/A'
        ];
    }

    // --- PARTIE 3 : CONSTRUIRE LA RÉPONSE FINALE ---
    $finalResponse = [
        'campData' => $campData,
        'childrenData' => $childrenData
    ];

    echo json_encode($finalResponse);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_inscription_details.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité
if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
$userId = $_SESSION['user']['id'];
$campId = $_GET['camp_id'] ?? '';
$childId = $_GET['child_id'] ?? '';
if (empty($campId) || empty($childId)) { http_response_code(400); exit; }

try {
    // Étape 1 : Vérifier que l'enfant appartient bien à l'utilisateur connecté
    $childRecord = callAirtable('GET', 'Enfants', null, $childId);
    if (isset($childRecord['error']) || !in_array($userId, $childRecord['fields']['Parent'] ?? [])) {
        http_response_code(403);
        echo json_encode(['error' => 'Accès non autorisé à cet enfant.']);
        exit;
    }

    // Étape 2 : Récupérer les détails du camp
    $campRecord = callAirtable('GET', 'Camps', null, $campId);
    if (isset($campRecord['error'])) throw new Exception('Camp introuvable.');

    // Étape 3 : Récupérer les détails de l'organisateur
    $organisateurId = $campRecord['fields']['Organisme'][0] ?? null;
    $organisateurDetails = ['nom' => 'Non spécifié', 'mail' => '', 'tel' => ''];
    if ($organisateurId) {
        $orgRecord = callAirtable('GET', 'Organisateur', null, $organisateurId);
        if (!isset($orgRecord['error'])) {
            $organisateurDetails = [
                'nom' => $orgRecord['fields']['Nom de l\'organisme'] ?? 'N/A',
                'mail' => $orgRecord['fields']['Mail'] ?? 'N/A',
                'tel' => $orgRecord['fields']['Tel'] ?? 'N/A'
            ];
        }
    }

    // Étape 4 : Formater et renvoyer la réponse
    $response = [
        'enfant' => [
            'id' => $childRecord['id'],
            'prenom' => $childRecord['fields']['Prénom'] ?? 'N/A'
        ],
        'camp' => [
            'id' => $campRecord['id'],
            'nom' => $campRecord['fields']['nom'] ?? 'N/A',
            'adresse' => $campRecord['fields']['Adresse exacte du camp'] ?? 'N/A',
            'date_debut' => $campRecord['fields']['Date début du camp'] ?? null
        ],
        'organisateur' => $organisateurDetails
    ];

    echo json_encode($response);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_messages.php === 
<?php
// Fichier: /api/get_messages.php
// Version finale utilisant le champ de recherche d'ID unique

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Vérifie que l'utilisateur est connecté.
if (!isset($_SESSION['user']['id'])) { 
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit; 
}
$userId = $_SESSION['user']['id'];

$conversationId = $_GET['id'] ?? '';
if (empty($conversationId)) { 
    http_response_code(400); 
    echo json_encode(['error' => 'ID de conversation manquant.']);
    exit;
}

try {
    // Étape de sécurité : Vérifier que l'utilisateur fait bien partie de la conversation.
    $convoRecord = callAirtable('GET', 'Conversations', null, $conversationId);
    if (isset($convoRecord['error']) || !in_array($userId, $convoRecord['fields']['Participants'] ?? [])) {
        http_response_code(403);
        echo json_encode(['error' => "Vous n'êtes pas autorisé à voir cette conversation."]);
        exit;
    }

    // On utilise notre champ fiable pour une recherche simple et parfaite.
    $formula = "{Conversation_ID_Unique} = '{$conversationId}'";
    
    // Paramètres de la requête : on trie par "Date d'envoi" en ordre ascendant.
    $params = [
        'filterByFormula' => $formula,
        'sort' => [['field' => "Date d'envoi", 'direction' => 'asc']]
    ];
    
    // Appel à l'API pour récupérer les messages triés.
    $result = callAirtable('GET', 'Messages', $params);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur lors de la récupération des messages.");
    }

    echo json_encode($result['records'] ?? []);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_my_camps.php === 
<?php
// Fichier: /api/get_my_camps.php
// Version qui utilise la nouvelle colonne "proprio" pour plus d'efficacité.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité
if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];
    
    // 1. Récupérer l'enregistrement de l'utilisateur
    $userRecord = callAirtable('GET', 'User', null, $userId);

    // Si l'utilisateur n'a pas de camps ou que la colonne "proprio" est vide
    if (!isset($userRecord['fields']['proprio'])) {
        echo json_encode([]); // On retourne un tableau vide
        exit;
    }

    $myCampsIds = $userRecord['fields']['proprio'];

    if (empty($myCampsIds)) {
        echo json_encode([]);
        exit;
    }

    // 2. Construire une formule pour récupérer tous les camps liés en une seule requête
    $formulaParts = [];
    foreach ($myCampsIds as $campId) {
        $formulaParts[] = "RECORD_ID() = '" . $campId . "'";
    }
    $formula = 'OR(' . implode(', ', $formulaParts) . ')';

    // 3. Récupérer les détails des camps depuis la table 'Camps'
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/Camps?filterByFormula=' . urlencode($formula);
    
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    curl_close($ch);

    $result = json_decode($response, true);
    
    $camps = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $camps[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? 'Camp sans nom'
            ];
        }
    }
    
    echo json_encode($camps);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_my_reservations.php === 
<?php
// Fichier: /api/get_my_reservations.php
// Version finale sécurisée, basée sur la logique de get_children.php qui fonctionne.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// --- SÉCURITÉ ---
// On s'assure qu'un utilisateur est bien connecté.
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    // === PARTIE 1 : RÉCUPÉRER LES ENFANTS DE L'UTILISATEUR (La méthode qui fonctionne) ===
    $userId = $_SESSION['user']['id'];
    $formula_children = "{Parent_ID_Unique} = '{$userId}'";
    $fields_children = ['Prénom', 'Inscrit au camp'];

    // On construit l'URL pour la requête des enfants
    $url_children = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode('Enfants') . '?filterByFormula=' . urlencode($formula_children);
    foreach ($fields_children as $field) {
        $url_children .= '&fields%5B%5D=' . rawurlencode($field);
    }

    // On exécute la requête pour obtenir la liste des enfants de l'utilisateur
    $ch_children = curl_init($url_children);
    curl_setopt($ch_children, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch_children, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response_children = curl_exec($ch_children);
    $http_code_children = curl_getinfo($ch_children, CURLINFO_HTTP_CODE);
    curl_close($ch_children);

    if ($http_code_children >= 300) {
        throw new Exception("Erreur Airtable en récupérant la liste des enfants.");
    }

    $childrenResult = json_decode($response_children, true);
    $childrenRecords = $childrenResult['records'] ?? [];

    // Si l'utilisateur n'a pas d'enfant, on s'arrête là.
    if (empty($childrenRecords)) {
        echo json_encode([]);
        exit;
    }

    // === PARTIE 2 : COLLECTER LES IDs DE CAMPS ET RÉCUPÉRER LEURS DÉTAILS ===
    $campIdsToFetch = [];
    foreach ($childrenRecords as $child) {
        if (!empty($child['fields']['Inscrit au camp'])) {
            foreach ($child['fields']['Inscrit au camp'] as $campId) {
                $campIdsToFetch[$campId] = true;
            }
        }
    }
    $uniqueCampIds = array_keys($campIdsToFetch);

    // Si les enfants ne sont inscrits à aucun camp, on s'arrête.
    if (empty($uniqueCampIds)) {
        echo json_encode([]);
        exit;
    }

    // On prépare la requête pour récupérer les détails de tous les camps nécessaires en un seul appel.
    $formula_camps_parts = [];
    foreach ($uniqueCampIds as $id) {
        $formula_camps_parts[] = "RECORD_ID() = '{$id}'";
    }
    $formula_camps = 'OR(' . implode(', ', $formula_camps_parts) . ')';

    $url_camps = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode('Camps') . '?filterByFormula=' . urlencode($formula_camps);

    $ch_camps = curl_init($url_camps);
    curl_setopt($ch_camps, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch_camps, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response_camps = curl_exec($ch_camps);
    $http_code_camps = curl_getinfo($ch_camps, CURLINFO_HTTP_CODE);
    curl_close($ch_camps);

    if ($http_code_camps >= 300) {
        throw new Exception("Erreur Airtable en récupérant les détails des camps.");
    }
    
    $campsResult = json_decode($response_camps, true);
    $campsDetails = [];
    foreach ($campsResult['records'] as $camp) {
        $campsDetails[$camp['id']] = [
            'camp_nom' => $camp['fields']['nom'] ?? 'N/A',
            'camp_image_url' => $camp['fields']['illustration'][0]['url'] ?? 'https://placehold.co/600x400',
            'date_debut' => $camp['fields']['Date début du camp'] ?? null
        ];
    }
    
    // === PARTIE 3 : ASSEMBLER LA LISTE FINALE DES RÉSERVATIONS ===
    $finalReservations = [];
    foreach ($childrenRecords as $child) {
        $childName = $child['fields']['Prénom'] ?? 'Enfant';
        $registeredCamps = $child['fields']['Inscrit au camp'] ?? [];
        foreach ($registeredCamps as $campId) {
            if (isset($campsDetails[$campId])) {
                $finalReservations[] = [
                    'camp_id' => $campId, 'enfant_id' => $child['id'], 'enfant_nom' => $childName,
                    'camp_nom' => $campsDetails[$campId]['camp_nom'], 'camp_image_url' => $campsDetails[$campId]['camp_image_url'],
                    'date_debut' => $campsDetails[$campId]['date_debut']
                ];
            }
        }
    }
    
    usort($finalReservations, function($a, $b) {
        $timeA = isset($a['date_debut']) ? strtotime($a['date_debut']) : 0;
        $timeB = isset($b['date_debut']) ? strtotime($b['date_debut']) : 0;
        return $timeA - $timeB;
    });

    echo json_encode($finalReservations);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_my_reservations2.php === 
<?php
// Fichier: /api/get_my_reservations2.php
// Version de test dans un nouveau fichier pour éviter le cache.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];
    
    // On utilise la formule qui a été prouvée correcte par le débogage.
    $formula = "{Parent_ID_Unique} = '{$userId}'";

    $params = [
        'filterByFormula' => $formula,
        'fields' => ['Prénom', 'Inscrit au camp']
    ];
    $childrenResult = callAirtable('GET', 'Enfants', $params);

    if (isset($childrenResult['error'])) {
        throw new Exception("Erreur Airtable.");
    }
    $childrenRecords = $childrenResult['records'] ?? [];

    if (empty($childrenRecords)) {
        echo json_encode([]); 
        exit;
    }

    $campIdsToFetch = [];
    foreach ($childrenRecords as $child) {
        if (!empty($child['fields']['Inscrit au camp'])) {
            foreach ($child['fields']['Inscrit au camp'] as $campId) {
                $campIdsToFetch[$campId] = true;
            }
        }
    }
    $uniqueCampIds = array_keys($campIdsToFetch);

    if (empty($uniqueCampIds)) {
        echo json_encode([]); 
        exit;
    }

    $campFormulaParts = [];
    foreach ($uniqueCampIds as $id) { $campFormulaParts[] = "RECORD_ID() = '{$id}'"; }
    $campFormula = 'OR(' . implode(', ', $campFormulaParts) . ')';
    $campsResult = callAirtable('GET', 'Camps', ['filterByFormula' => $campFormula]);

    $campsDetails = [];
    foreach ($campsResult['records'] as $camp) {
        $campsDetails[$camp['id']] = [
            'camp_nom' => $camp['fields']['nom'] ?? 'N/A',
            'camp_image_url' => $camp['fields']['illustration'][0]['url'] ?? 'https://placehold.co/600x400',
            'date_debut' => $camp['fields']['Date début du camp'] ?? null
        ];
    }
    
    $finalReservations = [];
    foreach ($childrenRecords as $child) {
        $childName = $child['fields']['Prénom'] ?? 'Enfant';
        $registeredCamps = $child['fields']['Inscrit au camp'] ?? [];
        foreach ($registeredCamps as $campId) {
            if (isset($campsDetails[$campId])) {
                $finalReservations[] = [
                    'camp_id' => $campId, 'enfant_id' => $child['id'], 'enfant_nom' => $childName,
                    'camp_nom' => $campsDetails[$campId]['camp_nom'], 'camp_image_url' => $campsDetails[$campId]['camp_image_url'],
                    'date_debut' => $campsDetails[$campId]['date_debut']
                ];
            }
        }
    }
    
    usort($finalReservations, function($a, $b) {
        $timeA = isset($a['date_debut']) ? strtotime($a['date_debut']) : 0;
        $timeB = isset($b['date_debut']) ? strtotime($b['date_debut']) : 0;
        return $timeA - $timeB;
    });

    echo json_encode($finalReservations);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_organisateurs.php === 
<?php
// Fichier: /api/get_organisateurs.php
// Nouvelle version qui récupère les organismes via la table User pour plus de fiabilité.

// --- DÉBUT DU BLOC DE DÉBOGAGE ---
error_reporting(E_ALL);
ini_set('display_errors', 1);
// --- FIN DU BLOC DE DÉBOGAGE ---

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : l'utilisateur doit être un directeur connecté.
if (!isset($_SESSION['user']['id']) || !$_SESSION['user']['is_directeur']) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];
    
    // --- Étape 1: Récupérer l'enregistrement de l'utilisateur pour trouver les organismes liés ---
    $userRecord = callAirtable('GET', 'User', null, $userId);

    if (isset($userRecord['error'])) {
        throw new Exception("Impossible de récupérer les informations de l'utilisateur.");
    }

    // --- Étape 2: Extraire les IDs des organismes liés à cet utilisateur ---
    // Assurez-vous que le nom de la colonne dans votre table "User" est bien "Organisateur".
    $organisateurIds = $userRecord['fields']['Organisateur'] ?? [];

    if (empty($organisateurIds)) {
        // Si l'utilisateur n'est lié à aucun organisme, on renvoie un tableau vide.
        echo json_encode([]);
        exit;
    }

    // --- Étape 3: Construire une formule pour récupérer les détails de chaque organisme lié ---
    $formulaParts = [];
    foreach ($organisateurIds as $id) {
        $formulaParts[] = "RECORD_ID() = '{$id}'";
    }
    $formula = 'OR(' . implode(', ', $formulaParts) . ')';
    
    // --- Étape 4: Récupérer les détails des organismes en construisant l'URL manuellement ---
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/Organisateur?filterByFormula=' . urlencode($formula);
    
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($http_code >= 300) {
        throw new Exception("Impossible de récupérer les détails des organismes.");
    }

    $result = json_decode($response, true);

    // --- Étape 5: Formater la réponse finale ---
    $organisateurs = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            // On vérifie maintenant l'existence de chaque champ avec des '??' pour plus de sécurité.
            $organisateurs[] = [
                'id' => $record['id'],
                'nom' => $record['fields']["Nom de l'organisme"] ?? 'N/A',
                'tel' => $record['fields']['Tel'] ?? '',
                'mail' => $record['fields']['Mail'] ?? '',
                'web' => $record['fields']['Web'] ?? '',
                'portefeuille' => $record['fields']['Portefeuille'] ?? 0,
                // Assurez-vous que le nom du champ "Lookup" est correct ici.
                'camps' => $record['fields']['Nom (from Camp)'] ?? [] 
            ];
        }
    }
    
    echo json_encode($organisateurs);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_refused_camps.php === 
<?php
// Fichier: /api/get_refused_camps.php
// Version fiabilisée pour récupérer uniquement les camps refusés.

// Active l'affichage des erreurs pour le débogage.
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Seul un administrateur peut accéder à cette liste.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $tableName = 'Camps';

    // Formule pour ne récupérer que les camps où la case "Refusé" est cochée.
    // Assurez-vous que le nom du champ "Refusé" est exact dans votre base Airtable.
    $formula = "{Refusé} = 1";
    
    // On construit l'URL avec la formule de filtre.
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);
    
    // Appel direct à l'API pour un meilleur contrôle.
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) {
        $errorDetails = json_decode($response, true);
        throw new Exception($errorDetails['error']['message'] ?? "Erreur lors de la récupération des camps refusés.");
    }
    
    $result = json_decode($response, true);
    
    $camps = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            // On s'assure que chaque champ a une valeur par défaut pour éviter les erreurs "undefined".
            $camps[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? 'Camp sans nom',
                'ville' => $record['fields']['Ville ou se déroule le camp'] ?? 'Ville non précisée'
            ];
        }
    }
    
    echo json_encode($camps);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_refused_requests.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Seul un administrateur peut accéder à cette liste.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

try {
    $tableName = 'Camps';
    // Formule pour ne récupérer que les camps où la case "Refusé" est cochée.
    $formula = "{Refusé} = 1";
    
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);
    
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) {
        throw new Exception("Erreur API lors de la récupération des camps refusés.");
    }
    
    $result = json_decode($response, true);
    
    $camps = [];
    if (isset($result['records'])) {
        foreach ($result['records'] as $record) {
            $camps[] = [
                'id' => $record['id'],
                'nom' => $record['fields']['nom'] ?? 'N/A',
                'ville' => $record['fields']['Ville ou se déroule le camp'] ?? 'N/A',
                'organisateur_nom' => $record['fields']['Nom Organisateur (from Organisateur)'][0] ?? 'Inconnu'
            ];
        }
    }
    
    echo json_encode($camps);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_request_count.php === 
<?php
// Fichier: /api/get_request_count.php
// Récupère le nombre de demandes d'accès directeur en attente.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : Seul un administrateur peut récupérer ce compteur.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    // Si l'utilisateur n'est pas un admin, on renvoie 0 pour ne pas afficher de notification.
    echo json_encode(['count' => 0]);
    exit;
}

try {
    $tableName = 'User';
    // On filtre les enregistrements où la case "Demande en cours..." est cochée.
    $formula = "{Demande en cours...} = 1";
    
    // Pour optimiser, on ne demande qu'un seul champ, car on n'a besoin que du nombre d'enregistrements.
    $fields = ['nom']; 
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula) . '&fields%5B%5D=' . rawurlencode($fields[0]);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("API Error"); }
    
    $result = json_decode($response, true);
    
    // On compte le nombre d'enregistrements retournés par la requête.
    $count = isset($result['records']) ? count($result['records']) : 0;
    
    echo json_encode(['count' => $count]);

} catch (Exception $e) {
    // En cas d'erreur (ex: API Airtable inaccessible), on renvoie 0.
    echo json_encode(['count' => 0]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_tarifs_by_organisateur.php === 
<?php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

// Sécurité : on vérifie juste que l'utilisateur est connecté
if (!isset($_SESSION['user']['id'])) { 
    http_response_code(403); 
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit; 
}

try {
    // On ne filtre plus, on récupère TOUT depuis la table "Tarif"
    $result = callAirtable('GET', 'Tarif');

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? 'Erreur Airtable');
    }

    // On renvoie tous les enregistrements
    echo json_encode($result['records'] ?? []);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\get_unread_messages_count.php === 
<?php
// Fichier: /api/get_unread_messages_count.php
// Compte le nombre de conversations non lues pour l'utilisateur connecté.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// On vérifie que l'utilisateur est connecté.
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['count' => 0]);
    exit;
}
$userId = $_SESSION['user']['id'];

try {
    // La formule recherche l'ID de l'utilisateur dans le champ "Non lus par".
    $formula = "FIND('{$userId}', ARRAYJOIN({Non lus par}))";
    
    // On optimise la requête en ne demandant qu'un seul champ, car seul le nombre nous intéresse.
    $params = ['filterByFormula' => $formula, 'fields' => ['Nom']];
    
    $result = callAirtable('GET', 'Conversations', $params);
    
    if (isset($result['error'])) {
        throw new Exception('Erreur API lors de la récupération du compteur.');
    }

    $count = isset($result['records']) ? count($result['records']) : 0;
    echo json_encode(['count' => $count]);

} catch (Exception $e) {
    // En cas d'erreur, on renvoie 0 pour ne pas afficher de badge d'erreur.
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage(), 'count' => 0]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\logout.php === 
<?php
// Fichier: /api/logout.php

session_start(); // On récupère la session existante

// On détruit toutes les variables de session
$_SESSION = [];

// On détruit la session elle-même
session_destroy();

// On redirige l'utilisateur vers la page d'accueil
header('Location: ../index.php');
exit;
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\mark_conversation_as_read.php === 
<?php
// Fichier: /api/mark_conversation_as_read.php
// Retire l'utilisateur courant de la liste "Non lus par" pour une conversation donnée.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
if ($_SERVER['REQUEST_METHOD'] !== 'POST') { http_response_code(405); exit; }

$input = json_decode(file_get_contents('php://input'), true);
$conversationId = $input['conversationId'] ?? null;
$userId = $_SESSION['user']['id'];

if (empty($conversationId)) { http_response_code(400); exit; }

try {
    // 1. Récupérer la conversation pour connaître la liste "Non lus par" actuelle.
    $convoRecord = callAirtable('GET', 'Conversations', null, $conversationId);
    if (isset($convoRecord['error'])) throw new Exception('Conversation introuvable.');

    $unreadBy = $convoRecord['fields']['Non lus par'] ?? [];

    // 2. Si l'utilisateur est dans la liste, on le retire.
    if (in_array($userId, $unreadBy)) {
        $newUnreadBy = array_filter($unreadBy, function($participantId) use ($userId) {
            return $participantId !== $userId;
        });

        // 3. On met à jour la conversation avec la nouvelle liste.
        $updateData = ['fields' => ['Non lus par' => array_values($newUnreadBy)]];
        callAirtable('PATCH', 'Conversations', $updateData, $conversationId);
    }
    
    echo json_encode(['success' => true]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\process_camp_request.php === 
<?php
// Fichier: /api/process_camp_request.php
session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403); exit;
}
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405); exit;
}

$input = json_decode(file_get_contents('php://input'), true);
$campId = $input['campId'] ?? null;
$action = $input['action'] ?? null;

if (!$campId || !$action || !in_array($action, ['approve', 'deny'])) {
    http_response_code(400); 
    echo json_encode(['error' => 'Action ou ID de camp invalide.']);
    exit;
}

try {
    if ($action === 'approve') {
        // Approuver : on coche "Validé" et on décoche "En attente"
        $updateData = [
            'fields' => [
                'Validé' => true,
                'En attente' => false,
                'Refusé' => false
            ]
        ];
        callAirtable('PATCH', 'Camps', $updateData, $campId);

        // On lie aussi le camp au profil du directeur pour qu'il puisse le gérer
        $campRecord = callAirtable('GET', 'Camps', null, $campId);
        if (!isset($campRecord['error']) && isset($campRecord['fields']['Organisateur'][0])) {
            $organizerId = $campRecord['fields']['Organisateur'][0];
            $userRecord = callAirtable('GET', 'User', null, $organizerId);
            $existingCamps = $userRecord['fields']['proprio'] ?? [];
            $existingCamps[] = $campId;
            callAirtable('PATCH', 'User', ['fields' => ['proprio' => array_values(array_unique($existingCamps))]], $organizerId);
        }

    } elseif ($action === 'deny') {
        // Refuser : on coche "Refusé" et on décoche "En attente"
        $updateData = [
            'fields' => [
                'Refusé' => true,
                'En attente' => false,
                'Validé' => false
            ]
        ];
        callAirtable('PATCH', 'Camps', $updateData, $campId);
    }
    
    echo json_encode(['success' => true]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\process_inscription.php === 
<?php
// Fichier: /api/process_inscription.php
// Gère la validation finale de l'inscription, met à jour les données et les portefeuilles.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// --- Sécurité et validation des entrées ---
if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
if ($_SERVER['REQUEST_METHOD'] !== 'POST') { http_response_code(405); exit; }

$input = json_decode(file_get_contents('php://input'), true);
$campId = $input['campId'] ?? null;
$childIds = $input['childIds'] ?? [];
$finalPrice = (float)($input['finalPrice'] ?? 0);

if (empty($campId) || empty($childIds) || $finalPrice <= 0) {
    http_response_code(400);
    echo json_encode(['error' => 'Données de réservation invalides.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];
    $userFullName = $_SESSION['user']['prenom'] . ' ' . $_SESSION['user']['nom'];

    // --- Étape 1: Mettre à jour la fiche de chaque enfant ---
    foreach ($childIds as $childId) {
        // On récupère d'abord la fiche de l'enfant pour ne pas écraser ses inscriptions existantes.
        $childRecord = callAirtable('GET', 'Enfants', null, $childId);
        if (isset($childRecord['error'])) continue; // Passe à l'enfant suivant en cas d'erreur

        $currentCamps = $childRecord['fields']['Inscrit au camp'] ?? [];
        $currentCamps[] = $campId; // Ajoute le nouveau camp

        $updateChildData = ['fields' => ['Inscrit au camp' => array_unique($currentCamps)]];
        callAirtable('PATCH', 'Enfants', $updateChildData, $childId);
    }
    
    // --- Étape 2: Récupérer les infos du camp et de l'organisateur ---
    $campRecord = callAirtable('GET', 'Camps', null, $campId);
    if (isset($campRecord['error'])) throw new Exception("Camp introuvable.");
    
    $organisateurId = $campRecord['fields']['Organisme'][0] ?? null;
    if (!$organisateurId) throw new Exception("Organisateur non défini pour ce camp.");
    
    $organisateurRecord = callAirtable('GET', 'Organisateur', null, $organisateurId);
    if (isset($organisateurRecord['error'])) throw new Exception("Organisateur introuvable.");

    // --- Étape 3: Mettre à jour le camp avec la nouvelle liste d'inscrits ---
    $currentInscrits = $campRecord['fields']['Inscrit'] ?? [];
    $newInscrits = array_unique(array_merge($currentInscrits, $childIds));
    callAirtable('PATCH', 'Camps', ['fields' => ['Inscrit' => $newInscrits]], $campId);

    // --- Étape 4: Gérer la transaction financière ---
    $commissionRate = 0.03; // 3%
    $commissionAmount = $finalPrice * $commissionRate;
    $organizerEarnings = $finalPrice - $commissionAmount;

    // Mise à jour du portefeuille de l'organisateur
    $currentWallet = (float)($organisateurRecord['fields']['Portefeuille'] ?? 0);
    $newWallet = $currentWallet + $organizerEarnings;
    callAirtable('PATCH', 'Organisateur', ['fields' => ['Portefeuille' => $newWallet]], $organisateurId);

    // --- Étape 5: Enregistrer la commission ---
    $commissionName = "Commission 3% - {$campRecord['fields']['nom']} / {$userFullName}";
    $commissionData = [
        'fields' => [
            'Nom' => $commissionName,
            'Revenue' => $commissionAmount,
            'Camp' => [$campId],
            'Organisateur' => [$organisateurId],
            'Parent' => [$userId]
        ]
    ];
    callAirtable('POST', 'Commission', $commissionData);

    echo json_encode(['success' => true]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\process_request.php === 
<?php
// Fichier: /api/process_request.php
// Traite une demande d'accès (accepter ou refuser).

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : Seul un admin peut faire cette action.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);
$userId = $input['userId'] ?? null;
$action = $input['action'] ?? null;

if (!$userId || !$action || !in_array($action, ['accept', 'refuse'])) {
    http_response_code(400);
    echo json_encode(['error' => 'Données invalides.']);
    exit;
}

try {
    $updateData = [];
    if ($action === 'accept') {
        $updateData = [
            'fields' => [
                'Directeur' => true,
                'Demande en cours...' => false,
                'Refusé' => false,
            ]
        ];
    } else { // 'refuse'
        $updateData = [
            'fields' => [
                'Directeur' => false,
                'Demande en cours...' => false,
                'Refusé' => true,
            ]
        ];
    }
    
    $result = callAirtable('PATCH', 'User', $updateData, $userId);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur lors de la mise à jour de l'utilisateur.");
    }
    
    echo json_encode(['success' => true]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\request_director_access.php === 
<?php
// Fichier: /api/request_director_access.php

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// --- SÉCURITÉ ---
// 1. L'utilisateur doit être connecté
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403); // Forbidden
    echo json_encode(['error' => 'Vous devez être connecté pour faire cette demande.']);
    exit;
}

// 2. La méthode doit être POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405); // Method Not Allowed
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

try {
    $userId = $_SESSION['user']['id'];

    // Préparer les données pour mettre à jour la case à cocher dans Airtable
    $updateData = [
        'fields' => [
            // Assurez-vous que le nom du champ "Demande en cours..." est exact
            'Demande en cours...' => true
        ]
    ];

    // Appeler Airtable pour mettre à jour l'enregistrement de l'utilisateur
    $result = callAirtable('PATCH', 'User', $updateData, $userId);

    if (isset($result['error'])) {
        throw new Exception($result['response']['error']['message'] ?? "Erreur lors de la communication avec la base de données.");
    }

    // Mettre à jour la session pour que l'utilisateur n'ait plus à refaire la demande
    $_SESSION['user']['demande_en_cours'] = true;

    // Renvoyer une réponse de succès
    echo json_encode(['success' => 'Votre demande a été envoyée avec succès ! Notre équipe vous répondra bientôt.']);

} catch (Exception $e) {
    http_response_code(500); // Internal Server Error
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\requeue_camp.php === 
<?php
// Fichier: /api/requeue_camp.php
// Version de débogage pour identifier les erreurs serveur.

// --- DÉBUT DU BLOC DE DÉBOGAGE ---
// Ces lignes forcent l'affichage de toutes les erreurs PHP.
// Elles sont très utiles pour comprendre pourquoi un script ne fonctionne pas.
error_reporting(E_ALL);
ini_set('display_errors', 1);
// --- FIN DU BLOC DE DÉBOGAGE ---

session_start();
header('Content-Type: application/json');

// On s'assure que le fichier config.php est bien inclus.
// Si le chemin est incorrect, le bloc de débogage ci-dessus affichera une erreur.
require_once 'config.php';

// Sécurité : Seul un administrateur peut effectuer cette action.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    http_response_code(403);
    echo json_encode(['error' => 'Accès non autorisé.']);
    exit;
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);
$campId = $input['campId'] ?? null;

if (empty($campId)) {
    http_response_code(400);
    echo json_encode(['error' => 'ID de camp manquant.']);
    exit;
}

try {
    // Préparer les données pour la mise à jour
    $updateData = [
        'fields' => [
            'Refusé' => false,     // On décoche la case "Refusé"
            'En attente' => true  // On coche la case "En attente"
        ]
    ];

    // Mettre à jour l'enregistrement du camp dans Airtable
    $result = callAirtable('PATCH', 'Camps', $updateData, $campId);

    if (isset($result['error'])) {
        // Si Airtable renvoie une erreur, on la transmet au client pour le débogage.
        $errorMessage = $result['response']['error']['message'] ?? "Erreur lors de la mise à jour du statut du camp.";
        throw new Exception($errorMessage);
    }
    
    echo json_encode(['success' => true, 'message' => 'Le camp a été remis en attente.']);

} catch (Exception $e) {
    http_response_code(500);
    // On renvoie le message d'erreur exact pour aider au débogage.
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\send_message.php === 
<?php
// Fichier: /api/send_message.php
// Version mise à jour pour gérer le statut "non lu"

session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }
if ($_SERVER['REQUEST_METHOD'] !== 'POST') { http_response_code(405); exit; }

$input = json_decode(file_get_contents('php://input'), true);
$conversationId = $input['conversationId'] ?? null;
$content = $input['content'] ?? '';
$userId = $_SESSION['user']['id'];

if (empty($conversationId) || empty(trim($content))) { http_response_code(400); exit; }

try {
    // 1. On envoie le message (logique existante)
    $messageData = [
        'fields' => [
            'Contenu' => $content,
            'Auteur' => [$userId],
            'Conversation' => [$conversationId]
        ]
    ];
    $result = callAirtable('POST', 'Messages', $messageData);
    if(isset($result['error'])) throw new Exception('Erreur Airtable lors de l\'envoi du message');

    // --- NOUVELLE LOGIQUE ---
    // 2. On met à jour la conversation pour notifier les autres participants.
    
    // On récupère les détails de la conversation pour connaître les participants.
    $convoRecord = callAirtable('GET', 'Conversations', null, $conversationId);
    if (isset($convoRecord['error'])) throw new Exception('Impossible de trouver la conversation à mettre à jour.');

    $participants = $convoRecord['fields']['Participants'] ?? [];

    // On crée la liste des personnes qui n'ont pas encore lu le message (tous sauf l'expéditeur).
    $unreadBy = array_filter($participants, function($participantId) use ($userId) {
        return $participantId !== $userId;
    });

    // On met à jour la conversation avec la liste "Non lus par" et la date de dernière activité.
    $updateConvoData = [
        'fields' => [
            'Non lus par' => array_values($unreadBy), // La liste des autres participants
            'Dernière Activité' => date('c') // Met à jour le champ de tri
        ]
    ];
    callAirtable('PATCH', 'Conversations', $updateConvoData, $conversationId);
    
    echo json_encode(['success' => true]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\start_conversation.php === 
<?php
// Fichier: /api/start_conversation.php
// Version sécurisée qui crée une conversation privée entre un parent et un directeur.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) { http_response_code(403); exit; }

$input = json_decode(file_get_contents('php://input'), true);
$organisateurId = $input['organisateurId'] ?? null;
if (empty($organisateurId)) { http_response_code(400); exit; }

$parentId = $_SESSION['user']['id'];
$parentName = $_SESSION['user']['prenom'] . ' ' . $_SESSION['user']['nom'];

try {
    // Étape 1: Récupérer les informations de l'organisme pour trouver le directeur.
    $orgRecord = callAirtable('GET', 'Organisateur', null, $organisateurId);
    if (isset($orgRecord['error'])) throw new Exception("Organisateur introuvable.");

    $directorId = $orgRecord['fields']['Liaison'][0] ?? null;
    if (!$directorId) throw new Exception("Le directeur de cet organisme n'est pas défini.");

    // Le parent ne peut pas se contacter lui-même.
    if ($parentId === $directorId) {
        throw new Exception("Vous ne pouvez pas démarrer une conversation avec vous-même.");
    }
    
    // Étape 2: Créer une nouvelle conversation.
    $orgName = $orgRecord['fields']['Nom de l\'organisme'] ?? 'Organisateur';
    
    // Le nom de la conversation est maintenant plus descriptif.
    $conversationName = "{$parentName} / {$orgName}";

    $conversationData = [
        'fields' => [
            'Nom' => $conversationName,
            'Participants' => [$parentId, $directorId], // Lie le parent et le directeur
            'Organisme' => [$organisateurId]
        ]
    ];
    
    $newConversation = callAirtable('POST', 'Conversations', $conversationData);
    if (isset($newConversation['error'])) {
        throw new Exception($newConversation['response']['error']['message'] ?? 'Erreur Airtable lors de la création.');
    }

    echo json_encode(['conversationId' => $newConversation['id']]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\test_final_api.php === 
<?php
// Test final et minimaliste
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();
require_once 'config.php';

if (!isset($_SESSION['user']['id'])) {
    die("ERREUR: Session utilisateur non trouvée.");
}

$userId = $_SESSION['user']['id'];
$formula = "{Parent_ID_Unique} = '{$userId}'";

$params = [
    'filterByFormula' => $formula
];

// Appel direct et affichage brut
$result = callAirtable('GET', 'Enfants', $params);

header('Content-Type: application/json');
echo json_encode($result);
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\toggle_favorite.php === 
<?php
// Fichier: /api/toggle_favorite.php
// Ajoute ou supprime un camp des favoris d'un utilisateur.

session_start();
header('Content-Type: application/json');
require_once 'config.php';

// SÉCURITÉ : L'utilisateur doit être connecté.
if (!isset($_SESSION['user']['id'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Vous devez être connecté pour gérer vos favoris.']);
    exit;
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée.']);
    exit;
}

try {
    $input = json_decode(file_get_contents('php://input'), true);
    $campId = $input['campId'] ?? null;

    if (empty($campId)) {
        http_response_code(400);
        echo json_encode(['error' => 'ID de camp manquant.']);
        exit;
    }

    $userId = $_SESSION['user']['id'];
    
    // Étape 1 : Récupérer les favoris actuels de l'utilisateur
    $userRecord = callAirtable('GET', 'User', null, $userId);
    if (isset($userRecord['error'])) {
        throw new Exception("Impossible de récupérer les informations de l'utilisateur.");
    }
    $currentFavorites = $userRecord['fields']['Favories'] ?? [];
    
    $isFavorited = in_array($campId, $currentFavorites);
    $newFavorites = [];

    // Étape 2 : Ajouter ou supprimer le camp de la liste
    if ($isFavorited) {
        // Le camp est déjà en favori, on le supprime (unfavorite)
        $newFavorites = array_diff($currentFavorites, [$campId]);
    } else {
        // Le camp n'est pas en favori, on l'ajoute
        $newFavorites = $currentFavorites;
        $newFavorites[] = $campId;
    }
    
    // Étape 3 : Mettre à jour l'enregistrement de l'utilisateur avec la nouvelle liste
    $updateData = [
        'fields' => [
            'Favories' => array_values($newFavorites) // Re-indexe le tableau
        ]
    ];
    $updateResult = callAirtable('PATCH', 'User', $updateData, $userId);

    if (isset($updateResult['error'])) {
        throw new Exception("Erreur lors de la mise à jour des favoris.");
    }

    // Étape 4 : Mettre à jour la session et renvoyer le nouveau statut
    $_SESSION['user']['favorites'] = array_values($newFavorites);
    
    echo json_encode(['success' => true, 'isFavorited' => !$isFavorited]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\update_camp.php === 
<?php
require_once 'partials/header.php';

// SÉCURITÉ : On vérifie que l'utilisateur est connecté ET qu'il est admin.
if (!isset($_SESSION['user']) || !($_SESSION['user']['is_admin'] ?? false)) {
    header('Location: index.php');
    exit;
}
?>

<title>Historique des Camps Refusés - Admin</title>

<main class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
        <a href="admin.php" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.612l4.158 3.96a.75.75 0 1 1-1.04 1.08l-5.5-5.25a.75.75 0 0 1 0-1.08l5.5-5.25a.75.75 0 1 1 1.04 1.08L5.612 9.25H16.25A.75.75 0 0 1 17 10Z" clip-rule="evenodd" /></svg>
            Retour au panneau d'administration
        </a>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-lg border">
        <h1 class="text-2xl font-bold mb-4">Historique des Camps Refusés</h1>
        <div id="refused-camps-list" class="space-y-3">
            <!-- La liste sera chargée ici par JavaScript -->
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const listContainer = document.getElementById('refused-camps-list');
    listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Chargement de l\'historique...</p>';
    try {
        const response = await fetch('api/get_refused_camps.php');
        if (!response.ok) throw new Error('Erreur réseau lors de la récupération des camps refusés.');
        const camps = await response.json();
        
        listContainer.innerHTML = '';
        if(camps.length === 0) {
            listContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Aucun camp n\'a encore été refusé.</p>';
            return;
        }

        camps.forEach(camp => {
            const campCard = `
                <div class="bg-red-50 p-3 rounded-lg border border-red-200 flex justify-between items-center">
                    <div>
                        <p class="font-semibold text-gray-800">${camp.nom}</p>
                        <p class="text-sm text-red-800">${camp.ville}</p>
                        <p class="text-xs text-gray-500 mt-1">Soumis par : ${camp.organisateur_nom}</p>
                    </div>
                    <a href="camp_details.php?id=${camp.id}" target="_blank" class="text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold px-2 py-1 rounded">Voir la fiche</a>
                </div>
            `;
            listContainer.innerHTML += campCard;
        });
    } catch (error) {
        listContainer.innerHTML = `<p class="text-red-500 font-bold text-center py-4">${error.message}</p>`;
    }
});
</script>

</body>
</html>
 
 
=== FICHIER : C:\xampp\htdocs\camps\api\user_login.php === 
<?php
// Fichier: /api/user_login.php
// Version mise à jour pour inclure le statut "Annimateur"

session_start();
header('Content-Type: application/json');
require_once 'config.php';

try {
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        http_response_code(405);
        echo json_encode(['error' => 'Méthode non autorisée.']);
        exit;
    }

    $input = json_decode(file_get_contents('php://input'), true);
    $mail = trim($input['mail'] ?? '');
    $password = $input['password'] ?? '';

    if (empty($mail) || empty($password)) {
        http_response_code(400);
        echo json_encode(['error' => 'Email et mot de passe requis.']);
        exit;
    }

    $tableName = 'User';
    $formula = "LOWER(TRIM({mail})) = '" . strtolower(addslashes($mail)) . "'";
    $url = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code >= 300) { throw new Exception("Erreur de communication avec la base de données."); }
    $result = json_decode($response, true);

    if (empty($result['records'])) {
        http_response_code(401);
        echo json_encode(['error' => 'Email ou mot de passe incorrect.']);
        exit;
    }

    $userRecord = $result['records'][0];
    $hashedPassword = $userRecord['fields']['Mot de passe aché'] ?? '';

    if (password_verify($password, $hashedPassword)) {
        $_SESSION['user'] = [
            'id' => $userRecord['id'],
            'nom' => $userRecord['fields']['nom'] ?? '',
            'prenom' => $userRecord['fields']['prenom'] ?? '',
            'mail' => $userRecord['fields']['mail'] ?? '',
            'photo_url' => $userRecord['fields']['PDP'][0]['url'] ?? null,
            'is_directeur' => $userRecord['fields']['Directeur'] ?? false,
            'demande_en_cours' => $userRecord['fields']['Demande en cours...'] ?? false,
            'is_admin' => $userRecord['fields']['Admin'] ?? false,
            'is_refused' => $userRecord['fields']['Refusé'] ?? false,
            'favorites' => $userRecord['fields']['Favories'] ?? [],
            // --- AJOUT IMPORTANT ---
            // On récupère le statut "Annimateur" depuis Airtable
            'is_animateur' => $userRecord['fields']['Annimateur'] ?? false
        ];
        echo json_encode(['success' => true]);
    } else {
        http_response_code(401);
        echo json_encode(['error' => 'Email ou mot de passe incorrect.']);
    }
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Une erreur fatale est survenue sur le serveur.', 'message' => $e->getMessage()]);
}
?> 
 
=== FICHIER : C:\xampp\htdocs\camps\api\user_register.php === 
<?php
// Fichier: /api/user_register.php
// Version corrigée avec appel API manuel.

error_reporting(E_ALL);
ini_set('display_errors', 1);
header('Content-Type: application/json');
require_once 'config.php';

try {
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        http_response_code(405);
        echo json_encode(['error' => 'Méthode non autorisée.']);
        exit;
    }

    $input = json_decode(file_get_contents('php://input'), true);
    $nom = $input['nom'] ?? null;
    $prenom = $input['prenom'] ?? null;
    $mail = $input['mail'] ?? null;
    $password = $input['password'] ?? null;
    $tel = $input['tel'] ?? '';

    if (!$nom || !$prenom || !$mail || !$password) {
        http_response_code(400);
        echo json_encode(['error' => 'Tous les champs sont obligatoires.']);
        exit;
    }

    $tableName = 'User';
    $formula = "LOWER({mail}) = '" . strtolower(addslashes($mail)) . "'";
    
    // Appel API manuel pour vérifier si l'email existe
    $url_check = AIRTABLE_API_URL . AIRTABLE_BASE_ID . '/' . rawurlencode($tableName) . '?filterByFormula=' . urlencode($formula);
    $ch_check = curl_init($url_check);
    curl_setopt($ch_check, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch_check, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . AIRTABLE_API_KEY]);
    $response_check = curl_exec($ch_check);
    curl_close($ch_check);
    $result_check = json_decode($response_check, true);

    if (isset($result_check['records']) && !empty($result_check['records'])) {
        http_response_code(409);
        echo json_encode(['error' => 'Un compte avec cette adresse email existe déjà.']);
        exit;
    }
    
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    $data = [
        'fields' => [
            'nom' => $nom,
            'prenom' => $prenom,
            'mail' => $mail,
            'numero de tel' => $tel,
            'Mot de passe aché' => $hashed_password
        ]
    ];
    
    // Utilisation de la fonction callAirtable pour créer (POST), car elle fonctionne pour cette méthode.
    $createResult = callAirtable('POST', $tableName, $data);

    if (isset($createResult['error'])) {
        http_response_code(500);
        echo json_encode(['error' => 'Erreur lors de la création du compte.', 'details' => $createResult]);
    } else {
        http_response_code(201);
        echo json_encode(['success' => 'Compte créé avec succès !']);
    }

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Une erreur fatale est survenue sur le serveur.', 'message' => $e->getMessage()]);
}
?>
 
 
=== FICHIER : C:\xampp\htdocs\camps\partials\header.php === 
<?php
// On démarre la session au tout début de chaque page.
session_start();
// On définit les statuts de l'utilisateur pour simplifier le code HTML
$is_logged_in = isset($_SESSION['user']);
$is_director = $is_logged_in && ($_SESSION['user']['is_directeur'] ?? false);
$is_admin = $is_logged_in && ($_SESSION['user']['is_admin'] ?? false);
// --- AJOUT DE LA VARIABLE POUR ANIMATEUR ---
$is_animateur = $is_logged_in && ($_SESSION['user']['is_animateur'] ?? false);

// On prépare l'URL de l'avatar par défaut avec la première lettre du prénom.
$initial = 'U'; // Initiale par défaut
if ($is_logged_in && !empty($_SESSION['user']['prenom'])) {
    $initial = strtoupper(substr($_SESSION['user']['prenom'], 0, 1));
}
$placeholder_url_desktop = "https://placehold.co/36x36/e2e8f0/2563eb?text=" . urlencode($initial);
$placeholder_url_mobile = "https://placehold.co/48x48/e2e8f0/2563eb?text=" . urlencode($initial);
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColoMap - Trouvez le camp parfait</title>
    <link rel="icon" type="image/png" href="favico.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style> body { font-family: 'Inter', sans-serif; } .loader { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .body-no-scroll { overflow: hidden; } </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <header class="bg-white shadow-sm sticky top-0 z-40">
        <nav class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
            <div class="flex items-center justify-between h-16">
                <div class="flex-shrink-0">
                    <a href="index.php" class="text-2xl font-bold"><span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">ColoMap</span></a>
                </div>

                <div class="hidden md:block">
                    <div class="ml-10 flex items-baseline space-x-4">
                        <a href="index.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Accueil</a>

                        <?php if ($is_director): ?>
                            <a href="organisateurs.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Organisateurs</a>
                        <?php endif; ?>

                        <?php if ($is_animateur): ?>
                            <a href="animateur.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Animateur</a>
                        <?php endif; ?>

                        <?php if ($is_logged_in): ?>
                            <a href="favorites.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Mes Favoris</a>
                            <a href="reservations.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Réservations</a>
                            <a href="messagerie.php" class="relative text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                                <span>Messagerie</span>
                                <span id="unread-badge-desktop" class="absolute top-1 right-0 w-4 h-4 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span>
                            </a>
                        <?php endif; ?>

                        <a href="aide.php" class="text-gray-500 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Aide</a>
                    </div>
                </div>

                <div class="hidden md:flex items-center">
                    <?php if ($is_logged_in): ?>
                        <a href="profile.php" class="relative mr-3" title="Accéder à mon profil"><img class="h-9 w-9 rounded-full object-cover ring-2 ring-offset-2 ring-blue-500" src="<?php echo htmlspecialchars($_SESSION['user']['photo_url'] ?? $placeholder_url_desktop); ?>" alt="Photo de profil"></a>
                        <a href="api/logout.php" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-300 text-sm">Déconnexion</a>
                    <?php else: ?>
                        <a href="login.php" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Connexion</a>
                    <?php endif; ?>
                </div>
                <div class="md:hidden flex items-center">
                    <button id="open-menu-button" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none"><svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" /></svg></button>
                </div>
            </div>
        </nav>
    </header>

    <div id="mobile-menu-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>
    <div id="mobile-menu" class="fixed top-0 right-0 h-full w-4/5 max-w-sm bg-white z-50 transform translate-x-full transition-transform duration-300 ease-in-out">
        <div class="p-4">
            <div class="flex items-center justify-between mb-8">
                <a href="index.php" class="text-2xl font-bold"><span class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">ColoMap</span></a>
                <button id="close-menu-button" class="p-2 rounded-md text-gray-400"><svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg></button>
            </div>
            <nav class="flex flex-col space-y-2">
                <?php if ($is_logged_in): ?>
                    <a href="profile.php" class="flex items-center p-3 rounded-lg mb-4 bg-gray-100"><img class="h-12 w-12 rounded-full object-cover mr-4" src="<?php echo htmlspecialchars($_SESSION['user']['photo_url'] ?? $placeholder_url_mobile); ?>" alt="Photo de profil"><div><div class="text-base font-bold text-gray-900"><?php echo htmlspecialchars($_SESSION['user']['prenom']) . ' ' . htmlspecialchars($_SESSION['user']['nom']); ?></div><div class="text-sm font-medium text-blue-600">Voir mon profil</div></div></a>
                <?php endif; ?>
                <a href="index.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Accueil</a>
                <?php if ($is_director): ?>
                    <a href="organisateurs.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Organisateurs</a>
                <?php endif; ?>

                <?php if ($is_animateur): ?>
                    <a href="animateur.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Animateur</a>
                <?php endif; ?>

                <?php if ($is_logged_in): ?>
                    <a href="favorites.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Mes Favoris</a>
                    <a href="reservations.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Réservations</a>
                    <a href="messagerie.php" class="relative text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium"><span>Messagerie</span><span id="unread-badge-mobile" class="absolute top-2 left-24 w-4 h-4 flex items-center justify-center bg-red-600 text-white text-xs font-bold rounded-full hidden"></span></a>
                <?php endif; ?>
                <a href="aide.php" class="text-gray-700 hover:bg-gray-100 block px-3 py-3 rounded-md text-base font-medium">Aide</a>
                <hr class="my-4">
                <?php if ($is_logged_in): ?>
                    <a href="api/logout.php" class="bg-gray-100 text-gray-700 hover:bg-gray-200 block px-3 py-3 rounded-md text-base font-medium text-center">Déconnexion</a>
                <?php else: ?>
                    <a href="login.php" class="bg-blue-500 text-white hover:bg-blue-600 block px-3 py-3 rounded-md text-base font-medium text-center">Connexion / Inscription</a>
                <?php endif; ?>
            </nav>
        </div>
    </div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // ... (le script du menu mobile reste identique)
        const openMenuButton = document.getElementById('open-menu-button');
        const closeMenuButton = document.getElementById('close-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const overlay = document.getElementById('mobile-menu-overlay');
        const body = document.body;
        if(openMenuButton) { openMenuButton.addEventListener('click', () => { mobileMenu.classList.remove('translate-x-full'); overlay.classList.remove('hidden'); body.classList.add('body-no-scroll'); }); }
        if(closeMenuButton) { closeMenuButton.addEventListener('click', () => { mobileMenu.classList.add('translate-x-full'); overlay.classList.add('hidden'); body.classList.remove('body-no-scroll'); }); }
        if(overlay) { overlay.addEventListener('click', () => { mobileMenu.classList.add('translate-x-full'); overlay.classList.add('hidden'); body.classList.remove('body-no-scroll'); }); }

        // Script pour les notifications
        <?php if ($is_logged_in): ?>
        async function fetchUnreadCount() {
            try {
                const response = await fetch('api/get_unread_messages_count.php');
                if (!response.ok) return;
                const data = await response.json();
                const count = data.count || 0;
                const badgeDesktop = document.getElementById('unread-badge-desktop');
                const badgeMobile = document.getElementById('unread-badge-mobile');
                if (count > 0) {
                    if(badgeDesktop) { badgeDesktop.textContent = count; badgeDesktop.classList.remove('hidden'); }
                    if(badgeMobile) { badgeMobile.textContent = count; badgeMobile.classList.remove('hidden'); }
                } else {
                    if(badgeDesktop) badgeDesktop.classList.add('hidden');
                    if(badgeMobile) badgeMobile.classList.add('hidden');
                }
            } catch (error) { console.error("Erreur de notif:", error); }
        }
        fetchUnreadCount();
        setInterval(fetchUnreadCount, 60000);
        <?php endif; ?>
    });
</script>
</body>
</html>
 
 
